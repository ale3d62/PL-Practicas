Grammar:

Rule 0     S' -> S
Rule 1     S -> <empty>
Rule 2     S -> S LINE ;
Rule 3     LINE -> DECLAR
Rule 4     LINE -> INSTR
Rule 5     INSTR -> OROP
Rule 6     INSTR -> ASIG
Rule 7     DECLAR -> TYPE IDPRIMA
Rule 8     IDPRIMA -> empty ELEM REST
Rule 9     REST -> <empty>
Rule 10    REST -> , empty2 ELEM REST
Rule 11    ELEM -> ID = INSTR
Rule 12    ELEM -> ID
Rule 13    empty -> <empty>
Rule 14    empty2 -> <empty>
Rule 15    ASIG -> ID = INSTR
Rule 16    OROP -> ANDOP
Rule 17    OROP -> OROP ORSIMB ANDOP
Rule 18    ANDOP -> NOTOP
Rule 19    ANDOP -> ANDOP ANDSIMB NOTOP
Rule 20    NOTOP -> COMPOP
Rule 21    NOTOP -> ! NOTOP
Rule 22    COMPOP -> ADDOP
Rule 23    COMPOP -> COMPOP COMPSIMB ADDOP
Rule 24    ADDOP -> PRODOP
Rule 25    ADDOP -> ADDOP - PRODOP
Rule 26    ADDOP -> ADDOP + PRODOP
Rule 27    PRODOP -> PAROP
Rule 28    PRODOP -> PRODOP / PAROP
Rule 29    PRODOP -> PRODOP * PAROP
Rule 30    PAROP -> VAL
Rule 31    PAROP -> ( OROP )
Rule 32    VAL -> ID
Rule 33    VAL -> CHAR
Rule 34    VAL -> NUMBERF
Rule 35    VAL -> NUMBER

Terminals, with rules where they appear:

!                    : 21
(                    : 31
)                    : 31
*                    : 29
+                    : 26
,                    : 10
-                    : 25
/                    : 28
;                    : 2
=                    : 11 15
ANDSIMB              : 19
CHAR                 : 33
COMPSIMB             : 23
ID                   : 11 12 15 32
NUMBER               : 35
NUMBERF              : 34
ORSIMB               : 17
TYPE                 : 7
error                : 

Nonterminals, with rules where they appear:

ADDOP                : 22 23 25 26
ANDOP                : 16 17 19
ASIG                 : 6
COMPOP               : 20 23
DECLAR               : 3
ELEM                 : 8 10
IDPRIMA              : 7
INSTR                : 4 11 15
LINE                 : 2
NOTOP                : 18 19 21
OROP                 : 5 17 31
PAROP                : 27 28 29
PRODOP               : 24 25 26 28 29
REST                 : 8 10
S                    : 2 0
VAL                  : 30
empty                : 8
empty2               : 10


state 0

    (0) S' -> . S
    (1) S -> .
    (2) S -> . S LINE ;
    TYPE            reduce using rule 1 (S -> .)
    ID              reduce using rule 1 (S -> .)
    !               reduce using rule 1 (S -> .)
    (               reduce using rule 1 (S -> .)
    CHAR            reduce using rule 1 (S -> .)
    NUMBERF         reduce using rule 1 (S -> .)
    NUMBER          reduce using rule 1 (S -> .)
    $end            reduce using rule 1 (S -> .)

    S                              shift and go to state 1

state 1

    (0) S' -> S .
    (2) S -> S . LINE ;
    (3) LINE -> . DECLAR
    (4) LINE -> . INSTR
    (7) DECLAR -> . TYPE IDPRIMA
    (5) INSTR -> . OROP
    (6) INSTR -> . ASIG
    (16) OROP -> . ANDOP
    (17) OROP -> . OROP ORSIMB ANDOP
    (15) ASIG -> . ID = INSTR
    (18) ANDOP -> . NOTOP
    (19) ANDOP -> . ANDOP ANDSIMB NOTOP
    (20) NOTOP -> . COMPOP
    (21) NOTOP -> . ! NOTOP
    (22) COMPOP -> . ADDOP
    (23) COMPOP -> . COMPOP COMPSIMB ADDOP
    (24) ADDOP -> . PRODOP
    (25) ADDOP -> . ADDOP - PRODOP
    (26) ADDOP -> . ADDOP + PRODOP
    (27) PRODOP -> . PAROP
    (28) PRODOP -> . PRODOP / PAROP
    (29) PRODOP -> . PRODOP * PAROP
    (30) PAROP -> . VAL
    (31) PAROP -> . ( OROP )
    (32) VAL -> . ID
    (33) VAL -> . CHAR
    (34) VAL -> . NUMBERF
    (35) VAL -> . NUMBER
    TYPE            shift and go to state 5
    ID              shift and go to state 9
    !               shift and go to state 12
    (               shift and go to state 17
    CHAR            shift and go to state 18
    NUMBERF         shift and go to state 19
    NUMBER          shift and go to state 20

    LINE                           shift and go to state 2
    DECLAR                         shift and go to state 3
    INSTR                          shift and go to state 4
    OROP                           shift and go to state 6
    ASIG                           shift and go to state 7
    ANDOP                          shift and go to state 8
    NOTOP                          shift and go to state 10
    COMPOP                         shift and go to state 11
    ADDOP                          shift and go to state 13
    PRODOP                         shift and go to state 14
    PAROP                          shift and go to state 15
    VAL                            shift and go to state 16

state 2

    (2) S -> S LINE . ;
    ;               shift and go to state 21


state 3

    (3) LINE -> DECLAR .
    ;               reduce using rule 3 (LINE -> DECLAR .)


state 4

    (4) LINE -> INSTR .
    ;               reduce using rule 4 (LINE -> INSTR .)


state 5

    (7) DECLAR -> TYPE . IDPRIMA
    (8) IDPRIMA -> . empty ELEM REST
    (13) empty -> .
    ID              reduce using rule 13 (empty -> .)

    IDPRIMA                        shift and go to state 22
    empty                          shift and go to state 23

state 6

    (5) INSTR -> OROP .
    (17) OROP -> OROP . ORSIMB ANDOP
    ;               reduce using rule 5 (INSTR -> OROP .)
    ,               reduce using rule 5 (INSTR -> OROP .)
    ORSIMB          shift and go to state 24


state 7

    (6) INSTR -> ASIG .
    ;               reduce using rule 6 (INSTR -> ASIG .)
    ,               reduce using rule 6 (INSTR -> ASIG .)


state 8

    (16) OROP -> ANDOP .
    (19) ANDOP -> ANDOP . ANDSIMB NOTOP
    ORSIMB          reduce using rule 16 (OROP -> ANDOP .)
    ;               reduce using rule 16 (OROP -> ANDOP .)
    )               reduce using rule 16 (OROP -> ANDOP .)
    ,               reduce using rule 16 (OROP -> ANDOP .)
    ANDSIMB         shift and go to state 25


state 9

    (15) ASIG -> ID . = INSTR
    (32) VAL -> ID .
    =               shift and go to state 26
    /               reduce using rule 32 (VAL -> ID .)
    *               reduce using rule 32 (VAL -> ID .)
    -               reduce using rule 32 (VAL -> ID .)
    +               reduce using rule 32 (VAL -> ID .)
    COMPSIMB        reduce using rule 32 (VAL -> ID .)
    ANDSIMB         reduce using rule 32 (VAL -> ID .)
    ORSIMB          reduce using rule 32 (VAL -> ID .)
    ;               reduce using rule 32 (VAL -> ID .)
    ,               reduce using rule 32 (VAL -> ID .)


state 10

    (18) ANDOP -> NOTOP .
    ANDSIMB         reduce using rule 18 (ANDOP -> NOTOP .)
    ORSIMB          reduce using rule 18 (ANDOP -> NOTOP .)
    ;               reduce using rule 18 (ANDOP -> NOTOP .)
    )               reduce using rule 18 (ANDOP -> NOTOP .)
    ,               reduce using rule 18 (ANDOP -> NOTOP .)


state 11

    (20) NOTOP -> COMPOP .
    (23) COMPOP -> COMPOP . COMPSIMB ADDOP
    ANDSIMB         reduce using rule 20 (NOTOP -> COMPOP .)
    ORSIMB          reduce using rule 20 (NOTOP -> COMPOP .)
    ;               reduce using rule 20 (NOTOP -> COMPOP .)
    )               reduce using rule 20 (NOTOP -> COMPOP .)
    ,               reduce using rule 20 (NOTOP -> COMPOP .)
    COMPSIMB        shift and go to state 27


state 12

    (21) NOTOP -> ! . NOTOP
    (20) NOTOP -> . COMPOP
    (21) NOTOP -> . ! NOTOP
    (22) COMPOP -> . ADDOP
    (23) COMPOP -> . COMPOP COMPSIMB ADDOP
    (24) ADDOP -> . PRODOP
    (25) ADDOP -> . ADDOP - PRODOP
    (26) ADDOP -> . ADDOP + PRODOP
    (27) PRODOP -> . PAROP
    (28) PRODOP -> . PRODOP / PAROP
    (29) PRODOP -> . PRODOP * PAROP
    (30) PAROP -> . VAL
    (31) PAROP -> . ( OROP )
    (32) VAL -> . ID
    (33) VAL -> . CHAR
    (34) VAL -> . NUMBERF
    (35) VAL -> . NUMBER
    !               shift and go to state 12
    (               shift and go to state 17
    ID              shift and go to state 29
    CHAR            shift and go to state 18
    NUMBERF         shift and go to state 19
    NUMBER          shift and go to state 20

    NOTOP                          shift and go to state 28
    COMPOP                         shift and go to state 11
    ADDOP                          shift and go to state 13
    PRODOP                         shift and go to state 14
    PAROP                          shift and go to state 15
    VAL                            shift and go to state 16

state 13

    (22) COMPOP -> ADDOP .
    (25) ADDOP -> ADDOP . - PRODOP
    (26) ADDOP -> ADDOP . + PRODOP
    COMPSIMB        reduce using rule 22 (COMPOP -> ADDOP .)
    ANDSIMB         reduce using rule 22 (COMPOP -> ADDOP .)
    ORSIMB          reduce using rule 22 (COMPOP -> ADDOP .)
    ;               reduce using rule 22 (COMPOP -> ADDOP .)
    )               reduce using rule 22 (COMPOP -> ADDOP .)
    ,               reduce using rule 22 (COMPOP -> ADDOP .)
    -               shift and go to state 30
    +               shift and go to state 31


state 14

    (24) ADDOP -> PRODOP .
    (28) PRODOP -> PRODOP . / PAROP
    (29) PRODOP -> PRODOP . * PAROP
    -               reduce using rule 24 (ADDOP -> PRODOP .)
    +               reduce using rule 24 (ADDOP -> PRODOP .)
    COMPSIMB        reduce using rule 24 (ADDOP -> PRODOP .)
    ANDSIMB         reduce using rule 24 (ADDOP -> PRODOP .)
    ORSIMB          reduce using rule 24 (ADDOP -> PRODOP .)
    ;               reduce using rule 24 (ADDOP -> PRODOP .)
    )               reduce using rule 24 (ADDOP -> PRODOP .)
    ,               reduce using rule 24 (ADDOP -> PRODOP .)
    /               shift and go to state 32
    *               shift and go to state 33


state 15

    (27) PRODOP -> PAROP .
    /               reduce using rule 27 (PRODOP -> PAROP .)
    *               reduce using rule 27 (PRODOP -> PAROP .)
    -               reduce using rule 27 (PRODOP -> PAROP .)
    +               reduce using rule 27 (PRODOP -> PAROP .)
    COMPSIMB        reduce using rule 27 (PRODOP -> PAROP .)
    ANDSIMB         reduce using rule 27 (PRODOP -> PAROP .)
    ORSIMB          reduce using rule 27 (PRODOP -> PAROP .)
    ;               reduce using rule 27 (PRODOP -> PAROP .)
    )               reduce using rule 27 (PRODOP -> PAROP .)
    ,               reduce using rule 27 (PRODOP -> PAROP .)


state 16

    (30) PAROP -> VAL .
    /               reduce using rule 30 (PAROP -> VAL .)
    *               reduce using rule 30 (PAROP -> VAL .)
    -               reduce using rule 30 (PAROP -> VAL .)
    +               reduce using rule 30 (PAROP -> VAL .)
    COMPSIMB        reduce using rule 30 (PAROP -> VAL .)
    ANDSIMB         reduce using rule 30 (PAROP -> VAL .)
    ORSIMB          reduce using rule 30 (PAROP -> VAL .)
    ;               reduce using rule 30 (PAROP -> VAL .)
    )               reduce using rule 30 (PAROP -> VAL .)
    ,               reduce using rule 30 (PAROP -> VAL .)


state 17

    (31) PAROP -> ( . OROP )
    (16) OROP -> . ANDOP
    (17) OROP -> . OROP ORSIMB ANDOP
    (18) ANDOP -> . NOTOP
    (19) ANDOP -> . ANDOP ANDSIMB NOTOP
    (20) NOTOP -> . COMPOP
    (21) NOTOP -> . ! NOTOP
    (22) COMPOP -> . ADDOP
    (23) COMPOP -> . COMPOP COMPSIMB ADDOP
    (24) ADDOP -> . PRODOP
    (25) ADDOP -> . ADDOP - PRODOP
    (26) ADDOP -> . ADDOP + PRODOP
    (27) PRODOP -> . PAROP
    (28) PRODOP -> . PRODOP / PAROP
    (29) PRODOP -> . PRODOP * PAROP
    (30) PAROP -> . VAL
    (31) PAROP -> . ( OROP )
    (32) VAL -> . ID
    (33) VAL -> . CHAR
    (34) VAL -> . NUMBERF
    (35) VAL -> . NUMBER
    !               shift and go to state 12
    (               shift and go to state 17
    ID              shift and go to state 29
    CHAR            shift and go to state 18
    NUMBERF         shift and go to state 19
    NUMBER          shift and go to state 20

    OROP                           shift and go to state 34
    ANDOP                          shift and go to state 8
    NOTOP                          shift and go to state 10
    COMPOP                         shift and go to state 11
    ADDOP                          shift and go to state 13
    PRODOP                         shift and go to state 14
    PAROP                          shift and go to state 15
    VAL                            shift and go to state 16

state 18

    (33) VAL -> CHAR .
    /               reduce using rule 33 (VAL -> CHAR .)
    *               reduce using rule 33 (VAL -> CHAR .)
    -               reduce using rule 33 (VAL -> CHAR .)
    +               reduce using rule 33 (VAL -> CHAR .)
    COMPSIMB        reduce using rule 33 (VAL -> CHAR .)
    ANDSIMB         reduce using rule 33 (VAL -> CHAR .)
    ORSIMB          reduce using rule 33 (VAL -> CHAR .)
    ;               reduce using rule 33 (VAL -> CHAR .)
    )               reduce using rule 33 (VAL -> CHAR .)
    ,               reduce using rule 33 (VAL -> CHAR .)


state 19

    (34) VAL -> NUMBERF .
    /               reduce using rule 34 (VAL -> NUMBERF .)
    *               reduce using rule 34 (VAL -> NUMBERF .)
    -               reduce using rule 34 (VAL -> NUMBERF .)
    +               reduce using rule 34 (VAL -> NUMBERF .)
    COMPSIMB        reduce using rule 34 (VAL -> NUMBERF .)
    ANDSIMB         reduce using rule 34 (VAL -> NUMBERF .)
    ORSIMB          reduce using rule 34 (VAL -> NUMBERF .)
    ;               reduce using rule 34 (VAL -> NUMBERF .)
    )               reduce using rule 34 (VAL -> NUMBERF .)
    ,               reduce using rule 34 (VAL -> NUMBERF .)


state 20

    (35) VAL -> NUMBER .
    /               reduce using rule 35 (VAL -> NUMBER .)
    *               reduce using rule 35 (VAL -> NUMBER .)
    -               reduce using rule 35 (VAL -> NUMBER .)
    +               reduce using rule 35 (VAL -> NUMBER .)
    COMPSIMB        reduce using rule 35 (VAL -> NUMBER .)
    ANDSIMB         reduce using rule 35 (VAL -> NUMBER .)
    ORSIMB          reduce using rule 35 (VAL -> NUMBER .)
    ;               reduce using rule 35 (VAL -> NUMBER .)
    )               reduce using rule 35 (VAL -> NUMBER .)
    ,               reduce using rule 35 (VAL -> NUMBER .)


state 21

    (2) S -> S LINE ; .
    TYPE            reduce using rule 2 (S -> S LINE ; .)
    ID              reduce using rule 2 (S -> S LINE ; .)
    !               reduce using rule 2 (S -> S LINE ; .)
    (               reduce using rule 2 (S -> S LINE ; .)
    CHAR            reduce using rule 2 (S -> S LINE ; .)
    NUMBERF         reduce using rule 2 (S -> S LINE ; .)
    NUMBER          reduce using rule 2 (S -> S LINE ; .)
    $end            reduce using rule 2 (S -> S LINE ; .)


state 22

    (7) DECLAR -> TYPE IDPRIMA .
    ;               reduce using rule 7 (DECLAR -> TYPE IDPRIMA .)


state 23

    (8) IDPRIMA -> empty . ELEM REST
    (11) ELEM -> . ID = INSTR
    (12) ELEM -> . ID
    ID              shift and go to state 36

    ELEM                           shift and go to state 35

state 24

    (17) OROP -> OROP ORSIMB . ANDOP
    (18) ANDOP -> . NOTOP
    (19) ANDOP -> . ANDOP ANDSIMB NOTOP
    (20) NOTOP -> . COMPOP
    (21) NOTOP -> . ! NOTOP
    (22) COMPOP -> . ADDOP
    (23) COMPOP -> . COMPOP COMPSIMB ADDOP
    (24) ADDOP -> . PRODOP
    (25) ADDOP -> . ADDOP - PRODOP
    (26) ADDOP -> . ADDOP + PRODOP
    (27) PRODOP -> . PAROP
    (28) PRODOP -> . PRODOP / PAROP
    (29) PRODOP -> . PRODOP * PAROP
    (30) PAROP -> . VAL
    (31) PAROP -> . ( OROP )
    (32) VAL -> . ID
    (33) VAL -> . CHAR
    (34) VAL -> . NUMBERF
    (35) VAL -> . NUMBER
    !               shift and go to state 12
    (               shift and go to state 17
    ID              shift and go to state 29
    CHAR            shift and go to state 18
    NUMBERF         shift and go to state 19
    NUMBER          shift and go to state 20

    ANDOP                          shift and go to state 37
    NOTOP                          shift and go to state 10
    COMPOP                         shift and go to state 11
    ADDOP                          shift and go to state 13
    PRODOP                         shift and go to state 14
    PAROP                          shift and go to state 15
    VAL                            shift and go to state 16

state 25

    (19) ANDOP -> ANDOP ANDSIMB . NOTOP
    (20) NOTOP -> . COMPOP
    (21) NOTOP -> . ! NOTOP
    (22) COMPOP -> . ADDOP
    (23) COMPOP -> . COMPOP COMPSIMB ADDOP
    (24) ADDOP -> . PRODOP
    (25) ADDOP -> . ADDOP - PRODOP
    (26) ADDOP -> . ADDOP + PRODOP
    (27) PRODOP -> . PAROP
    (28) PRODOP -> . PRODOP / PAROP
    (29) PRODOP -> . PRODOP * PAROP
    (30) PAROP -> . VAL
    (31) PAROP -> . ( OROP )
    (32) VAL -> . ID
    (33) VAL -> . CHAR
    (34) VAL -> . NUMBERF
    (35) VAL -> . NUMBER
    !               shift and go to state 12
    (               shift and go to state 17
    ID              shift and go to state 29
    CHAR            shift and go to state 18
    NUMBERF         shift and go to state 19
    NUMBER          shift and go to state 20

    NOTOP                          shift and go to state 38
    COMPOP                         shift and go to state 11
    ADDOP                          shift and go to state 13
    PRODOP                         shift and go to state 14
    PAROP                          shift and go to state 15
    VAL                            shift and go to state 16

state 26

    (15) ASIG -> ID = . INSTR
    (5) INSTR -> . OROP
    (6) INSTR -> . ASIG
    (16) OROP -> . ANDOP
    (17) OROP -> . OROP ORSIMB ANDOP
    (15) ASIG -> . ID = INSTR
    (18) ANDOP -> . NOTOP
    (19) ANDOP -> . ANDOP ANDSIMB NOTOP
    (20) NOTOP -> . COMPOP
    (21) NOTOP -> . ! NOTOP
    (22) COMPOP -> . ADDOP
    (23) COMPOP -> . COMPOP COMPSIMB ADDOP
    (24) ADDOP -> . PRODOP
    (25) ADDOP -> . ADDOP - PRODOP
    (26) ADDOP -> . ADDOP + PRODOP
    (27) PRODOP -> . PAROP
    (28) PRODOP -> . PRODOP / PAROP
    (29) PRODOP -> . PRODOP * PAROP
    (30) PAROP -> . VAL
    (31) PAROP -> . ( OROP )
    (32) VAL -> . ID
    (33) VAL -> . CHAR
    (34) VAL -> . NUMBERF
    (35) VAL -> . NUMBER
    ID              shift and go to state 9
    !               shift and go to state 12
    (               shift and go to state 17
    CHAR            shift and go to state 18
    NUMBERF         shift and go to state 19
    NUMBER          shift and go to state 20

    INSTR                          shift and go to state 39
    OROP                           shift and go to state 6
    ASIG                           shift and go to state 7
    ANDOP                          shift and go to state 8
    NOTOP                          shift and go to state 10
    COMPOP                         shift and go to state 11
    ADDOP                          shift and go to state 13
    PRODOP                         shift and go to state 14
    PAROP                          shift and go to state 15
    VAL                            shift and go to state 16

state 27

    (23) COMPOP -> COMPOP COMPSIMB . ADDOP
    (24) ADDOP -> . PRODOP
    (25) ADDOP -> . ADDOP - PRODOP
    (26) ADDOP -> . ADDOP + PRODOP
    (27) PRODOP -> . PAROP
    (28) PRODOP -> . PRODOP / PAROP
    (29) PRODOP -> . PRODOP * PAROP
    (30) PAROP -> . VAL
    (31) PAROP -> . ( OROP )
    (32) VAL -> . ID
    (33) VAL -> . CHAR
    (34) VAL -> . NUMBERF
    (35) VAL -> . NUMBER
    (               shift and go to state 17
    ID              shift and go to state 29
    CHAR            shift and go to state 18
    NUMBERF         shift and go to state 19
    NUMBER          shift and go to state 20

    ADDOP                          shift and go to state 40
    PRODOP                         shift and go to state 14
    PAROP                          shift and go to state 15
    VAL                            shift and go to state 16

state 28

    (21) NOTOP -> ! NOTOP .
    ANDSIMB         reduce using rule 21 (NOTOP -> ! NOTOP .)
    ORSIMB          reduce using rule 21 (NOTOP -> ! NOTOP .)
    ;               reduce using rule 21 (NOTOP -> ! NOTOP .)
    )               reduce using rule 21 (NOTOP -> ! NOTOP .)
    ,               reduce using rule 21 (NOTOP -> ! NOTOP .)


state 29

    (32) VAL -> ID .
    /               reduce using rule 32 (VAL -> ID .)
    *               reduce using rule 32 (VAL -> ID .)
    -               reduce using rule 32 (VAL -> ID .)
    +               reduce using rule 32 (VAL -> ID .)
    COMPSIMB        reduce using rule 32 (VAL -> ID .)
    ANDSIMB         reduce using rule 32 (VAL -> ID .)
    ORSIMB          reduce using rule 32 (VAL -> ID .)
    ;               reduce using rule 32 (VAL -> ID .)
    )               reduce using rule 32 (VAL -> ID .)
    ,               reduce using rule 32 (VAL -> ID .)


state 30

    (25) ADDOP -> ADDOP - . PRODOP
    (27) PRODOP -> . PAROP
    (28) PRODOP -> . PRODOP / PAROP
    (29) PRODOP -> . PRODOP * PAROP
    (30) PAROP -> . VAL
    (31) PAROP -> . ( OROP )
    (32) VAL -> . ID
    (33) VAL -> . CHAR
    (34) VAL -> . NUMBERF
    (35) VAL -> . NUMBER
    (               shift and go to state 17
    ID              shift and go to state 29
    CHAR            shift and go to state 18
    NUMBERF         shift and go to state 19
    NUMBER          shift and go to state 20

    PRODOP                         shift and go to state 41
    PAROP                          shift and go to state 15
    VAL                            shift and go to state 16

state 31

    (26) ADDOP -> ADDOP + . PRODOP
    (27) PRODOP -> . PAROP
    (28) PRODOP -> . PRODOP / PAROP
    (29) PRODOP -> . PRODOP * PAROP
    (30) PAROP -> . VAL
    (31) PAROP -> . ( OROP )
    (32) VAL -> . ID
    (33) VAL -> . CHAR
    (34) VAL -> . NUMBERF
    (35) VAL -> . NUMBER
    (               shift and go to state 17
    ID              shift and go to state 29
    CHAR            shift and go to state 18
    NUMBERF         shift and go to state 19
    NUMBER          shift and go to state 20

    PRODOP                         shift and go to state 42
    PAROP                          shift and go to state 15
    VAL                            shift and go to state 16

state 32

    (28) PRODOP -> PRODOP / . PAROP
    (30) PAROP -> . VAL
    (31) PAROP -> . ( OROP )
    (32) VAL -> . ID
    (33) VAL -> . CHAR
    (34) VAL -> . NUMBERF
    (35) VAL -> . NUMBER
    (               shift and go to state 17
    ID              shift and go to state 29
    CHAR            shift and go to state 18
    NUMBERF         shift and go to state 19
    NUMBER          shift and go to state 20

    PAROP                          shift and go to state 43
    VAL                            shift and go to state 16

state 33

    (29) PRODOP -> PRODOP * . PAROP
    (30) PAROP -> . VAL
    (31) PAROP -> . ( OROP )
    (32) VAL -> . ID
    (33) VAL -> . CHAR
    (34) VAL -> . NUMBERF
    (35) VAL -> . NUMBER
    (               shift and go to state 17
    ID              shift and go to state 29
    CHAR            shift and go to state 18
    NUMBERF         shift and go to state 19
    NUMBER          shift and go to state 20

    PAROP                          shift and go to state 44
    VAL                            shift and go to state 16

state 34

    (31) PAROP -> ( OROP . )
    (17) OROP -> OROP . ORSIMB ANDOP
    )               shift and go to state 45
    ORSIMB          shift and go to state 24


state 35

    (8) IDPRIMA -> empty ELEM . REST
    (9) REST -> .
    (10) REST -> . , empty2 ELEM REST
    ;               reduce using rule 9 (REST -> .)
    ,               shift and go to state 47

    REST                           shift and go to state 46

state 36

    (11) ELEM -> ID . = INSTR
    (12) ELEM -> ID .
    =               shift and go to state 48
    ,               reduce using rule 12 (ELEM -> ID .)
    ;               reduce using rule 12 (ELEM -> ID .)


state 37

    (17) OROP -> OROP ORSIMB ANDOP .
    (19) ANDOP -> ANDOP . ANDSIMB NOTOP
    ORSIMB          reduce using rule 17 (OROP -> OROP ORSIMB ANDOP .)
    ;               reduce using rule 17 (OROP -> OROP ORSIMB ANDOP .)
    )               reduce using rule 17 (OROP -> OROP ORSIMB ANDOP .)
    ,               reduce using rule 17 (OROP -> OROP ORSIMB ANDOP .)
    ANDSIMB         shift and go to state 25


state 38

    (19) ANDOP -> ANDOP ANDSIMB NOTOP .
    ANDSIMB         reduce using rule 19 (ANDOP -> ANDOP ANDSIMB NOTOP .)
    ORSIMB          reduce using rule 19 (ANDOP -> ANDOP ANDSIMB NOTOP .)
    ;               reduce using rule 19 (ANDOP -> ANDOP ANDSIMB NOTOP .)
    )               reduce using rule 19 (ANDOP -> ANDOP ANDSIMB NOTOP .)
    ,               reduce using rule 19 (ANDOP -> ANDOP ANDSIMB NOTOP .)


state 39

    (15) ASIG -> ID = INSTR .
    ;               reduce using rule 15 (ASIG -> ID = INSTR .)
    ,               reduce using rule 15 (ASIG -> ID = INSTR .)


state 40

    (23) COMPOP -> COMPOP COMPSIMB ADDOP .
    (25) ADDOP -> ADDOP . - PRODOP
    (26) ADDOP -> ADDOP . + PRODOP
    COMPSIMB        reduce using rule 23 (COMPOP -> COMPOP COMPSIMB ADDOP .)
    ANDSIMB         reduce using rule 23 (COMPOP -> COMPOP COMPSIMB ADDOP .)
    ORSIMB          reduce using rule 23 (COMPOP -> COMPOP COMPSIMB ADDOP .)
    ;               reduce using rule 23 (COMPOP -> COMPOP COMPSIMB ADDOP .)
    )               reduce using rule 23 (COMPOP -> COMPOP COMPSIMB ADDOP .)
    ,               reduce using rule 23 (COMPOP -> COMPOP COMPSIMB ADDOP .)
    -               shift and go to state 30
    +               shift and go to state 31


state 41

    (25) ADDOP -> ADDOP - PRODOP .
    (28) PRODOP -> PRODOP . / PAROP
    (29) PRODOP -> PRODOP . * PAROP
    -               reduce using rule 25 (ADDOP -> ADDOP - PRODOP .)
    +               reduce using rule 25 (ADDOP -> ADDOP - PRODOP .)
    COMPSIMB        reduce using rule 25 (ADDOP -> ADDOP - PRODOP .)
    ANDSIMB         reduce using rule 25 (ADDOP -> ADDOP - PRODOP .)
    ORSIMB          reduce using rule 25 (ADDOP -> ADDOP - PRODOP .)
    ;               reduce using rule 25 (ADDOP -> ADDOP - PRODOP .)
    )               reduce using rule 25 (ADDOP -> ADDOP - PRODOP .)
    ,               reduce using rule 25 (ADDOP -> ADDOP - PRODOP .)
    /               shift and go to state 32
    *               shift and go to state 33


state 42

    (26) ADDOP -> ADDOP + PRODOP .
    (28) PRODOP -> PRODOP . / PAROP
    (29) PRODOP -> PRODOP . * PAROP
    -               reduce using rule 26 (ADDOP -> ADDOP + PRODOP .)
    +               reduce using rule 26 (ADDOP -> ADDOP + PRODOP .)
    COMPSIMB        reduce using rule 26 (ADDOP -> ADDOP + PRODOP .)
    ANDSIMB         reduce using rule 26 (ADDOP -> ADDOP + PRODOP .)
    ORSIMB          reduce using rule 26 (ADDOP -> ADDOP + PRODOP .)
    ;               reduce using rule 26 (ADDOP -> ADDOP + PRODOP .)
    )               reduce using rule 26 (ADDOP -> ADDOP + PRODOP .)
    ,               reduce using rule 26 (ADDOP -> ADDOP + PRODOP .)
    /               shift and go to state 32
    *               shift and go to state 33


state 43

    (28) PRODOP -> PRODOP / PAROP .
    /               reduce using rule 28 (PRODOP -> PRODOP / PAROP .)
    *               reduce using rule 28 (PRODOP -> PRODOP / PAROP .)
    -               reduce using rule 28 (PRODOP -> PRODOP / PAROP .)
    +               reduce using rule 28 (PRODOP -> PRODOP / PAROP .)
    COMPSIMB        reduce using rule 28 (PRODOP -> PRODOP / PAROP .)
    ANDSIMB         reduce using rule 28 (PRODOP -> PRODOP / PAROP .)
    ORSIMB          reduce using rule 28 (PRODOP -> PRODOP / PAROP .)
    ;               reduce using rule 28 (PRODOP -> PRODOP / PAROP .)
    )               reduce using rule 28 (PRODOP -> PRODOP / PAROP .)
    ,               reduce using rule 28 (PRODOP -> PRODOP / PAROP .)


state 44

    (29) PRODOP -> PRODOP * PAROP .
    /               reduce using rule 29 (PRODOP -> PRODOP * PAROP .)
    *               reduce using rule 29 (PRODOP -> PRODOP * PAROP .)
    -               reduce using rule 29 (PRODOP -> PRODOP * PAROP .)
    +               reduce using rule 29 (PRODOP -> PRODOP * PAROP .)
    COMPSIMB        reduce using rule 29 (PRODOP -> PRODOP * PAROP .)
    ANDSIMB         reduce using rule 29 (PRODOP -> PRODOP * PAROP .)
    ORSIMB          reduce using rule 29 (PRODOP -> PRODOP * PAROP .)
    ;               reduce using rule 29 (PRODOP -> PRODOP * PAROP .)
    )               reduce using rule 29 (PRODOP -> PRODOP * PAROP .)
    ,               reduce using rule 29 (PRODOP -> PRODOP * PAROP .)


state 45

    (31) PAROP -> ( OROP ) .
    /               reduce using rule 31 (PAROP -> ( OROP ) .)
    *               reduce using rule 31 (PAROP -> ( OROP ) .)
    -               reduce using rule 31 (PAROP -> ( OROP ) .)
    +               reduce using rule 31 (PAROP -> ( OROP ) .)
    COMPSIMB        reduce using rule 31 (PAROP -> ( OROP ) .)
    ANDSIMB         reduce using rule 31 (PAROP -> ( OROP ) .)
    ORSIMB          reduce using rule 31 (PAROP -> ( OROP ) .)
    ;               reduce using rule 31 (PAROP -> ( OROP ) .)
    )               reduce using rule 31 (PAROP -> ( OROP ) .)
    ,               reduce using rule 31 (PAROP -> ( OROP ) .)


state 46

    (8) IDPRIMA -> empty ELEM REST .
    ;               reduce using rule 8 (IDPRIMA -> empty ELEM REST .)


state 47

    (10) REST -> , . empty2 ELEM REST
    (14) empty2 -> .
    ID              reduce using rule 14 (empty2 -> .)

    empty2                         shift and go to state 49

state 48

    (11) ELEM -> ID = . INSTR
    (5) INSTR -> . OROP
    (6) INSTR -> . ASIG
    (16) OROP -> . ANDOP
    (17) OROP -> . OROP ORSIMB ANDOP
    (15) ASIG -> . ID = INSTR
    (18) ANDOP -> . NOTOP
    (19) ANDOP -> . ANDOP ANDSIMB NOTOP
    (20) NOTOP -> . COMPOP
    (21) NOTOP -> . ! NOTOP
    (22) COMPOP -> . ADDOP
    (23) COMPOP -> . COMPOP COMPSIMB ADDOP
    (24) ADDOP -> . PRODOP
    (25) ADDOP -> . ADDOP - PRODOP
    (26) ADDOP -> . ADDOP + PRODOP
    (27) PRODOP -> . PAROP
    (28) PRODOP -> . PRODOP / PAROP
    (29) PRODOP -> . PRODOP * PAROP
    (30) PAROP -> . VAL
    (31) PAROP -> . ( OROP )
    (32) VAL -> . ID
    (33) VAL -> . CHAR
    (34) VAL -> . NUMBERF
    (35) VAL -> . NUMBER
    ID              shift and go to state 9
    !               shift and go to state 12
    (               shift and go to state 17
    CHAR            shift and go to state 18
    NUMBERF         shift and go to state 19
    NUMBER          shift and go to state 20

    INSTR                          shift and go to state 50
    OROP                           shift and go to state 6
    ASIG                           shift and go to state 7
    ANDOP                          shift and go to state 8
    NOTOP                          shift and go to state 10
    COMPOP                         shift and go to state 11
    ADDOP                          shift and go to state 13
    PRODOP                         shift and go to state 14
    PAROP                          shift and go to state 15
    VAL                            shift and go to state 16

state 49

    (10) REST -> , empty2 . ELEM REST
    (11) ELEM -> . ID = INSTR
    (12) ELEM -> . ID
    ID              shift and go to state 36

    ELEM                           shift and go to state 51

state 50

    (11) ELEM -> ID = INSTR .
    ,               reduce using rule 11 (ELEM -> ID = INSTR .)
    ;               reduce using rule 11 (ELEM -> ID = INSTR .)


state 51

    (10) REST -> , empty2 ELEM . REST
    (9) REST -> .
    (10) REST -> . , empty2 ELEM REST
    ;               reduce using rule 9 (REST -> .)
    ,               shift and go to state 47

    REST                           shift and go to state 52

state 52

    (10) REST -> , empty2 ELEM REST .
    ;               reduce using rule 10 (REST -> , empty2 ELEM REST .)

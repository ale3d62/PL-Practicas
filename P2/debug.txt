Grammar:

Rule 0     S' -> S
Rule 1     S -> <empty>
Rule 2     S -> S LINE ;
Rule 3     LINE -> DECLAR
Rule 4     LINE -> INSTR
Rule 5     INSTR -> OROP
Rule 6     INSTR -> ASIG
Rule 7     DECLAR -> TYPE IDPRIMA
Rule 8     IDPRIMA -> ID
Rule 9     IDPRIMA -> IDPRIMA , ID
Rule 10    ASIG -> ID = INSTR
Rule 11    ASIG -> TYPE ID = INSTR
Rule 12    OROP -> ANDOP
Rule 13    OROP -> OROP ORSIMB ANDOP
Rule 14    ANDOP -> NOTOP
Rule 15    ANDOP -> ANDOP ANDSIMB NOTOP
Rule 16    NOTOP -> COMPOP
Rule 17    NOTOP -> ! NOTOP
Rule 18    COMPOP -> ADDOP
Rule 19    COMPOP -> COMPOP COMPSIMB ADDOP
Rule 20    ADDOP -> PRODOP
Rule 21    ADDOP -> ADDOP - PRODOP
Rule 22    ADDOP -> ADDOP + PRODOP
Rule 23    PRODOP -> PAROP
Rule 24    PRODOP -> PRODOP / PAROP
Rule 25    PRODOP -> PRODOP * PAROP
Rule 26    PAROP -> VAL
Rule 27    PAROP -> ( OROP )
Rule 28    VAL -> ID
Rule 29    VAL -> CHAR
Rule 30    VAL -> NUMBERF
Rule 31    VAL -> NUMBER

Terminals, with rules where they appear:

!                    : 17
(                    : 27
)                    : 27
*                    : 25
+                    : 22
,                    : 9
-                    : 21
/                    : 24
;                    : 2
=                    : 10 11
ANDSIMB              : 15
CHAR                 : 29
COMPSIMB             : 19
ID                   : 8 9 10 11 28
NUMBER               : 31
NUMBERF              : 30
ORSIMB               : 13
TYPE                 : 7 11
error                : 

Nonterminals, with rules where they appear:

ADDOP                : 18 19 21 22
ANDOP                : 12 13 15
ASIG                 : 6
COMPOP               : 16 19
DECLAR               : 3
IDPRIMA              : 7 9
INSTR                : 4 10 11
LINE                 : 2
NOTOP                : 14 15 17
OROP                 : 5 13 27
PAROP                : 23 24 25
PRODOP               : 20 21 22 24 25
S                    : 2 0
VAL                  : 26


state 0

    (0) S' -> . S
    (1) S -> .
    (2) S -> . S LINE ;
    TYPE            reduce using rule 1 (S -> .)
    ID              reduce using rule 1 (S -> .)
    !               reduce using rule 1 (S -> .)
    (               reduce using rule 1 (S -> .)
    CHAR            reduce using rule 1 (S -> .)
    NUMBERF         reduce using rule 1 (S -> .)
    NUMBER          reduce using rule 1 (S -> .)
    $end            reduce using rule 1 (S -> .)

    S                              shift and go to state 1

state 1

    (0) S' -> S .
    (2) S -> S . LINE ;
    (3) LINE -> . DECLAR
    (4) LINE -> . INSTR
    (7) DECLAR -> . TYPE IDPRIMA
    (5) INSTR -> . OROP
    (6) INSTR -> . ASIG
    (12) OROP -> . ANDOP
    (13) OROP -> . OROP ORSIMB ANDOP
    (10) ASIG -> . ID = INSTR
    (11) ASIG -> . TYPE ID = INSTR
    (14) ANDOP -> . NOTOP
    (15) ANDOP -> . ANDOP ANDSIMB NOTOP
    (16) NOTOP -> . COMPOP
    (17) NOTOP -> . ! NOTOP
    (18) COMPOP -> . ADDOP
    (19) COMPOP -> . COMPOP COMPSIMB ADDOP
    (20) ADDOP -> . PRODOP
    (21) ADDOP -> . ADDOP - PRODOP
    (22) ADDOP -> . ADDOP + PRODOP
    (23) PRODOP -> . PAROP
    (24) PRODOP -> . PRODOP / PAROP
    (25) PRODOP -> . PRODOP * PAROP
    (26) PAROP -> . VAL
    (27) PAROP -> . ( OROP )
    (28) VAL -> . ID
    (29) VAL -> . CHAR
    (30) VAL -> . NUMBERF
    (31) VAL -> . NUMBER
    TYPE            shift and go to state 5
    ID              shift and go to state 9
    !               shift and go to state 12
    (               shift and go to state 17
    CHAR            shift and go to state 18
    NUMBERF         shift and go to state 19
    NUMBER          shift and go to state 20

    LINE                           shift and go to state 2
    DECLAR                         shift and go to state 3
    INSTR                          shift and go to state 4
    OROP                           shift and go to state 6
    ASIG                           shift and go to state 7
    ANDOP                          shift and go to state 8
    NOTOP                          shift and go to state 10
    COMPOP                         shift and go to state 11
    ADDOP                          shift and go to state 13
    PRODOP                         shift and go to state 14
    PAROP                          shift and go to state 15
    VAL                            shift and go to state 16

state 2

    (2) S -> S LINE . ;
    ;               shift and go to state 21


state 3

    (3) LINE -> DECLAR .
    ;               reduce using rule 3 (LINE -> DECLAR .)


state 4

    (4) LINE -> INSTR .
    ;               reduce using rule 4 (LINE -> INSTR .)


state 5

    (7) DECLAR -> TYPE . IDPRIMA
    (11) ASIG -> TYPE . ID = INSTR
    (8) IDPRIMA -> . ID
    (9) IDPRIMA -> . IDPRIMA , ID
    ID              shift and go to state 23

    IDPRIMA                        shift and go to state 22

state 6

    (5) INSTR -> OROP .
    (13) OROP -> OROP . ORSIMB ANDOP
    ;               reduce using rule 5 (INSTR -> OROP .)
    ORSIMB          shift and go to state 24


state 7

    (6) INSTR -> ASIG .
    ;               reduce using rule 6 (INSTR -> ASIG .)


state 8

    (12) OROP -> ANDOP .
    (15) ANDOP -> ANDOP . ANDSIMB NOTOP
    ORSIMB          reduce using rule 12 (OROP -> ANDOP .)
    ;               reduce using rule 12 (OROP -> ANDOP .)
    )               reduce using rule 12 (OROP -> ANDOP .)
    ANDSIMB         shift and go to state 25


state 9

    (10) ASIG -> ID . = INSTR
    (28) VAL -> ID .
    =               shift and go to state 26
    /               reduce using rule 28 (VAL -> ID .)
    *               reduce using rule 28 (VAL -> ID .)
    -               reduce using rule 28 (VAL -> ID .)
    +               reduce using rule 28 (VAL -> ID .)
    COMPSIMB        reduce using rule 28 (VAL -> ID .)
    ANDSIMB         reduce using rule 28 (VAL -> ID .)
    ORSIMB          reduce using rule 28 (VAL -> ID .)
    ;               reduce using rule 28 (VAL -> ID .)


state 10

    (14) ANDOP -> NOTOP .
    ANDSIMB         reduce using rule 14 (ANDOP -> NOTOP .)
    ORSIMB          reduce using rule 14 (ANDOP -> NOTOP .)
    ;               reduce using rule 14 (ANDOP -> NOTOP .)
    )               reduce using rule 14 (ANDOP -> NOTOP .)


state 11

    (16) NOTOP -> COMPOP .
    (19) COMPOP -> COMPOP . COMPSIMB ADDOP
    ANDSIMB         reduce using rule 16 (NOTOP -> COMPOP .)
    ORSIMB          reduce using rule 16 (NOTOP -> COMPOP .)
    ;               reduce using rule 16 (NOTOP -> COMPOP .)
    )               reduce using rule 16 (NOTOP -> COMPOP .)
    COMPSIMB        shift and go to state 27


state 12

    (17) NOTOP -> ! . NOTOP
    (16) NOTOP -> . COMPOP
    (17) NOTOP -> . ! NOTOP
    (18) COMPOP -> . ADDOP
    (19) COMPOP -> . COMPOP COMPSIMB ADDOP
    (20) ADDOP -> . PRODOP
    (21) ADDOP -> . ADDOP - PRODOP
    (22) ADDOP -> . ADDOP + PRODOP
    (23) PRODOP -> . PAROP
    (24) PRODOP -> . PRODOP / PAROP
    (25) PRODOP -> . PRODOP * PAROP
    (26) PAROP -> . VAL
    (27) PAROP -> . ( OROP )
    (28) VAL -> . ID
    (29) VAL -> . CHAR
    (30) VAL -> . NUMBERF
    (31) VAL -> . NUMBER
    !               shift and go to state 12
    (               shift and go to state 17
    ID              shift and go to state 29
    CHAR            shift and go to state 18
    NUMBERF         shift and go to state 19
    NUMBER          shift and go to state 20

    NOTOP                          shift and go to state 28
    COMPOP                         shift and go to state 11
    ADDOP                          shift and go to state 13
    PRODOP                         shift and go to state 14
    PAROP                          shift and go to state 15
    VAL                            shift and go to state 16

state 13

    (18) COMPOP -> ADDOP .
    (21) ADDOP -> ADDOP . - PRODOP
    (22) ADDOP -> ADDOP . + PRODOP
    COMPSIMB        reduce using rule 18 (COMPOP -> ADDOP .)
    ANDSIMB         reduce using rule 18 (COMPOP -> ADDOP .)
    ORSIMB          reduce using rule 18 (COMPOP -> ADDOP .)
    ;               reduce using rule 18 (COMPOP -> ADDOP .)
    )               reduce using rule 18 (COMPOP -> ADDOP .)
    -               shift and go to state 30
    +               shift and go to state 31


state 14

    (20) ADDOP -> PRODOP .
    (24) PRODOP -> PRODOP . / PAROP
    (25) PRODOP -> PRODOP . * PAROP
    -               reduce using rule 20 (ADDOP -> PRODOP .)
    +               reduce using rule 20 (ADDOP -> PRODOP .)
    COMPSIMB        reduce using rule 20 (ADDOP -> PRODOP .)
    ANDSIMB         reduce using rule 20 (ADDOP -> PRODOP .)
    ORSIMB          reduce using rule 20 (ADDOP -> PRODOP .)
    ;               reduce using rule 20 (ADDOP -> PRODOP .)
    )               reduce using rule 20 (ADDOP -> PRODOP .)
    /               shift and go to state 32
    *               shift and go to state 33


state 15

    (23) PRODOP -> PAROP .
    /               reduce using rule 23 (PRODOP -> PAROP .)
    *               reduce using rule 23 (PRODOP -> PAROP .)
    -               reduce using rule 23 (PRODOP -> PAROP .)
    +               reduce using rule 23 (PRODOP -> PAROP .)
    COMPSIMB        reduce using rule 23 (PRODOP -> PAROP .)
    ANDSIMB         reduce using rule 23 (PRODOP -> PAROP .)
    ORSIMB          reduce using rule 23 (PRODOP -> PAROP .)
    ;               reduce using rule 23 (PRODOP -> PAROP .)
    )               reduce using rule 23 (PRODOP -> PAROP .)


state 16

    (26) PAROP -> VAL .
    /               reduce using rule 26 (PAROP -> VAL .)
    *               reduce using rule 26 (PAROP -> VAL .)
    -               reduce using rule 26 (PAROP -> VAL .)
    +               reduce using rule 26 (PAROP -> VAL .)
    COMPSIMB        reduce using rule 26 (PAROP -> VAL .)
    ANDSIMB         reduce using rule 26 (PAROP -> VAL .)
    ORSIMB          reduce using rule 26 (PAROP -> VAL .)
    ;               reduce using rule 26 (PAROP -> VAL .)
    )               reduce using rule 26 (PAROP -> VAL .)


state 17

    (27) PAROP -> ( . OROP )
    (12) OROP -> . ANDOP
    (13) OROP -> . OROP ORSIMB ANDOP
    (14) ANDOP -> . NOTOP
    (15) ANDOP -> . ANDOP ANDSIMB NOTOP
    (16) NOTOP -> . COMPOP
    (17) NOTOP -> . ! NOTOP
    (18) COMPOP -> . ADDOP
    (19) COMPOP -> . COMPOP COMPSIMB ADDOP
    (20) ADDOP -> . PRODOP
    (21) ADDOP -> . ADDOP - PRODOP
    (22) ADDOP -> . ADDOP + PRODOP
    (23) PRODOP -> . PAROP
    (24) PRODOP -> . PRODOP / PAROP
    (25) PRODOP -> . PRODOP * PAROP
    (26) PAROP -> . VAL
    (27) PAROP -> . ( OROP )
    (28) VAL -> . ID
    (29) VAL -> . CHAR
    (30) VAL -> . NUMBERF
    (31) VAL -> . NUMBER
    !               shift and go to state 12
    (               shift and go to state 17
    ID              shift and go to state 29
    CHAR            shift and go to state 18
    NUMBERF         shift and go to state 19
    NUMBER          shift and go to state 20

    OROP                           shift and go to state 34
    ANDOP                          shift and go to state 8
    NOTOP                          shift and go to state 10
    COMPOP                         shift and go to state 11
    ADDOP                          shift and go to state 13
    PRODOP                         shift and go to state 14
    PAROP                          shift and go to state 15
    VAL                            shift and go to state 16

state 18

    (29) VAL -> CHAR .
    /               reduce using rule 29 (VAL -> CHAR .)
    *               reduce using rule 29 (VAL -> CHAR .)
    -               reduce using rule 29 (VAL -> CHAR .)
    +               reduce using rule 29 (VAL -> CHAR .)
    COMPSIMB        reduce using rule 29 (VAL -> CHAR .)
    ANDSIMB         reduce using rule 29 (VAL -> CHAR .)
    ORSIMB          reduce using rule 29 (VAL -> CHAR .)
    ;               reduce using rule 29 (VAL -> CHAR .)
    )               reduce using rule 29 (VAL -> CHAR .)


state 19

    (30) VAL -> NUMBERF .
    /               reduce using rule 30 (VAL -> NUMBERF .)
    *               reduce using rule 30 (VAL -> NUMBERF .)
    -               reduce using rule 30 (VAL -> NUMBERF .)
    +               reduce using rule 30 (VAL -> NUMBERF .)
    COMPSIMB        reduce using rule 30 (VAL -> NUMBERF .)
    ANDSIMB         reduce using rule 30 (VAL -> NUMBERF .)
    ORSIMB          reduce using rule 30 (VAL -> NUMBERF .)
    ;               reduce using rule 30 (VAL -> NUMBERF .)
    )               reduce using rule 30 (VAL -> NUMBERF .)


state 20

    (31) VAL -> NUMBER .
    /               reduce using rule 31 (VAL -> NUMBER .)
    *               reduce using rule 31 (VAL -> NUMBER .)
    -               reduce using rule 31 (VAL -> NUMBER .)
    +               reduce using rule 31 (VAL -> NUMBER .)
    COMPSIMB        reduce using rule 31 (VAL -> NUMBER .)
    ANDSIMB         reduce using rule 31 (VAL -> NUMBER .)
    ORSIMB          reduce using rule 31 (VAL -> NUMBER .)
    ;               reduce using rule 31 (VAL -> NUMBER .)
    )               reduce using rule 31 (VAL -> NUMBER .)


state 21

    (2) S -> S LINE ; .
    TYPE            reduce using rule 2 (S -> S LINE ; .)
    ID              reduce using rule 2 (S -> S LINE ; .)
    !               reduce using rule 2 (S -> S LINE ; .)
    (               reduce using rule 2 (S -> S LINE ; .)
    CHAR            reduce using rule 2 (S -> S LINE ; .)
    NUMBERF         reduce using rule 2 (S -> S LINE ; .)
    NUMBER          reduce using rule 2 (S -> S LINE ; .)
    $end            reduce using rule 2 (S -> S LINE ; .)


state 22

    (7) DECLAR -> TYPE IDPRIMA .
    (9) IDPRIMA -> IDPRIMA . , ID
    ;               reduce using rule 7 (DECLAR -> TYPE IDPRIMA .)
    ,               shift and go to state 35


state 23

    (11) ASIG -> TYPE ID . = INSTR
    (8) IDPRIMA -> ID .
    =               shift and go to state 36
    ,               reduce using rule 8 (IDPRIMA -> ID .)
    ;               reduce using rule 8 (IDPRIMA -> ID .)


state 24

    (13) OROP -> OROP ORSIMB . ANDOP
    (14) ANDOP -> . NOTOP
    (15) ANDOP -> . ANDOP ANDSIMB NOTOP
    (16) NOTOP -> . COMPOP
    (17) NOTOP -> . ! NOTOP
    (18) COMPOP -> . ADDOP
    (19) COMPOP -> . COMPOP COMPSIMB ADDOP
    (20) ADDOP -> . PRODOP
    (21) ADDOP -> . ADDOP - PRODOP
    (22) ADDOP -> . ADDOP + PRODOP
    (23) PRODOP -> . PAROP
    (24) PRODOP -> . PRODOP / PAROP
    (25) PRODOP -> . PRODOP * PAROP
    (26) PAROP -> . VAL
    (27) PAROP -> . ( OROP )
    (28) VAL -> . ID
    (29) VAL -> . CHAR
    (30) VAL -> . NUMBERF
    (31) VAL -> . NUMBER
    !               shift and go to state 12
    (               shift and go to state 17
    ID              shift and go to state 29
    CHAR            shift and go to state 18
    NUMBERF         shift and go to state 19
    NUMBER          shift and go to state 20

    ANDOP                          shift and go to state 37
    NOTOP                          shift and go to state 10
    COMPOP                         shift and go to state 11
    ADDOP                          shift and go to state 13
    PRODOP                         shift and go to state 14
    PAROP                          shift and go to state 15
    VAL                            shift and go to state 16

state 25

    (15) ANDOP -> ANDOP ANDSIMB . NOTOP
    (16) NOTOP -> . COMPOP
    (17) NOTOP -> . ! NOTOP
    (18) COMPOP -> . ADDOP
    (19) COMPOP -> . COMPOP COMPSIMB ADDOP
    (20) ADDOP -> . PRODOP
    (21) ADDOP -> . ADDOP - PRODOP
    (22) ADDOP -> . ADDOP + PRODOP
    (23) PRODOP -> . PAROP
    (24) PRODOP -> . PRODOP / PAROP
    (25) PRODOP -> . PRODOP * PAROP
    (26) PAROP -> . VAL
    (27) PAROP -> . ( OROP )
    (28) VAL -> . ID
    (29) VAL -> . CHAR
    (30) VAL -> . NUMBERF
    (31) VAL -> . NUMBER
    !               shift and go to state 12
    (               shift and go to state 17
    ID              shift and go to state 29
    CHAR            shift and go to state 18
    NUMBERF         shift and go to state 19
    NUMBER          shift and go to state 20

    NOTOP                          shift and go to state 38
    COMPOP                         shift and go to state 11
    ADDOP                          shift and go to state 13
    PRODOP                         shift and go to state 14
    PAROP                          shift and go to state 15
    VAL                            shift and go to state 16

state 26

    (10) ASIG -> ID = . INSTR
    (5) INSTR -> . OROP
    (6) INSTR -> . ASIG
    (12) OROP -> . ANDOP
    (13) OROP -> . OROP ORSIMB ANDOP
    (10) ASIG -> . ID = INSTR
    (11) ASIG -> . TYPE ID = INSTR
    (14) ANDOP -> . NOTOP
    (15) ANDOP -> . ANDOP ANDSIMB NOTOP
    (16) NOTOP -> . COMPOP
    (17) NOTOP -> . ! NOTOP
    (18) COMPOP -> . ADDOP
    (19) COMPOP -> . COMPOP COMPSIMB ADDOP
    (20) ADDOP -> . PRODOP
    (21) ADDOP -> . ADDOP - PRODOP
    (22) ADDOP -> . ADDOP + PRODOP
    (23) PRODOP -> . PAROP
    (24) PRODOP -> . PRODOP / PAROP
    (25) PRODOP -> . PRODOP * PAROP
    (26) PAROP -> . VAL
    (27) PAROP -> . ( OROP )
    (28) VAL -> . ID
    (29) VAL -> . CHAR
    (30) VAL -> . NUMBERF
    (31) VAL -> . NUMBER
    ID              shift and go to state 9
    TYPE            shift and go to state 40
    !               shift and go to state 12
    (               shift and go to state 17
    CHAR            shift and go to state 18
    NUMBERF         shift and go to state 19
    NUMBER          shift and go to state 20

    INSTR                          shift and go to state 39
    OROP                           shift and go to state 6
    ASIG                           shift and go to state 7
    ANDOP                          shift and go to state 8
    NOTOP                          shift and go to state 10
    COMPOP                         shift and go to state 11
    ADDOP                          shift and go to state 13
    PRODOP                         shift and go to state 14
    PAROP                          shift and go to state 15
    VAL                            shift and go to state 16

state 27

    (19) COMPOP -> COMPOP COMPSIMB . ADDOP
    (20) ADDOP -> . PRODOP
    (21) ADDOP -> . ADDOP - PRODOP
    (22) ADDOP -> . ADDOP + PRODOP
    (23) PRODOP -> . PAROP
    (24) PRODOP -> . PRODOP / PAROP
    (25) PRODOP -> . PRODOP * PAROP
    (26) PAROP -> . VAL
    (27) PAROP -> . ( OROP )
    (28) VAL -> . ID
    (29) VAL -> . CHAR
    (30) VAL -> . NUMBERF
    (31) VAL -> . NUMBER
    (               shift and go to state 17
    ID              shift and go to state 29
    CHAR            shift and go to state 18
    NUMBERF         shift and go to state 19
    NUMBER          shift and go to state 20

    ADDOP                          shift and go to state 41
    PRODOP                         shift and go to state 14
    PAROP                          shift and go to state 15
    VAL                            shift and go to state 16

state 28

    (17) NOTOP -> ! NOTOP .
    ANDSIMB         reduce using rule 17 (NOTOP -> ! NOTOP .)
    ORSIMB          reduce using rule 17 (NOTOP -> ! NOTOP .)
    ;               reduce using rule 17 (NOTOP -> ! NOTOP .)
    )               reduce using rule 17 (NOTOP -> ! NOTOP .)


state 29

    (28) VAL -> ID .
    /               reduce using rule 28 (VAL -> ID .)
    *               reduce using rule 28 (VAL -> ID .)
    -               reduce using rule 28 (VAL -> ID .)
    +               reduce using rule 28 (VAL -> ID .)
    COMPSIMB        reduce using rule 28 (VAL -> ID .)
    ANDSIMB         reduce using rule 28 (VAL -> ID .)
    ORSIMB          reduce using rule 28 (VAL -> ID .)
    ;               reduce using rule 28 (VAL -> ID .)
    )               reduce using rule 28 (VAL -> ID .)


state 30

    (21) ADDOP -> ADDOP - . PRODOP
    (23) PRODOP -> . PAROP
    (24) PRODOP -> . PRODOP / PAROP
    (25) PRODOP -> . PRODOP * PAROP
    (26) PAROP -> . VAL
    (27) PAROP -> . ( OROP )
    (28) VAL -> . ID
    (29) VAL -> . CHAR
    (30) VAL -> . NUMBERF
    (31) VAL -> . NUMBER
    (               shift and go to state 17
    ID              shift and go to state 29
    CHAR            shift and go to state 18
    NUMBERF         shift and go to state 19
    NUMBER          shift and go to state 20

    PRODOP                         shift and go to state 42
    PAROP                          shift and go to state 15
    VAL                            shift and go to state 16

state 31

    (22) ADDOP -> ADDOP + . PRODOP
    (23) PRODOP -> . PAROP
    (24) PRODOP -> . PRODOP / PAROP
    (25) PRODOP -> . PRODOP * PAROP
    (26) PAROP -> . VAL
    (27) PAROP -> . ( OROP )
    (28) VAL -> . ID
    (29) VAL -> . CHAR
    (30) VAL -> . NUMBERF
    (31) VAL -> . NUMBER
    (               shift and go to state 17
    ID              shift and go to state 29
    CHAR            shift and go to state 18
    NUMBERF         shift and go to state 19
    NUMBER          shift and go to state 20

    PRODOP                         shift and go to state 43
    PAROP                          shift and go to state 15
    VAL                            shift and go to state 16

state 32

    (24) PRODOP -> PRODOP / . PAROP
    (26) PAROP -> . VAL
    (27) PAROP -> . ( OROP )
    (28) VAL -> . ID
    (29) VAL -> . CHAR
    (30) VAL -> . NUMBERF
    (31) VAL -> . NUMBER
    (               shift and go to state 17
    ID              shift and go to state 29
    CHAR            shift and go to state 18
    NUMBERF         shift and go to state 19
    NUMBER          shift and go to state 20

    PAROP                          shift and go to state 44
    VAL                            shift and go to state 16

state 33

    (25) PRODOP -> PRODOP * . PAROP
    (26) PAROP -> . VAL
    (27) PAROP -> . ( OROP )
    (28) VAL -> . ID
    (29) VAL -> . CHAR
    (30) VAL -> . NUMBERF
    (31) VAL -> . NUMBER
    (               shift and go to state 17
    ID              shift and go to state 29
    CHAR            shift and go to state 18
    NUMBERF         shift and go to state 19
    NUMBER          shift and go to state 20

    PAROP                          shift and go to state 45
    VAL                            shift and go to state 16

state 34

    (27) PAROP -> ( OROP . )
    (13) OROP -> OROP . ORSIMB ANDOP
    )               shift and go to state 46
    ORSIMB          shift and go to state 24


state 35

    (9) IDPRIMA -> IDPRIMA , . ID
    ID              shift and go to state 47


state 36

    (11) ASIG -> TYPE ID = . INSTR
    (5) INSTR -> . OROP
    (6) INSTR -> . ASIG
    (12) OROP -> . ANDOP
    (13) OROP -> . OROP ORSIMB ANDOP
    (10) ASIG -> . ID = INSTR
    (11) ASIG -> . TYPE ID = INSTR
    (14) ANDOP -> . NOTOP
    (15) ANDOP -> . ANDOP ANDSIMB NOTOP
    (16) NOTOP -> . COMPOP
    (17) NOTOP -> . ! NOTOP
    (18) COMPOP -> . ADDOP
    (19) COMPOP -> . COMPOP COMPSIMB ADDOP
    (20) ADDOP -> . PRODOP
    (21) ADDOP -> . ADDOP - PRODOP
    (22) ADDOP -> . ADDOP + PRODOP
    (23) PRODOP -> . PAROP
    (24) PRODOP -> . PRODOP / PAROP
    (25) PRODOP -> . PRODOP * PAROP
    (26) PAROP -> . VAL
    (27) PAROP -> . ( OROP )
    (28) VAL -> . ID
    (29) VAL -> . CHAR
    (30) VAL -> . NUMBERF
    (31) VAL -> . NUMBER
    ID              shift and go to state 9
    TYPE            shift and go to state 40
    !               shift and go to state 12
    (               shift and go to state 17
    CHAR            shift and go to state 18
    NUMBERF         shift and go to state 19
    NUMBER          shift and go to state 20

    INSTR                          shift and go to state 48
    OROP                           shift and go to state 6
    ASIG                           shift and go to state 7
    ANDOP                          shift and go to state 8
    NOTOP                          shift and go to state 10
    COMPOP                         shift and go to state 11
    ADDOP                          shift and go to state 13
    PRODOP                         shift and go to state 14
    PAROP                          shift and go to state 15
    VAL                            shift and go to state 16

state 37

    (13) OROP -> OROP ORSIMB ANDOP .
    (15) ANDOP -> ANDOP . ANDSIMB NOTOP
    ORSIMB          reduce using rule 13 (OROP -> OROP ORSIMB ANDOP .)
    ;               reduce using rule 13 (OROP -> OROP ORSIMB ANDOP .)
    )               reduce using rule 13 (OROP -> OROP ORSIMB ANDOP .)
    ANDSIMB         shift and go to state 25


state 38

    (15) ANDOP -> ANDOP ANDSIMB NOTOP .
    ANDSIMB         reduce using rule 15 (ANDOP -> ANDOP ANDSIMB NOTOP .)
    ORSIMB          reduce using rule 15 (ANDOP -> ANDOP ANDSIMB NOTOP .)
    ;               reduce using rule 15 (ANDOP -> ANDOP ANDSIMB NOTOP .)
    )               reduce using rule 15 (ANDOP -> ANDOP ANDSIMB NOTOP .)


state 39

    (10) ASIG -> ID = INSTR .
    ;               reduce using rule 10 (ASIG -> ID = INSTR .)


state 40

    (11) ASIG -> TYPE . ID = INSTR
    ID              shift and go to state 49


state 41

    (19) COMPOP -> COMPOP COMPSIMB ADDOP .
    (21) ADDOP -> ADDOP . - PRODOP
    (22) ADDOP -> ADDOP . + PRODOP
    COMPSIMB        reduce using rule 19 (COMPOP -> COMPOP COMPSIMB ADDOP .)
    ANDSIMB         reduce using rule 19 (COMPOP -> COMPOP COMPSIMB ADDOP .)
    ORSIMB          reduce using rule 19 (COMPOP -> COMPOP COMPSIMB ADDOP .)
    ;               reduce using rule 19 (COMPOP -> COMPOP COMPSIMB ADDOP .)
    )               reduce using rule 19 (COMPOP -> COMPOP COMPSIMB ADDOP .)
    -               shift and go to state 30
    +               shift and go to state 31


state 42

    (21) ADDOP -> ADDOP - PRODOP .
    (24) PRODOP -> PRODOP . / PAROP
    (25) PRODOP -> PRODOP . * PAROP
    -               reduce using rule 21 (ADDOP -> ADDOP - PRODOP .)
    +               reduce using rule 21 (ADDOP -> ADDOP - PRODOP .)
    COMPSIMB        reduce using rule 21 (ADDOP -> ADDOP - PRODOP .)
    ANDSIMB         reduce using rule 21 (ADDOP -> ADDOP - PRODOP .)
    ORSIMB          reduce using rule 21 (ADDOP -> ADDOP - PRODOP .)
    ;               reduce using rule 21 (ADDOP -> ADDOP - PRODOP .)
    )               reduce using rule 21 (ADDOP -> ADDOP - PRODOP .)
    /               shift and go to state 32
    *               shift and go to state 33


state 43

    (22) ADDOP -> ADDOP + PRODOP .
    (24) PRODOP -> PRODOP . / PAROP
    (25) PRODOP -> PRODOP . * PAROP
    -               reduce using rule 22 (ADDOP -> ADDOP + PRODOP .)
    +               reduce using rule 22 (ADDOP -> ADDOP + PRODOP .)
    COMPSIMB        reduce using rule 22 (ADDOP -> ADDOP + PRODOP .)
    ANDSIMB         reduce using rule 22 (ADDOP -> ADDOP + PRODOP .)
    ORSIMB          reduce using rule 22 (ADDOP -> ADDOP + PRODOP .)
    ;               reduce using rule 22 (ADDOP -> ADDOP + PRODOP .)
    )               reduce using rule 22 (ADDOP -> ADDOP + PRODOP .)
    /               shift and go to state 32
    *               shift and go to state 33


state 44

    (24) PRODOP -> PRODOP / PAROP .
    /               reduce using rule 24 (PRODOP -> PRODOP / PAROP .)
    *               reduce using rule 24 (PRODOP -> PRODOP / PAROP .)
    -               reduce using rule 24 (PRODOP -> PRODOP / PAROP .)
    +               reduce using rule 24 (PRODOP -> PRODOP / PAROP .)
    COMPSIMB        reduce using rule 24 (PRODOP -> PRODOP / PAROP .)
    ANDSIMB         reduce using rule 24 (PRODOP -> PRODOP / PAROP .)
    ORSIMB          reduce using rule 24 (PRODOP -> PRODOP / PAROP .)
    ;               reduce using rule 24 (PRODOP -> PRODOP / PAROP .)
    )               reduce using rule 24 (PRODOP -> PRODOP / PAROP .)


state 45

    (25) PRODOP -> PRODOP * PAROP .
    /               reduce using rule 25 (PRODOP -> PRODOP * PAROP .)
    *               reduce using rule 25 (PRODOP -> PRODOP * PAROP .)
    -               reduce using rule 25 (PRODOP -> PRODOP * PAROP .)
    +               reduce using rule 25 (PRODOP -> PRODOP * PAROP .)
    COMPSIMB        reduce using rule 25 (PRODOP -> PRODOP * PAROP .)
    ANDSIMB         reduce using rule 25 (PRODOP -> PRODOP * PAROP .)
    ORSIMB          reduce using rule 25 (PRODOP -> PRODOP * PAROP .)
    ;               reduce using rule 25 (PRODOP -> PRODOP * PAROP .)
    )               reduce using rule 25 (PRODOP -> PRODOP * PAROP .)


state 46

    (27) PAROP -> ( OROP ) .
    /               reduce using rule 27 (PAROP -> ( OROP ) .)
    *               reduce using rule 27 (PAROP -> ( OROP ) .)
    -               reduce using rule 27 (PAROP -> ( OROP ) .)
    +               reduce using rule 27 (PAROP -> ( OROP ) .)
    COMPSIMB        reduce using rule 27 (PAROP -> ( OROP ) .)
    ANDSIMB         reduce using rule 27 (PAROP -> ( OROP ) .)
    ORSIMB          reduce using rule 27 (PAROP -> ( OROP ) .)
    ;               reduce using rule 27 (PAROP -> ( OROP ) .)
    )               reduce using rule 27 (PAROP -> ( OROP ) .)


state 47

    (9) IDPRIMA -> IDPRIMA , ID .
    ,               reduce using rule 9 (IDPRIMA -> IDPRIMA , ID .)
    ;               reduce using rule 9 (IDPRIMA -> IDPRIMA , ID .)


state 48

    (11) ASIG -> TYPE ID = INSTR .
    ;               reduce using rule 11 (ASIG -> TYPE ID = INSTR .)


state 49

    (11) ASIG -> TYPE ID . = INSTR
    =               shift and go to state 36

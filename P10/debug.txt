Grammar:

Rule 0     S' -> S
Rule 1     S -> S2 TYPE emptymain MAIN ( ) { LINES }
Rule 2     emptymain -> <empty>
Rule 3     S2 -> <empty>
Rule 4     S2 -> S2 GLOBALDECLAR
Rule 5     S2 -> S2 FUNCTION
Rule 6     FUNCTION -> VOIDTYPE ID emptyF1 ( ARGS ) { LINES } emptyF2
Rule 7     FUNCTION -> TYPE ID emptyF1 ( ARGS ) { LINES } emptyF2
Rule 8     emptyF1 -> <empty>
Rule 9     emptyF2 -> <empty>
Rule 10    GLOBALDECLAR -> TYPE ID emptyglobal RESTGLOBAL ;
Rule 11    RESTGLOBAL -> <empty>
Rule 12    RESTGLOBAL -> , ID emptyglobal2 RESTGLOBAL
Rule 13    emptyglobal -> <empty>
Rule 14    emptyglobal2 -> <empty>
Rule 15    ARGS -> <empty>
Rule 16    ARGS -> TYPE REF ARG RARGS
Rule 17    RARGS -> <empty>
Rule 18    RARGS -> , TYPE REF ARG RARGS
Rule 19    REF -> <empty>
Rule 20    REF -> * REF
Rule 21    ARG -> ID
Rule 22    LINES -> <empty>
Rule 23    LINES -> LINES LINE
Rule 24    LINE -> WHILE ( OROP ) { LINES }
Rule 25    LINE -> IF ( OROP ) { LINES } ELSERULE
Rule 26    LINE -> PRINT ( STRING PRINTIDS ) ;
Rule 27    LINE -> SCANF ( STRING SCANIDS ) ;
Rule 28    LINE -> RETURN ;
Rule 29    LINE -> RETURN INSTR ;
Rule 30    LINE -> DECLAR ;
Rule 31    LINE -> INSTR ;
Rule 32    SCANIDS -> <empty>
Rule 33    SCANIDS -> , REFERENCE SCANIDS
Rule 34    PRINTIDS -> <empty>
Rule 35    PRINTIDS -> , INSTR PRINTIDS
Rule 36    ELSERULE -> <empty>
Rule 37    ELSERULE -> ELSE { LINES }
Rule 38    INSTR -> FCALL
Rule 39    INSTR -> OROP
Rule 40    INSTR -> ASIG
Rule 41    FCALL -> ID ( FARGS )
Rule 42    FARGS -> <empty>
Rule 43    FARGS -> FARG RFARGS
Rule 44    RFARGS -> <empty>
Rule 45    RFARGS -> , FARG RFARGS
Rule 46    FARG -> VAL
Rule 47    DECLAR -> TYPE POINTERS IDPRIMA
Rule 48    POINTERS -> <empty>
Rule 49    POINTERS -> * POINTERS
Rule 50    IDPRIMA -> empty ELEM REST
Rule 51    REST -> <empty>
Rule 52    REST -> , empty2 ELEM REST
Rule 53    ELEM -> ID = INSTR
Rule 54    ELEM -> ID ARRAY
Rule 55    ARRAY -> <empty>
Rule 56    ARRAY -> [ NUMBER ] ARRAY
Rule 57    empty -> <empty>
Rule 58    empty2 -> <empty>
Rule 59    ASIG -> ID = INSTR
Rule 60    OROP -> ANDOP
Rule 61    OROP -> OROP ORSIMB ANDOP
Rule 62    ANDOP -> NOTOP
Rule 63    ANDOP -> ANDOP ANDSIMB NOTOP
Rule 64    NOTOP -> COMPOP
Rule 65    NOTOP -> ! NOTOP
Rule 66    COMPOP -> ADDOP
Rule 67    COMPOP -> COMPOP COMPSIMB ADDOP
Rule 68    ADDOP -> PRODOP
Rule 69    ADDOP -> ADDOP - PRODOP
Rule 70    ADDOP -> ADDOP + PRODOP
Rule 71    PRODOP -> PAROP
Rule 72    PRODOP -> PRODOP / PAROP
Rule 73    PRODOP -> PRODOP * PAROP
Rule 74    PAROP -> VAL
Rule 75    PAROP -> ( OROP )
Rule 76    VAL -> REFERENCE
Rule 77    VAL -> ID
Rule 78    VAL -> CHAR
Rule 79    VAL -> NUMBERF
Rule 80    VAL -> NUMBER
Rule 81    REFERENCE -> & ID

Terminals, with rules where they appear:

!                    : 65
&                    : 81
(                    : 1 6 7 24 25 26 27 41 75
)                    : 1 6 7 24 25 26 27 41 75
*                    : 20 49 73
+                    : 70
,                    : 12 18 33 35 45 52
-                    : 69
/                    : 72
;                    : 10 26 27 28 29 30 31
=                    : 53 59
ANDSIMB              : 63
CHAR                 : 78
COMPSIMB             : 67
ELSE                 : 37
ID                   : 6 7 10 12 21 41 53 54 59 77 81
IF                   : 25
MAIN                 : 1
NUMBER               : 56 80
NUMBERF              : 79
ORSIMB               : 61
PRINT                : 26
RETURN               : 28 29
SCANF                : 27
STRING               : 26 27
TYPE                 : 1 7 10 16 18 47
VOIDTYPE             : 6
WHILE                : 24
[                    : 56
]                    : 56
error                : 
{                    : 1 6 7 24 25 37
}                    : 1 6 7 24 25 37

Nonterminals, with rules where they appear:

ADDOP                : 66 67 69 70
ANDOP                : 60 61 63
ARG                  : 16 18
ARGS                 : 6 7
ARRAY                : 54 56
ASIG                 : 40
COMPOP               : 64 67
DECLAR               : 30
ELEM                 : 50 52
ELSERULE             : 25
FARG                 : 43 45
FARGS                : 41
FCALL                : 38
FUNCTION             : 5
GLOBALDECLAR         : 4
IDPRIMA              : 47
INSTR                : 29 31 35 53 59
LINE                 : 23
LINES                : 1 6 7 23 24 25 37
NOTOP                : 62 63 65
OROP                 : 24 25 39 61 75
PAROP                : 71 72 73
POINTERS             : 47 49
PRINTIDS             : 26 35
PRODOP               : 68 69 70 72 73
RARGS                : 16 18
REF                  : 16 18 20
REFERENCE            : 33 76
REST                 : 50 52
RESTGLOBAL           : 10 12
RFARGS               : 43 45
S                    : 0
S2                   : 1 4 5
SCANIDS              : 27 33
VAL                  : 46 74
empty                : 50
empty2               : 52
emptyF1              : 6 7
emptyF2              : 6 7
emptyglobal          : 10
emptyglobal2         : 12
emptymain            : 1


state 0

    (0) S' -> . S
    (1) S -> . S2 TYPE emptymain MAIN ( ) { LINES }
    (3) S2 -> .
    (4) S2 -> . S2 GLOBALDECLAR
    (5) S2 -> . S2 FUNCTION
    TYPE            reduce using rule 3 (S2 -> .)
    VOIDTYPE        reduce using rule 3 (S2 -> .)

    S                              shift and go to state 1
    S2                             shift and go to state 2

state 1

    (0) S' -> S .


state 2

    (1) S -> S2 . TYPE emptymain MAIN ( ) { LINES }
    (4) S2 -> S2 . GLOBALDECLAR
    (5) S2 -> S2 . FUNCTION
    (10) GLOBALDECLAR -> . TYPE ID emptyglobal RESTGLOBAL ;
    (6) FUNCTION -> . VOIDTYPE ID emptyF1 ( ARGS ) { LINES } emptyF2
    (7) FUNCTION -> . TYPE ID emptyF1 ( ARGS ) { LINES } emptyF2
    TYPE            shift and go to state 3
    VOIDTYPE        shift and go to state 6

    GLOBALDECLAR                   shift and go to state 4
    FUNCTION                       shift and go to state 5

state 3

    (1) S -> S2 TYPE . emptymain MAIN ( ) { LINES }
    (10) GLOBALDECLAR -> TYPE . ID emptyglobal RESTGLOBAL ;
    (7) FUNCTION -> TYPE . ID emptyF1 ( ARGS ) { LINES } emptyF2
    (2) emptymain -> .
    ID              shift and go to state 8
    MAIN            reduce using rule 2 (emptymain -> .)

    emptymain                      shift and go to state 7

state 4

    (4) S2 -> S2 GLOBALDECLAR .
    TYPE            reduce using rule 4 (S2 -> S2 GLOBALDECLAR .)
    VOIDTYPE        reduce using rule 4 (S2 -> S2 GLOBALDECLAR .)


state 5

    (5) S2 -> S2 FUNCTION .
    TYPE            reduce using rule 5 (S2 -> S2 FUNCTION .)
    VOIDTYPE        reduce using rule 5 (S2 -> S2 FUNCTION .)


state 6

    (6) FUNCTION -> VOIDTYPE . ID emptyF1 ( ARGS ) { LINES } emptyF2
    ID              shift and go to state 9


state 7

    (1) S -> S2 TYPE emptymain . MAIN ( ) { LINES }
    MAIN            shift and go to state 10


state 8

    (10) GLOBALDECLAR -> TYPE ID . emptyglobal RESTGLOBAL ;
    (7) FUNCTION -> TYPE ID . emptyF1 ( ARGS ) { LINES } emptyF2
    (13) emptyglobal -> .
    (8) emptyF1 -> .
    ,               reduce using rule 13 (emptyglobal -> .)
    ;               reduce using rule 13 (emptyglobal -> .)
    (               reduce using rule 8 (emptyF1 -> .)

    emptyglobal                    shift and go to state 11
    emptyF1                        shift and go to state 12

state 9

    (6) FUNCTION -> VOIDTYPE ID . emptyF1 ( ARGS ) { LINES } emptyF2
    (8) emptyF1 -> .
    (               reduce using rule 8 (emptyF1 -> .)

    emptyF1                        shift and go to state 13

state 10

    (1) S -> S2 TYPE emptymain MAIN . ( ) { LINES }
    (               shift and go to state 14


state 11

    (10) GLOBALDECLAR -> TYPE ID emptyglobal . RESTGLOBAL ;
    (11) RESTGLOBAL -> .
    (12) RESTGLOBAL -> . , ID emptyglobal2 RESTGLOBAL
    ;               reduce using rule 11 (RESTGLOBAL -> .)
    ,               shift and go to state 16

    RESTGLOBAL                     shift and go to state 15

state 12

    (7) FUNCTION -> TYPE ID emptyF1 . ( ARGS ) { LINES } emptyF2
    (               shift and go to state 17


state 13

    (6) FUNCTION -> VOIDTYPE ID emptyF1 . ( ARGS ) { LINES } emptyF2
    (               shift and go to state 18


state 14

    (1) S -> S2 TYPE emptymain MAIN ( . ) { LINES }
    )               shift and go to state 19


state 15

    (10) GLOBALDECLAR -> TYPE ID emptyglobal RESTGLOBAL . ;
    ;               shift and go to state 20


state 16

    (12) RESTGLOBAL -> , . ID emptyglobal2 RESTGLOBAL
    ID              shift and go to state 21


state 17

    (7) FUNCTION -> TYPE ID emptyF1 ( . ARGS ) { LINES } emptyF2
    (15) ARGS -> .
    (16) ARGS -> . TYPE REF ARG RARGS
    )               reduce using rule 15 (ARGS -> .)
    TYPE            shift and go to state 22

    ARGS                           shift and go to state 23

state 18

    (6) FUNCTION -> VOIDTYPE ID emptyF1 ( . ARGS ) { LINES } emptyF2
    (15) ARGS -> .
    (16) ARGS -> . TYPE REF ARG RARGS
    )               reduce using rule 15 (ARGS -> .)
    TYPE            shift and go to state 22

    ARGS                           shift and go to state 24

state 19

    (1) S -> S2 TYPE emptymain MAIN ( ) . { LINES }
    {               shift and go to state 25


state 20

    (10) GLOBALDECLAR -> TYPE ID emptyglobal RESTGLOBAL ; .
    TYPE            reduce using rule 10 (GLOBALDECLAR -> TYPE ID emptyglobal RESTGLOBAL ; .)
    VOIDTYPE        reduce using rule 10 (GLOBALDECLAR -> TYPE ID emptyglobal RESTGLOBAL ; .)


state 21

    (12) RESTGLOBAL -> , ID . emptyglobal2 RESTGLOBAL
    (14) emptyglobal2 -> .
    ,               reduce using rule 14 (emptyglobal2 -> .)
    ;               reduce using rule 14 (emptyglobal2 -> .)

    emptyglobal2                   shift and go to state 26

state 22

    (16) ARGS -> TYPE . REF ARG RARGS
    (19) REF -> .
    (20) REF -> . * REF
    ID              reduce using rule 19 (REF -> .)
    *               shift and go to state 28

    REF                            shift and go to state 27

state 23

    (7) FUNCTION -> TYPE ID emptyF1 ( ARGS . ) { LINES } emptyF2
    )               shift and go to state 29


state 24

    (6) FUNCTION -> VOIDTYPE ID emptyF1 ( ARGS . ) { LINES } emptyF2
    )               shift and go to state 30


state 25

    (1) S -> S2 TYPE emptymain MAIN ( ) { . LINES }
    (22) LINES -> .
    (23) LINES -> . LINES LINE
    }               reduce using rule 22 (LINES -> .)
    WHILE           reduce using rule 22 (LINES -> .)
    IF              reduce using rule 22 (LINES -> .)
    PRINT           reduce using rule 22 (LINES -> .)
    SCANF           reduce using rule 22 (LINES -> .)
    RETURN          reduce using rule 22 (LINES -> .)
    TYPE            reduce using rule 22 (LINES -> .)
    ID              reduce using rule 22 (LINES -> .)
    !               reduce using rule 22 (LINES -> .)
    (               reduce using rule 22 (LINES -> .)
    CHAR            reduce using rule 22 (LINES -> .)
    NUMBERF         reduce using rule 22 (LINES -> .)
    NUMBER          reduce using rule 22 (LINES -> .)
    &               reduce using rule 22 (LINES -> .)

    LINES                          shift and go to state 31

state 26

    (12) RESTGLOBAL -> , ID emptyglobal2 . RESTGLOBAL
    (11) RESTGLOBAL -> .
    (12) RESTGLOBAL -> . , ID emptyglobal2 RESTGLOBAL
    ;               reduce using rule 11 (RESTGLOBAL -> .)
    ,               shift and go to state 16

    RESTGLOBAL                     shift and go to state 32

state 27

    (16) ARGS -> TYPE REF . ARG RARGS
    (21) ARG -> . ID
    ID              shift and go to state 34

    ARG                            shift and go to state 33

state 28

    (20) REF -> * . REF
    (19) REF -> .
    (20) REF -> . * REF
    ID              reduce using rule 19 (REF -> .)
    *               shift and go to state 28

    REF                            shift and go to state 35

state 29

    (7) FUNCTION -> TYPE ID emptyF1 ( ARGS ) . { LINES } emptyF2
    {               shift and go to state 36


state 30

    (6) FUNCTION -> VOIDTYPE ID emptyF1 ( ARGS ) . { LINES } emptyF2
    {               shift and go to state 37


state 31

    (1) S -> S2 TYPE emptymain MAIN ( ) { LINES . }
    (23) LINES -> LINES . LINE
    (24) LINE -> . WHILE ( OROP ) { LINES }
    (25) LINE -> . IF ( OROP ) { LINES } ELSERULE
    (26) LINE -> . PRINT ( STRING PRINTIDS ) ;
    (27) LINE -> . SCANF ( STRING SCANIDS ) ;
    (28) LINE -> . RETURN ;
    (29) LINE -> . RETURN INSTR ;
    (30) LINE -> . DECLAR ;
    (31) LINE -> . INSTR ;
    (47) DECLAR -> . TYPE POINTERS IDPRIMA
    (38) INSTR -> . FCALL
    (39) INSTR -> . OROP
    (40) INSTR -> . ASIG
    (41) FCALL -> . ID ( FARGS )
    (60) OROP -> . ANDOP
    (61) OROP -> . OROP ORSIMB ANDOP
    (59) ASIG -> . ID = INSTR
    (62) ANDOP -> . NOTOP
    (63) ANDOP -> . ANDOP ANDSIMB NOTOP
    (64) NOTOP -> . COMPOP
    (65) NOTOP -> . ! NOTOP
    (66) COMPOP -> . ADDOP
    (67) COMPOP -> . COMPOP COMPSIMB ADDOP
    (68) ADDOP -> . PRODOP
    (69) ADDOP -> . ADDOP - PRODOP
    (70) ADDOP -> . ADDOP + PRODOP
    (71) PRODOP -> . PAROP
    (72) PRODOP -> . PRODOP / PAROP
    (73) PRODOP -> . PRODOP * PAROP
    (74) PAROP -> . VAL
    (75) PAROP -> . ( OROP )
    (76) VAL -> . REFERENCE
    (77) VAL -> . ID
    (78) VAL -> . CHAR
    (79) VAL -> . NUMBERF
    (80) VAL -> . NUMBER
    (81) REFERENCE -> . & ID
    }               shift and go to state 40
    WHILE           shift and go to state 42
    IF              shift and go to state 44
    PRINT           shift and go to state 45
    SCANF           shift and go to state 46
    RETURN          shift and go to state 47
    TYPE            shift and go to state 38
    ID              shift and go to state 52
    !               shift and go to state 56
    (               shift and go to state 39
    CHAR            shift and go to state 62
    NUMBERF         shift and go to state 63
    NUMBER          shift and go to state 64
    &               shift and go to state 65

    LINE                           shift and go to state 41
    OROP                           shift and go to state 43
    INSTR                          shift and go to state 48
    DECLAR                         shift and go to state 49
    FCALL                          shift and go to state 50
    ASIG                           shift and go to state 51
    ANDOP                          shift and go to state 53
    NOTOP                          shift and go to state 54
    COMPOP                         shift and go to state 55
    ADDOP                          shift and go to state 57
    PRODOP                         shift and go to state 58
    PAROP                          shift and go to state 59
    VAL                            shift and go to state 60
    REFERENCE                      shift and go to state 61

state 32

    (12) RESTGLOBAL -> , ID emptyglobal2 RESTGLOBAL .
    ;               reduce using rule 12 (RESTGLOBAL -> , ID emptyglobal2 RESTGLOBAL .)


state 33

    (16) ARGS -> TYPE REF ARG . RARGS
    (17) RARGS -> .
    (18) RARGS -> . , TYPE REF ARG RARGS
    )               reduce using rule 17 (RARGS -> .)
    ,               shift and go to state 67

    RARGS                          shift and go to state 66

state 34

    (21) ARG -> ID .
    ,               reduce using rule 21 (ARG -> ID .)
    )               reduce using rule 21 (ARG -> ID .)


state 35

    (20) REF -> * REF .
    ID              reduce using rule 20 (REF -> * REF .)


state 36

    (7) FUNCTION -> TYPE ID emptyF1 ( ARGS ) { . LINES } emptyF2
    (22) LINES -> .
    (23) LINES -> . LINES LINE
    }               reduce using rule 22 (LINES -> .)
    WHILE           reduce using rule 22 (LINES -> .)
    IF              reduce using rule 22 (LINES -> .)
    PRINT           reduce using rule 22 (LINES -> .)
    SCANF           reduce using rule 22 (LINES -> .)
    RETURN          reduce using rule 22 (LINES -> .)
    TYPE            reduce using rule 22 (LINES -> .)
    ID              reduce using rule 22 (LINES -> .)
    !               reduce using rule 22 (LINES -> .)
    (               reduce using rule 22 (LINES -> .)
    CHAR            reduce using rule 22 (LINES -> .)
    NUMBERF         reduce using rule 22 (LINES -> .)
    NUMBER          reduce using rule 22 (LINES -> .)
    &               reduce using rule 22 (LINES -> .)

    LINES                          shift and go to state 68

state 37

    (6) FUNCTION -> VOIDTYPE ID emptyF1 ( ARGS ) { . LINES } emptyF2
    (22) LINES -> .
    (23) LINES -> . LINES LINE
    }               reduce using rule 22 (LINES -> .)
    WHILE           reduce using rule 22 (LINES -> .)
    IF              reduce using rule 22 (LINES -> .)
    PRINT           reduce using rule 22 (LINES -> .)
    SCANF           reduce using rule 22 (LINES -> .)
    RETURN          reduce using rule 22 (LINES -> .)
    TYPE            reduce using rule 22 (LINES -> .)
    ID              reduce using rule 22 (LINES -> .)
    !               reduce using rule 22 (LINES -> .)
    (               reduce using rule 22 (LINES -> .)
    CHAR            reduce using rule 22 (LINES -> .)
    NUMBERF         reduce using rule 22 (LINES -> .)
    NUMBER          reduce using rule 22 (LINES -> .)
    &               reduce using rule 22 (LINES -> .)

    LINES                          shift and go to state 69

state 38

    (47) DECLAR -> TYPE . POINTERS IDPRIMA
    (48) POINTERS -> .
    (49) POINTERS -> . * POINTERS
    ID              reduce using rule 48 (POINTERS -> .)
    *               shift and go to state 71

    POINTERS                       shift and go to state 70

state 39

    (75) PAROP -> ( . OROP )
    (60) OROP -> . ANDOP
    (61) OROP -> . OROP ORSIMB ANDOP
    (62) ANDOP -> . NOTOP
    (63) ANDOP -> . ANDOP ANDSIMB NOTOP
    (64) NOTOP -> . COMPOP
    (65) NOTOP -> . ! NOTOP
    (66) COMPOP -> . ADDOP
    (67) COMPOP -> . COMPOP COMPSIMB ADDOP
    (68) ADDOP -> . PRODOP
    (69) ADDOP -> . ADDOP - PRODOP
    (70) ADDOP -> . ADDOP + PRODOP
    (71) PRODOP -> . PAROP
    (72) PRODOP -> . PRODOP / PAROP
    (73) PRODOP -> . PRODOP * PAROP
    (74) PAROP -> . VAL
    (75) PAROP -> . ( OROP )
    (76) VAL -> . REFERENCE
    (77) VAL -> . ID
    (78) VAL -> . CHAR
    (79) VAL -> . NUMBERF
    (80) VAL -> . NUMBER
    (81) REFERENCE -> . & ID
    !               shift and go to state 56
    (               shift and go to state 39
    ID              shift and go to state 73
    CHAR            shift and go to state 62
    NUMBERF         shift and go to state 63
    NUMBER          shift and go to state 64
    &               shift and go to state 65

    OROP                           shift and go to state 72
    ANDOP                          shift and go to state 53
    NOTOP                          shift and go to state 54
    COMPOP                         shift and go to state 55
    ADDOP                          shift and go to state 57
    PRODOP                         shift and go to state 58
    PAROP                          shift and go to state 59
    VAL                            shift and go to state 60
    REFERENCE                      shift and go to state 61

state 40

    (1) S -> S2 TYPE emptymain MAIN ( ) { LINES } .
    $end            reduce using rule 1 (S -> S2 TYPE emptymain MAIN ( ) { LINES } .)


state 41

    (23) LINES -> LINES LINE .
    }               reduce using rule 23 (LINES -> LINES LINE .)
    WHILE           reduce using rule 23 (LINES -> LINES LINE .)
    IF              reduce using rule 23 (LINES -> LINES LINE .)
    PRINT           reduce using rule 23 (LINES -> LINES LINE .)
    SCANF           reduce using rule 23 (LINES -> LINES LINE .)
    RETURN          reduce using rule 23 (LINES -> LINES LINE .)
    TYPE            reduce using rule 23 (LINES -> LINES LINE .)
    ID              reduce using rule 23 (LINES -> LINES LINE .)
    !               reduce using rule 23 (LINES -> LINES LINE .)
    (               reduce using rule 23 (LINES -> LINES LINE .)
    CHAR            reduce using rule 23 (LINES -> LINES LINE .)
    NUMBERF         reduce using rule 23 (LINES -> LINES LINE .)
    NUMBER          reduce using rule 23 (LINES -> LINES LINE .)
    &               reduce using rule 23 (LINES -> LINES LINE .)


state 42

    (24) LINE -> WHILE . ( OROP ) { LINES }
    (               shift and go to state 74


state 43

    (39) INSTR -> OROP .
    (61) OROP -> OROP . ORSIMB ANDOP
    ;               reduce using rule 39 (INSTR -> OROP .)
    ,               reduce using rule 39 (INSTR -> OROP .)
    )               reduce using rule 39 (INSTR -> OROP .)
    ORSIMB          shift and go to state 75


state 44

    (25) LINE -> IF . ( OROP ) { LINES } ELSERULE
    (               shift and go to state 76


state 45

    (26) LINE -> PRINT . ( STRING PRINTIDS ) ;
    (               shift and go to state 77


state 46

    (27) LINE -> SCANF . ( STRING SCANIDS ) ;
    (               shift and go to state 78


state 47

    (28) LINE -> RETURN . ;
    (29) LINE -> RETURN . INSTR ;
    (38) INSTR -> . FCALL
    (39) INSTR -> . OROP
    (40) INSTR -> . ASIG
    (41) FCALL -> . ID ( FARGS )
    (60) OROP -> . ANDOP
    (61) OROP -> . OROP ORSIMB ANDOP
    (59) ASIG -> . ID = INSTR
    (62) ANDOP -> . NOTOP
    (63) ANDOP -> . ANDOP ANDSIMB NOTOP
    (64) NOTOP -> . COMPOP
    (65) NOTOP -> . ! NOTOP
    (66) COMPOP -> . ADDOP
    (67) COMPOP -> . COMPOP COMPSIMB ADDOP
    (68) ADDOP -> . PRODOP
    (69) ADDOP -> . ADDOP - PRODOP
    (70) ADDOP -> . ADDOP + PRODOP
    (71) PRODOP -> . PAROP
    (72) PRODOP -> . PRODOP / PAROP
    (73) PRODOP -> . PRODOP * PAROP
    (74) PAROP -> . VAL
    (75) PAROP -> . ( OROP )
    (76) VAL -> . REFERENCE
    (77) VAL -> . ID
    (78) VAL -> . CHAR
    (79) VAL -> . NUMBERF
    (80) VAL -> . NUMBER
    (81) REFERENCE -> . & ID
    ;               shift and go to state 79
    ID              shift and go to state 52
    !               shift and go to state 56
    (               shift and go to state 39
    CHAR            shift and go to state 62
    NUMBERF         shift and go to state 63
    NUMBER          shift and go to state 64
    &               shift and go to state 65

    INSTR                          shift and go to state 80
    FCALL                          shift and go to state 50
    OROP                           shift and go to state 43
    ASIG                           shift and go to state 51
    ANDOP                          shift and go to state 53
    NOTOP                          shift and go to state 54
    COMPOP                         shift and go to state 55
    ADDOP                          shift and go to state 57
    PRODOP                         shift and go to state 58
    PAROP                          shift and go to state 59
    VAL                            shift and go to state 60
    REFERENCE                      shift and go to state 61

state 48

    (31) LINE -> INSTR . ;
    ;               shift and go to state 81


state 49

    (30) LINE -> DECLAR . ;
    ;               shift and go to state 82


state 50

    (38) INSTR -> FCALL .
    ;               reduce using rule 38 (INSTR -> FCALL .)
    ,               reduce using rule 38 (INSTR -> FCALL .)
    )               reduce using rule 38 (INSTR -> FCALL .)


state 51

    (40) INSTR -> ASIG .
    ;               reduce using rule 40 (INSTR -> ASIG .)
    ,               reduce using rule 40 (INSTR -> ASIG .)
    )               reduce using rule 40 (INSTR -> ASIG .)


state 52

    (41) FCALL -> ID . ( FARGS )
    (59) ASIG -> ID . = INSTR
    (77) VAL -> ID .
    (               shift and go to state 83
    =               shift and go to state 84
    /               reduce using rule 77 (VAL -> ID .)
    *               reduce using rule 77 (VAL -> ID .)
    -               reduce using rule 77 (VAL -> ID .)
    +               reduce using rule 77 (VAL -> ID .)
    COMPSIMB        reduce using rule 77 (VAL -> ID .)
    ANDSIMB         reduce using rule 77 (VAL -> ID .)
    ORSIMB          reduce using rule 77 (VAL -> ID .)
    ;               reduce using rule 77 (VAL -> ID .)
    ,               reduce using rule 77 (VAL -> ID .)
    )               reduce using rule 77 (VAL -> ID .)


state 53

    (60) OROP -> ANDOP .
    (63) ANDOP -> ANDOP . ANDSIMB NOTOP
    ORSIMB          reduce using rule 60 (OROP -> ANDOP .)
    ;               reduce using rule 60 (OROP -> ANDOP .)
    )               reduce using rule 60 (OROP -> ANDOP .)
    ,               reduce using rule 60 (OROP -> ANDOP .)
    ANDSIMB         shift and go to state 85


state 54

    (62) ANDOP -> NOTOP .
    ANDSIMB         reduce using rule 62 (ANDOP -> NOTOP .)
    ORSIMB          reduce using rule 62 (ANDOP -> NOTOP .)
    ;               reduce using rule 62 (ANDOP -> NOTOP .)
    )               reduce using rule 62 (ANDOP -> NOTOP .)
    ,               reduce using rule 62 (ANDOP -> NOTOP .)


state 55

    (64) NOTOP -> COMPOP .
    (67) COMPOP -> COMPOP . COMPSIMB ADDOP
    ANDSIMB         reduce using rule 64 (NOTOP -> COMPOP .)
    ORSIMB          reduce using rule 64 (NOTOP -> COMPOP .)
    ;               reduce using rule 64 (NOTOP -> COMPOP .)
    )               reduce using rule 64 (NOTOP -> COMPOP .)
    ,               reduce using rule 64 (NOTOP -> COMPOP .)
    COMPSIMB        shift and go to state 86


state 56

    (65) NOTOP -> ! . NOTOP
    (64) NOTOP -> . COMPOP
    (65) NOTOP -> . ! NOTOP
    (66) COMPOP -> . ADDOP
    (67) COMPOP -> . COMPOP COMPSIMB ADDOP
    (68) ADDOP -> . PRODOP
    (69) ADDOP -> . ADDOP - PRODOP
    (70) ADDOP -> . ADDOP + PRODOP
    (71) PRODOP -> . PAROP
    (72) PRODOP -> . PRODOP / PAROP
    (73) PRODOP -> . PRODOP * PAROP
    (74) PAROP -> . VAL
    (75) PAROP -> . ( OROP )
    (76) VAL -> . REFERENCE
    (77) VAL -> . ID
    (78) VAL -> . CHAR
    (79) VAL -> . NUMBERF
    (80) VAL -> . NUMBER
    (81) REFERENCE -> . & ID
    !               shift and go to state 56
    (               shift and go to state 39
    ID              shift and go to state 73
    CHAR            shift and go to state 62
    NUMBERF         shift and go to state 63
    NUMBER          shift and go to state 64
    &               shift and go to state 65

    NOTOP                          shift and go to state 87
    COMPOP                         shift and go to state 55
    ADDOP                          shift and go to state 57
    PRODOP                         shift and go to state 58
    PAROP                          shift and go to state 59
    VAL                            shift and go to state 60
    REFERENCE                      shift and go to state 61

state 57

    (66) COMPOP -> ADDOP .
    (69) ADDOP -> ADDOP . - PRODOP
    (70) ADDOP -> ADDOP . + PRODOP
    COMPSIMB        reduce using rule 66 (COMPOP -> ADDOP .)
    ANDSIMB         reduce using rule 66 (COMPOP -> ADDOP .)
    ORSIMB          reduce using rule 66 (COMPOP -> ADDOP .)
    ;               reduce using rule 66 (COMPOP -> ADDOP .)
    )               reduce using rule 66 (COMPOP -> ADDOP .)
    ,               reduce using rule 66 (COMPOP -> ADDOP .)
    -               shift and go to state 88
    +               shift and go to state 89


state 58

    (68) ADDOP -> PRODOP .
    (72) PRODOP -> PRODOP . / PAROP
    (73) PRODOP -> PRODOP . * PAROP
    -               reduce using rule 68 (ADDOP -> PRODOP .)
    +               reduce using rule 68 (ADDOP -> PRODOP .)
    COMPSIMB        reduce using rule 68 (ADDOP -> PRODOP .)
    ANDSIMB         reduce using rule 68 (ADDOP -> PRODOP .)
    ORSIMB          reduce using rule 68 (ADDOP -> PRODOP .)
    ;               reduce using rule 68 (ADDOP -> PRODOP .)
    )               reduce using rule 68 (ADDOP -> PRODOP .)
    ,               reduce using rule 68 (ADDOP -> PRODOP .)
    /               shift and go to state 90
    *               shift and go to state 91


state 59

    (71) PRODOP -> PAROP .
    /               reduce using rule 71 (PRODOP -> PAROP .)
    *               reduce using rule 71 (PRODOP -> PAROP .)
    -               reduce using rule 71 (PRODOP -> PAROP .)
    +               reduce using rule 71 (PRODOP -> PAROP .)
    COMPSIMB        reduce using rule 71 (PRODOP -> PAROP .)
    ANDSIMB         reduce using rule 71 (PRODOP -> PAROP .)
    ORSIMB          reduce using rule 71 (PRODOP -> PAROP .)
    ;               reduce using rule 71 (PRODOP -> PAROP .)
    )               reduce using rule 71 (PRODOP -> PAROP .)
    ,               reduce using rule 71 (PRODOP -> PAROP .)


state 60

    (74) PAROP -> VAL .
    /               reduce using rule 74 (PAROP -> VAL .)
    *               reduce using rule 74 (PAROP -> VAL .)
    -               reduce using rule 74 (PAROP -> VAL .)
    +               reduce using rule 74 (PAROP -> VAL .)
    COMPSIMB        reduce using rule 74 (PAROP -> VAL .)
    ANDSIMB         reduce using rule 74 (PAROP -> VAL .)
    ORSIMB          reduce using rule 74 (PAROP -> VAL .)
    ;               reduce using rule 74 (PAROP -> VAL .)
    )               reduce using rule 74 (PAROP -> VAL .)
    ,               reduce using rule 74 (PAROP -> VAL .)


state 61

    (76) VAL -> REFERENCE .
    /               reduce using rule 76 (VAL -> REFERENCE .)
    *               reduce using rule 76 (VAL -> REFERENCE .)
    -               reduce using rule 76 (VAL -> REFERENCE .)
    +               reduce using rule 76 (VAL -> REFERENCE .)
    COMPSIMB        reduce using rule 76 (VAL -> REFERENCE .)
    ANDSIMB         reduce using rule 76 (VAL -> REFERENCE .)
    ORSIMB          reduce using rule 76 (VAL -> REFERENCE .)
    ;               reduce using rule 76 (VAL -> REFERENCE .)
    )               reduce using rule 76 (VAL -> REFERENCE .)
    ,               reduce using rule 76 (VAL -> REFERENCE .)


state 62

    (78) VAL -> CHAR .
    /               reduce using rule 78 (VAL -> CHAR .)
    *               reduce using rule 78 (VAL -> CHAR .)
    -               reduce using rule 78 (VAL -> CHAR .)
    +               reduce using rule 78 (VAL -> CHAR .)
    COMPSIMB        reduce using rule 78 (VAL -> CHAR .)
    ANDSIMB         reduce using rule 78 (VAL -> CHAR .)
    ORSIMB          reduce using rule 78 (VAL -> CHAR .)
    ;               reduce using rule 78 (VAL -> CHAR .)
    )               reduce using rule 78 (VAL -> CHAR .)
    ,               reduce using rule 78 (VAL -> CHAR .)


state 63

    (79) VAL -> NUMBERF .
    /               reduce using rule 79 (VAL -> NUMBERF .)
    *               reduce using rule 79 (VAL -> NUMBERF .)
    -               reduce using rule 79 (VAL -> NUMBERF .)
    +               reduce using rule 79 (VAL -> NUMBERF .)
    COMPSIMB        reduce using rule 79 (VAL -> NUMBERF .)
    ANDSIMB         reduce using rule 79 (VAL -> NUMBERF .)
    ORSIMB          reduce using rule 79 (VAL -> NUMBERF .)
    ;               reduce using rule 79 (VAL -> NUMBERF .)
    )               reduce using rule 79 (VAL -> NUMBERF .)
    ,               reduce using rule 79 (VAL -> NUMBERF .)


state 64

    (80) VAL -> NUMBER .
    /               reduce using rule 80 (VAL -> NUMBER .)
    *               reduce using rule 80 (VAL -> NUMBER .)
    -               reduce using rule 80 (VAL -> NUMBER .)
    +               reduce using rule 80 (VAL -> NUMBER .)
    COMPSIMB        reduce using rule 80 (VAL -> NUMBER .)
    ANDSIMB         reduce using rule 80 (VAL -> NUMBER .)
    ORSIMB          reduce using rule 80 (VAL -> NUMBER .)
    ;               reduce using rule 80 (VAL -> NUMBER .)
    )               reduce using rule 80 (VAL -> NUMBER .)
    ,               reduce using rule 80 (VAL -> NUMBER .)


state 65

    (81) REFERENCE -> & . ID
    ID              shift and go to state 92


state 66

    (16) ARGS -> TYPE REF ARG RARGS .
    )               reduce using rule 16 (ARGS -> TYPE REF ARG RARGS .)


state 67

    (18) RARGS -> , . TYPE REF ARG RARGS
    TYPE            shift and go to state 93


state 68

    (7) FUNCTION -> TYPE ID emptyF1 ( ARGS ) { LINES . } emptyF2
    (23) LINES -> LINES . LINE
    (24) LINE -> . WHILE ( OROP ) { LINES }
    (25) LINE -> . IF ( OROP ) { LINES } ELSERULE
    (26) LINE -> . PRINT ( STRING PRINTIDS ) ;
    (27) LINE -> . SCANF ( STRING SCANIDS ) ;
    (28) LINE -> . RETURN ;
    (29) LINE -> . RETURN INSTR ;
    (30) LINE -> . DECLAR ;
    (31) LINE -> . INSTR ;
    (47) DECLAR -> . TYPE POINTERS IDPRIMA
    (38) INSTR -> . FCALL
    (39) INSTR -> . OROP
    (40) INSTR -> . ASIG
    (41) FCALL -> . ID ( FARGS )
    (60) OROP -> . ANDOP
    (61) OROP -> . OROP ORSIMB ANDOP
    (59) ASIG -> . ID = INSTR
    (62) ANDOP -> . NOTOP
    (63) ANDOP -> . ANDOP ANDSIMB NOTOP
    (64) NOTOP -> . COMPOP
    (65) NOTOP -> . ! NOTOP
    (66) COMPOP -> . ADDOP
    (67) COMPOP -> . COMPOP COMPSIMB ADDOP
    (68) ADDOP -> . PRODOP
    (69) ADDOP -> . ADDOP - PRODOP
    (70) ADDOP -> . ADDOP + PRODOP
    (71) PRODOP -> . PAROP
    (72) PRODOP -> . PRODOP / PAROP
    (73) PRODOP -> . PRODOP * PAROP
    (74) PAROP -> . VAL
    (75) PAROP -> . ( OROP )
    (76) VAL -> . REFERENCE
    (77) VAL -> . ID
    (78) VAL -> . CHAR
    (79) VAL -> . NUMBERF
    (80) VAL -> . NUMBER
    (81) REFERENCE -> . & ID
    }               shift and go to state 94
    WHILE           shift and go to state 42
    IF              shift and go to state 44
    PRINT           shift and go to state 45
    SCANF           shift and go to state 46
    RETURN          shift and go to state 47
    TYPE            shift and go to state 38
    ID              shift and go to state 52
    !               shift and go to state 56
    (               shift and go to state 39
    CHAR            shift and go to state 62
    NUMBERF         shift and go to state 63
    NUMBER          shift and go to state 64
    &               shift and go to state 65

    LINE                           shift and go to state 41
    OROP                           shift and go to state 43
    INSTR                          shift and go to state 48
    DECLAR                         shift and go to state 49
    FCALL                          shift and go to state 50
    ASIG                           shift and go to state 51
    ANDOP                          shift and go to state 53
    NOTOP                          shift and go to state 54
    COMPOP                         shift and go to state 55
    ADDOP                          shift and go to state 57
    PRODOP                         shift and go to state 58
    PAROP                          shift and go to state 59
    VAL                            shift and go to state 60
    REFERENCE                      shift and go to state 61

state 69

    (6) FUNCTION -> VOIDTYPE ID emptyF1 ( ARGS ) { LINES . } emptyF2
    (23) LINES -> LINES . LINE
    (24) LINE -> . WHILE ( OROP ) { LINES }
    (25) LINE -> . IF ( OROP ) { LINES } ELSERULE
    (26) LINE -> . PRINT ( STRING PRINTIDS ) ;
    (27) LINE -> . SCANF ( STRING SCANIDS ) ;
    (28) LINE -> . RETURN ;
    (29) LINE -> . RETURN INSTR ;
    (30) LINE -> . DECLAR ;
    (31) LINE -> . INSTR ;
    (47) DECLAR -> . TYPE POINTERS IDPRIMA
    (38) INSTR -> . FCALL
    (39) INSTR -> . OROP
    (40) INSTR -> . ASIG
    (41) FCALL -> . ID ( FARGS )
    (60) OROP -> . ANDOP
    (61) OROP -> . OROP ORSIMB ANDOP
    (59) ASIG -> . ID = INSTR
    (62) ANDOP -> . NOTOP
    (63) ANDOP -> . ANDOP ANDSIMB NOTOP
    (64) NOTOP -> . COMPOP
    (65) NOTOP -> . ! NOTOP
    (66) COMPOP -> . ADDOP
    (67) COMPOP -> . COMPOP COMPSIMB ADDOP
    (68) ADDOP -> . PRODOP
    (69) ADDOP -> . ADDOP - PRODOP
    (70) ADDOP -> . ADDOP + PRODOP
    (71) PRODOP -> . PAROP
    (72) PRODOP -> . PRODOP / PAROP
    (73) PRODOP -> . PRODOP * PAROP
    (74) PAROP -> . VAL
    (75) PAROP -> . ( OROP )
    (76) VAL -> . REFERENCE
    (77) VAL -> . ID
    (78) VAL -> . CHAR
    (79) VAL -> . NUMBERF
    (80) VAL -> . NUMBER
    (81) REFERENCE -> . & ID
    }               shift and go to state 95
    WHILE           shift and go to state 42
    IF              shift and go to state 44
    PRINT           shift and go to state 45
    SCANF           shift and go to state 46
    RETURN          shift and go to state 47
    TYPE            shift and go to state 38
    ID              shift and go to state 52
    !               shift and go to state 56
    (               shift and go to state 39
    CHAR            shift and go to state 62
    NUMBERF         shift and go to state 63
    NUMBER          shift and go to state 64
    &               shift and go to state 65

    LINE                           shift and go to state 41
    OROP                           shift and go to state 43
    INSTR                          shift and go to state 48
    DECLAR                         shift and go to state 49
    FCALL                          shift and go to state 50
    ASIG                           shift and go to state 51
    ANDOP                          shift and go to state 53
    NOTOP                          shift and go to state 54
    COMPOP                         shift and go to state 55
    ADDOP                          shift and go to state 57
    PRODOP                         shift and go to state 58
    PAROP                          shift and go to state 59
    VAL                            shift and go to state 60
    REFERENCE                      shift and go to state 61

state 70

    (47) DECLAR -> TYPE POINTERS . IDPRIMA
    (50) IDPRIMA -> . empty ELEM REST
    (57) empty -> .
    ID              reduce using rule 57 (empty -> .)

    IDPRIMA                        shift and go to state 96
    empty                          shift and go to state 97

state 71

    (49) POINTERS -> * . POINTERS
    (48) POINTERS -> .
    (49) POINTERS -> . * POINTERS
    ID              reduce using rule 48 (POINTERS -> .)
    *               shift and go to state 71

    POINTERS                       shift and go to state 98

state 72

    (75) PAROP -> ( OROP . )
    (61) OROP -> OROP . ORSIMB ANDOP
    )               shift and go to state 99
    ORSIMB          shift and go to state 75


state 73

    (77) VAL -> ID .
    /               reduce using rule 77 (VAL -> ID .)
    *               reduce using rule 77 (VAL -> ID .)
    -               reduce using rule 77 (VAL -> ID .)
    +               reduce using rule 77 (VAL -> ID .)
    COMPSIMB        reduce using rule 77 (VAL -> ID .)
    ANDSIMB         reduce using rule 77 (VAL -> ID .)
    )               reduce using rule 77 (VAL -> ID .)
    ORSIMB          reduce using rule 77 (VAL -> ID .)
    ;               reduce using rule 77 (VAL -> ID .)
    ,               reduce using rule 77 (VAL -> ID .)


state 74

    (24) LINE -> WHILE ( . OROP ) { LINES }
    (60) OROP -> . ANDOP
    (61) OROP -> . OROP ORSIMB ANDOP
    (62) ANDOP -> . NOTOP
    (63) ANDOP -> . ANDOP ANDSIMB NOTOP
    (64) NOTOP -> . COMPOP
    (65) NOTOP -> . ! NOTOP
    (66) COMPOP -> . ADDOP
    (67) COMPOP -> . COMPOP COMPSIMB ADDOP
    (68) ADDOP -> . PRODOP
    (69) ADDOP -> . ADDOP - PRODOP
    (70) ADDOP -> . ADDOP + PRODOP
    (71) PRODOP -> . PAROP
    (72) PRODOP -> . PRODOP / PAROP
    (73) PRODOP -> . PRODOP * PAROP
    (74) PAROP -> . VAL
    (75) PAROP -> . ( OROP )
    (76) VAL -> . REFERENCE
    (77) VAL -> . ID
    (78) VAL -> . CHAR
    (79) VAL -> . NUMBERF
    (80) VAL -> . NUMBER
    (81) REFERENCE -> . & ID
    !               shift and go to state 56
    (               shift and go to state 39
    ID              shift and go to state 73
    CHAR            shift and go to state 62
    NUMBERF         shift and go to state 63
    NUMBER          shift and go to state 64
    &               shift and go to state 65

    OROP                           shift and go to state 100
    ANDOP                          shift and go to state 53
    NOTOP                          shift and go to state 54
    COMPOP                         shift and go to state 55
    ADDOP                          shift and go to state 57
    PRODOP                         shift and go to state 58
    PAROP                          shift and go to state 59
    VAL                            shift and go to state 60
    REFERENCE                      shift and go to state 61

state 75

    (61) OROP -> OROP ORSIMB . ANDOP
    (62) ANDOP -> . NOTOP
    (63) ANDOP -> . ANDOP ANDSIMB NOTOP
    (64) NOTOP -> . COMPOP
    (65) NOTOP -> . ! NOTOP
    (66) COMPOP -> . ADDOP
    (67) COMPOP -> . COMPOP COMPSIMB ADDOP
    (68) ADDOP -> . PRODOP
    (69) ADDOP -> . ADDOP - PRODOP
    (70) ADDOP -> . ADDOP + PRODOP
    (71) PRODOP -> . PAROP
    (72) PRODOP -> . PRODOP / PAROP
    (73) PRODOP -> . PRODOP * PAROP
    (74) PAROP -> . VAL
    (75) PAROP -> . ( OROP )
    (76) VAL -> . REFERENCE
    (77) VAL -> . ID
    (78) VAL -> . CHAR
    (79) VAL -> . NUMBERF
    (80) VAL -> . NUMBER
    (81) REFERENCE -> . & ID
    !               shift and go to state 56
    (               shift and go to state 39
    ID              shift and go to state 73
    CHAR            shift and go to state 62
    NUMBERF         shift and go to state 63
    NUMBER          shift and go to state 64
    &               shift and go to state 65

    ANDOP                          shift and go to state 101
    NOTOP                          shift and go to state 54
    COMPOP                         shift and go to state 55
    ADDOP                          shift and go to state 57
    PRODOP                         shift and go to state 58
    PAROP                          shift and go to state 59
    VAL                            shift and go to state 60
    REFERENCE                      shift and go to state 61

state 76

    (25) LINE -> IF ( . OROP ) { LINES } ELSERULE
    (60) OROP -> . ANDOP
    (61) OROP -> . OROP ORSIMB ANDOP
    (62) ANDOP -> . NOTOP
    (63) ANDOP -> . ANDOP ANDSIMB NOTOP
    (64) NOTOP -> . COMPOP
    (65) NOTOP -> . ! NOTOP
    (66) COMPOP -> . ADDOP
    (67) COMPOP -> . COMPOP COMPSIMB ADDOP
    (68) ADDOP -> . PRODOP
    (69) ADDOP -> . ADDOP - PRODOP
    (70) ADDOP -> . ADDOP + PRODOP
    (71) PRODOP -> . PAROP
    (72) PRODOP -> . PRODOP / PAROP
    (73) PRODOP -> . PRODOP * PAROP
    (74) PAROP -> . VAL
    (75) PAROP -> . ( OROP )
    (76) VAL -> . REFERENCE
    (77) VAL -> . ID
    (78) VAL -> . CHAR
    (79) VAL -> . NUMBERF
    (80) VAL -> . NUMBER
    (81) REFERENCE -> . & ID
    !               shift and go to state 56
    (               shift and go to state 39
    ID              shift and go to state 73
    CHAR            shift and go to state 62
    NUMBERF         shift and go to state 63
    NUMBER          shift and go to state 64
    &               shift and go to state 65

    OROP                           shift and go to state 102
    ANDOP                          shift and go to state 53
    NOTOP                          shift and go to state 54
    COMPOP                         shift and go to state 55
    ADDOP                          shift and go to state 57
    PRODOP                         shift and go to state 58
    PAROP                          shift and go to state 59
    VAL                            shift and go to state 60
    REFERENCE                      shift and go to state 61

state 77

    (26) LINE -> PRINT ( . STRING PRINTIDS ) ;
    STRING          shift and go to state 103


state 78

    (27) LINE -> SCANF ( . STRING SCANIDS ) ;
    STRING          shift and go to state 104


state 79

    (28) LINE -> RETURN ; .
    }               reduce using rule 28 (LINE -> RETURN ; .)
    WHILE           reduce using rule 28 (LINE -> RETURN ; .)
    IF              reduce using rule 28 (LINE -> RETURN ; .)
    PRINT           reduce using rule 28 (LINE -> RETURN ; .)
    SCANF           reduce using rule 28 (LINE -> RETURN ; .)
    RETURN          reduce using rule 28 (LINE -> RETURN ; .)
    TYPE            reduce using rule 28 (LINE -> RETURN ; .)
    ID              reduce using rule 28 (LINE -> RETURN ; .)
    !               reduce using rule 28 (LINE -> RETURN ; .)
    (               reduce using rule 28 (LINE -> RETURN ; .)
    CHAR            reduce using rule 28 (LINE -> RETURN ; .)
    NUMBERF         reduce using rule 28 (LINE -> RETURN ; .)
    NUMBER          reduce using rule 28 (LINE -> RETURN ; .)
    &               reduce using rule 28 (LINE -> RETURN ; .)


state 80

    (29) LINE -> RETURN INSTR . ;
    ;               shift and go to state 105


state 81

    (31) LINE -> INSTR ; .
    }               reduce using rule 31 (LINE -> INSTR ; .)
    WHILE           reduce using rule 31 (LINE -> INSTR ; .)
    IF              reduce using rule 31 (LINE -> INSTR ; .)
    PRINT           reduce using rule 31 (LINE -> INSTR ; .)
    SCANF           reduce using rule 31 (LINE -> INSTR ; .)
    RETURN          reduce using rule 31 (LINE -> INSTR ; .)
    TYPE            reduce using rule 31 (LINE -> INSTR ; .)
    ID              reduce using rule 31 (LINE -> INSTR ; .)
    !               reduce using rule 31 (LINE -> INSTR ; .)
    (               reduce using rule 31 (LINE -> INSTR ; .)
    CHAR            reduce using rule 31 (LINE -> INSTR ; .)
    NUMBERF         reduce using rule 31 (LINE -> INSTR ; .)
    NUMBER          reduce using rule 31 (LINE -> INSTR ; .)
    &               reduce using rule 31 (LINE -> INSTR ; .)


state 82

    (30) LINE -> DECLAR ; .
    }               reduce using rule 30 (LINE -> DECLAR ; .)
    WHILE           reduce using rule 30 (LINE -> DECLAR ; .)
    IF              reduce using rule 30 (LINE -> DECLAR ; .)
    PRINT           reduce using rule 30 (LINE -> DECLAR ; .)
    SCANF           reduce using rule 30 (LINE -> DECLAR ; .)
    RETURN          reduce using rule 30 (LINE -> DECLAR ; .)
    TYPE            reduce using rule 30 (LINE -> DECLAR ; .)
    ID              reduce using rule 30 (LINE -> DECLAR ; .)
    !               reduce using rule 30 (LINE -> DECLAR ; .)
    (               reduce using rule 30 (LINE -> DECLAR ; .)
    CHAR            reduce using rule 30 (LINE -> DECLAR ; .)
    NUMBERF         reduce using rule 30 (LINE -> DECLAR ; .)
    NUMBER          reduce using rule 30 (LINE -> DECLAR ; .)
    &               reduce using rule 30 (LINE -> DECLAR ; .)


state 83

    (41) FCALL -> ID ( . FARGS )
    (42) FARGS -> .
    (43) FARGS -> . FARG RFARGS
    (46) FARG -> . VAL
    (76) VAL -> . REFERENCE
    (77) VAL -> . ID
    (78) VAL -> . CHAR
    (79) VAL -> . NUMBERF
    (80) VAL -> . NUMBER
    (81) REFERENCE -> . & ID
    )               reduce using rule 42 (FARGS -> .)
    ID              shift and go to state 73
    CHAR            shift and go to state 62
    NUMBERF         shift and go to state 63
    NUMBER          shift and go to state 64
    &               shift and go to state 65

    FARGS                          shift and go to state 106
    FARG                           shift and go to state 107
    VAL                            shift and go to state 108
    REFERENCE                      shift and go to state 61

state 84

    (59) ASIG -> ID = . INSTR
    (38) INSTR -> . FCALL
    (39) INSTR -> . OROP
    (40) INSTR -> . ASIG
    (41) FCALL -> . ID ( FARGS )
    (60) OROP -> . ANDOP
    (61) OROP -> . OROP ORSIMB ANDOP
    (59) ASIG -> . ID = INSTR
    (62) ANDOP -> . NOTOP
    (63) ANDOP -> . ANDOP ANDSIMB NOTOP
    (64) NOTOP -> . COMPOP
    (65) NOTOP -> . ! NOTOP
    (66) COMPOP -> . ADDOP
    (67) COMPOP -> . COMPOP COMPSIMB ADDOP
    (68) ADDOP -> . PRODOP
    (69) ADDOP -> . ADDOP - PRODOP
    (70) ADDOP -> . ADDOP + PRODOP
    (71) PRODOP -> . PAROP
    (72) PRODOP -> . PRODOP / PAROP
    (73) PRODOP -> . PRODOP * PAROP
    (74) PAROP -> . VAL
    (75) PAROP -> . ( OROP )
    (76) VAL -> . REFERENCE
    (77) VAL -> . ID
    (78) VAL -> . CHAR
    (79) VAL -> . NUMBERF
    (80) VAL -> . NUMBER
    (81) REFERENCE -> . & ID
    ID              shift and go to state 52
    !               shift and go to state 56
    (               shift and go to state 39
    CHAR            shift and go to state 62
    NUMBERF         shift and go to state 63
    NUMBER          shift and go to state 64
    &               shift and go to state 65

    INSTR                          shift and go to state 109
    FCALL                          shift and go to state 50
    OROP                           shift and go to state 43
    ASIG                           shift and go to state 51
    ANDOP                          shift and go to state 53
    NOTOP                          shift and go to state 54
    COMPOP                         shift and go to state 55
    ADDOP                          shift and go to state 57
    PRODOP                         shift and go to state 58
    PAROP                          shift and go to state 59
    VAL                            shift and go to state 60
    REFERENCE                      shift and go to state 61

state 85

    (63) ANDOP -> ANDOP ANDSIMB . NOTOP
    (64) NOTOP -> . COMPOP
    (65) NOTOP -> . ! NOTOP
    (66) COMPOP -> . ADDOP
    (67) COMPOP -> . COMPOP COMPSIMB ADDOP
    (68) ADDOP -> . PRODOP
    (69) ADDOP -> . ADDOP - PRODOP
    (70) ADDOP -> . ADDOP + PRODOP
    (71) PRODOP -> . PAROP
    (72) PRODOP -> . PRODOP / PAROP
    (73) PRODOP -> . PRODOP * PAROP
    (74) PAROP -> . VAL
    (75) PAROP -> . ( OROP )
    (76) VAL -> . REFERENCE
    (77) VAL -> . ID
    (78) VAL -> . CHAR
    (79) VAL -> . NUMBERF
    (80) VAL -> . NUMBER
    (81) REFERENCE -> . & ID
    !               shift and go to state 56
    (               shift and go to state 39
    ID              shift and go to state 73
    CHAR            shift and go to state 62
    NUMBERF         shift and go to state 63
    NUMBER          shift and go to state 64
    &               shift and go to state 65

    NOTOP                          shift and go to state 110
    COMPOP                         shift and go to state 55
    ADDOP                          shift and go to state 57
    PRODOP                         shift and go to state 58
    PAROP                          shift and go to state 59
    VAL                            shift and go to state 60
    REFERENCE                      shift and go to state 61

state 86

    (67) COMPOP -> COMPOP COMPSIMB . ADDOP
    (68) ADDOP -> . PRODOP
    (69) ADDOP -> . ADDOP - PRODOP
    (70) ADDOP -> . ADDOP + PRODOP
    (71) PRODOP -> . PAROP
    (72) PRODOP -> . PRODOP / PAROP
    (73) PRODOP -> . PRODOP * PAROP
    (74) PAROP -> . VAL
    (75) PAROP -> . ( OROP )
    (76) VAL -> . REFERENCE
    (77) VAL -> . ID
    (78) VAL -> . CHAR
    (79) VAL -> . NUMBERF
    (80) VAL -> . NUMBER
    (81) REFERENCE -> . & ID
    (               shift and go to state 39
    ID              shift and go to state 73
    CHAR            shift and go to state 62
    NUMBERF         shift and go to state 63
    NUMBER          shift and go to state 64
    &               shift and go to state 65

    ADDOP                          shift and go to state 111
    PRODOP                         shift and go to state 58
    PAROP                          shift and go to state 59
    VAL                            shift and go to state 60
    REFERENCE                      shift and go to state 61

state 87

    (65) NOTOP -> ! NOTOP .
    ANDSIMB         reduce using rule 65 (NOTOP -> ! NOTOP .)
    ORSIMB          reduce using rule 65 (NOTOP -> ! NOTOP .)
    ;               reduce using rule 65 (NOTOP -> ! NOTOP .)
    )               reduce using rule 65 (NOTOP -> ! NOTOP .)
    ,               reduce using rule 65 (NOTOP -> ! NOTOP .)


state 88

    (69) ADDOP -> ADDOP - . PRODOP
    (71) PRODOP -> . PAROP
    (72) PRODOP -> . PRODOP / PAROP
    (73) PRODOP -> . PRODOP * PAROP
    (74) PAROP -> . VAL
    (75) PAROP -> . ( OROP )
    (76) VAL -> . REFERENCE
    (77) VAL -> . ID
    (78) VAL -> . CHAR
    (79) VAL -> . NUMBERF
    (80) VAL -> . NUMBER
    (81) REFERENCE -> . & ID
    (               shift and go to state 39
    ID              shift and go to state 73
    CHAR            shift and go to state 62
    NUMBERF         shift and go to state 63
    NUMBER          shift and go to state 64
    &               shift and go to state 65

    PRODOP                         shift and go to state 112
    PAROP                          shift and go to state 59
    VAL                            shift and go to state 60
    REFERENCE                      shift and go to state 61

state 89

    (70) ADDOP -> ADDOP + . PRODOP
    (71) PRODOP -> . PAROP
    (72) PRODOP -> . PRODOP / PAROP
    (73) PRODOP -> . PRODOP * PAROP
    (74) PAROP -> . VAL
    (75) PAROP -> . ( OROP )
    (76) VAL -> . REFERENCE
    (77) VAL -> . ID
    (78) VAL -> . CHAR
    (79) VAL -> . NUMBERF
    (80) VAL -> . NUMBER
    (81) REFERENCE -> . & ID
    (               shift and go to state 39
    ID              shift and go to state 73
    CHAR            shift and go to state 62
    NUMBERF         shift and go to state 63
    NUMBER          shift and go to state 64
    &               shift and go to state 65

    PRODOP                         shift and go to state 113
    PAROP                          shift and go to state 59
    VAL                            shift and go to state 60
    REFERENCE                      shift and go to state 61

state 90

    (72) PRODOP -> PRODOP / . PAROP
    (74) PAROP -> . VAL
    (75) PAROP -> . ( OROP )
    (76) VAL -> . REFERENCE
    (77) VAL -> . ID
    (78) VAL -> . CHAR
    (79) VAL -> . NUMBERF
    (80) VAL -> . NUMBER
    (81) REFERENCE -> . & ID
    (               shift and go to state 39
    ID              shift and go to state 73
    CHAR            shift and go to state 62
    NUMBERF         shift and go to state 63
    NUMBER          shift and go to state 64
    &               shift and go to state 65

    PAROP                          shift and go to state 114
    VAL                            shift and go to state 60
    REFERENCE                      shift and go to state 61

state 91

    (73) PRODOP -> PRODOP * . PAROP
    (74) PAROP -> . VAL
    (75) PAROP -> . ( OROP )
    (76) VAL -> . REFERENCE
    (77) VAL -> . ID
    (78) VAL -> . CHAR
    (79) VAL -> . NUMBERF
    (80) VAL -> . NUMBER
    (81) REFERENCE -> . & ID
    (               shift and go to state 39
    ID              shift and go to state 73
    CHAR            shift and go to state 62
    NUMBERF         shift and go to state 63
    NUMBER          shift and go to state 64
    &               shift and go to state 65

    PAROP                          shift and go to state 115
    VAL                            shift and go to state 60
    REFERENCE                      shift and go to state 61

state 92

    (81) REFERENCE -> & ID .
    /               reduce using rule 81 (REFERENCE -> & ID .)
    *               reduce using rule 81 (REFERENCE -> & ID .)
    -               reduce using rule 81 (REFERENCE -> & ID .)
    +               reduce using rule 81 (REFERENCE -> & ID .)
    COMPSIMB        reduce using rule 81 (REFERENCE -> & ID .)
    ANDSIMB         reduce using rule 81 (REFERENCE -> & ID .)
    ORSIMB          reduce using rule 81 (REFERENCE -> & ID .)
    ;               reduce using rule 81 (REFERENCE -> & ID .)
    )               reduce using rule 81 (REFERENCE -> & ID .)
    ,               reduce using rule 81 (REFERENCE -> & ID .)


state 93

    (18) RARGS -> , TYPE . REF ARG RARGS
    (19) REF -> .
    (20) REF -> . * REF
    ID              reduce using rule 19 (REF -> .)
    *               shift and go to state 28

    REF                            shift and go to state 116

state 94

    (7) FUNCTION -> TYPE ID emptyF1 ( ARGS ) { LINES } . emptyF2
    (9) emptyF2 -> .
    TYPE            reduce using rule 9 (emptyF2 -> .)
    VOIDTYPE        reduce using rule 9 (emptyF2 -> .)

    emptyF2                        shift and go to state 117

state 95

    (6) FUNCTION -> VOIDTYPE ID emptyF1 ( ARGS ) { LINES } . emptyF2
    (9) emptyF2 -> .
    TYPE            reduce using rule 9 (emptyF2 -> .)
    VOIDTYPE        reduce using rule 9 (emptyF2 -> .)

    emptyF2                        shift and go to state 118

state 96

    (47) DECLAR -> TYPE POINTERS IDPRIMA .
    ;               reduce using rule 47 (DECLAR -> TYPE POINTERS IDPRIMA .)


state 97

    (50) IDPRIMA -> empty . ELEM REST
    (53) ELEM -> . ID = INSTR
    (54) ELEM -> . ID ARRAY
    ID              shift and go to state 120

    ELEM                           shift and go to state 119

state 98

    (49) POINTERS -> * POINTERS .
    ID              reduce using rule 49 (POINTERS -> * POINTERS .)


state 99

    (75) PAROP -> ( OROP ) .
    /               reduce using rule 75 (PAROP -> ( OROP ) .)
    *               reduce using rule 75 (PAROP -> ( OROP ) .)
    -               reduce using rule 75 (PAROP -> ( OROP ) .)
    +               reduce using rule 75 (PAROP -> ( OROP ) .)
    COMPSIMB        reduce using rule 75 (PAROP -> ( OROP ) .)
    ANDSIMB         reduce using rule 75 (PAROP -> ( OROP ) .)
    ORSIMB          reduce using rule 75 (PAROP -> ( OROP ) .)
    ;               reduce using rule 75 (PAROP -> ( OROP ) .)
    )               reduce using rule 75 (PAROP -> ( OROP ) .)
    ,               reduce using rule 75 (PAROP -> ( OROP ) .)


state 100

    (24) LINE -> WHILE ( OROP . ) { LINES }
    (61) OROP -> OROP . ORSIMB ANDOP
    )               shift and go to state 121
    ORSIMB          shift and go to state 75


state 101

    (61) OROP -> OROP ORSIMB ANDOP .
    (63) ANDOP -> ANDOP . ANDSIMB NOTOP
    ORSIMB          reduce using rule 61 (OROP -> OROP ORSIMB ANDOP .)
    ;               reduce using rule 61 (OROP -> OROP ORSIMB ANDOP .)
    )               reduce using rule 61 (OROP -> OROP ORSIMB ANDOP .)
    ,               reduce using rule 61 (OROP -> OROP ORSIMB ANDOP .)
    ANDSIMB         shift and go to state 85


state 102

    (25) LINE -> IF ( OROP . ) { LINES } ELSERULE
    (61) OROP -> OROP . ORSIMB ANDOP
    )               shift and go to state 122
    ORSIMB          shift and go to state 75


state 103

    (26) LINE -> PRINT ( STRING . PRINTIDS ) ;
    (34) PRINTIDS -> .
    (35) PRINTIDS -> . , INSTR PRINTIDS
    )               reduce using rule 34 (PRINTIDS -> .)
    ,               shift and go to state 124

    PRINTIDS                       shift and go to state 123

state 104

    (27) LINE -> SCANF ( STRING . SCANIDS ) ;
    (32) SCANIDS -> .
    (33) SCANIDS -> . , REFERENCE SCANIDS
    )               reduce using rule 32 (SCANIDS -> .)
    ,               shift and go to state 126

    SCANIDS                        shift and go to state 125

state 105

    (29) LINE -> RETURN INSTR ; .
    }               reduce using rule 29 (LINE -> RETURN INSTR ; .)
    WHILE           reduce using rule 29 (LINE -> RETURN INSTR ; .)
    IF              reduce using rule 29 (LINE -> RETURN INSTR ; .)
    PRINT           reduce using rule 29 (LINE -> RETURN INSTR ; .)
    SCANF           reduce using rule 29 (LINE -> RETURN INSTR ; .)
    RETURN          reduce using rule 29 (LINE -> RETURN INSTR ; .)
    TYPE            reduce using rule 29 (LINE -> RETURN INSTR ; .)
    ID              reduce using rule 29 (LINE -> RETURN INSTR ; .)
    !               reduce using rule 29 (LINE -> RETURN INSTR ; .)
    (               reduce using rule 29 (LINE -> RETURN INSTR ; .)
    CHAR            reduce using rule 29 (LINE -> RETURN INSTR ; .)
    NUMBERF         reduce using rule 29 (LINE -> RETURN INSTR ; .)
    NUMBER          reduce using rule 29 (LINE -> RETURN INSTR ; .)
    &               reduce using rule 29 (LINE -> RETURN INSTR ; .)


state 106

    (41) FCALL -> ID ( FARGS . )
    )               shift and go to state 127


state 107

    (43) FARGS -> FARG . RFARGS
    (44) RFARGS -> .
    (45) RFARGS -> . , FARG RFARGS
    )               reduce using rule 44 (RFARGS -> .)
    ,               shift and go to state 129

    RFARGS                         shift and go to state 128

state 108

    (46) FARG -> VAL .
    ,               reduce using rule 46 (FARG -> VAL .)
    )               reduce using rule 46 (FARG -> VAL .)


state 109

    (59) ASIG -> ID = INSTR .
    ;               reduce using rule 59 (ASIG -> ID = INSTR .)
    ,               reduce using rule 59 (ASIG -> ID = INSTR .)
    )               reduce using rule 59 (ASIG -> ID = INSTR .)


state 110

    (63) ANDOP -> ANDOP ANDSIMB NOTOP .
    ANDSIMB         reduce using rule 63 (ANDOP -> ANDOP ANDSIMB NOTOP .)
    ORSIMB          reduce using rule 63 (ANDOP -> ANDOP ANDSIMB NOTOP .)
    ;               reduce using rule 63 (ANDOP -> ANDOP ANDSIMB NOTOP .)
    )               reduce using rule 63 (ANDOP -> ANDOP ANDSIMB NOTOP .)
    ,               reduce using rule 63 (ANDOP -> ANDOP ANDSIMB NOTOP .)


state 111

    (67) COMPOP -> COMPOP COMPSIMB ADDOP .
    (69) ADDOP -> ADDOP . - PRODOP
    (70) ADDOP -> ADDOP . + PRODOP
    COMPSIMB        reduce using rule 67 (COMPOP -> COMPOP COMPSIMB ADDOP .)
    ANDSIMB         reduce using rule 67 (COMPOP -> COMPOP COMPSIMB ADDOP .)
    ORSIMB          reduce using rule 67 (COMPOP -> COMPOP COMPSIMB ADDOP .)
    ;               reduce using rule 67 (COMPOP -> COMPOP COMPSIMB ADDOP .)
    )               reduce using rule 67 (COMPOP -> COMPOP COMPSIMB ADDOP .)
    ,               reduce using rule 67 (COMPOP -> COMPOP COMPSIMB ADDOP .)
    -               shift and go to state 88
    +               shift and go to state 89


state 112

    (69) ADDOP -> ADDOP - PRODOP .
    (72) PRODOP -> PRODOP . / PAROP
    (73) PRODOP -> PRODOP . * PAROP
    -               reduce using rule 69 (ADDOP -> ADDOP - PRODOP .)
    +               reduce using rule 69 (ADDOP -> ADDOP - PRODOP .)
    COMPSIMB        reduce using rule 69 (ADDOP -> ADDOP - PRODOP .)
    ANDSIMB         reduce using rule 69 (ADDOP -> ADDOP - PRODOP .)
    ORSIMB          reduce using rule 69 (ADDOP -> ADDOP - PRODOP .)
    ;               reduce using rule 69 (ADDOP -> ADDOP - PRODOP .)
    )               reduce using rule 69 (ADDOP -> ADDOP - PRODOP .)
    ,               reduce using rule 69 (ADDOP -> ADDOP - PRODOP .)
    /               shift and go to state 90
    *               shift and go to state 91


state 113

    (70) ADDOP -> ADDOP + PRODOP .
    (72) PRODOP -> PRODOP . / PAROP
    (73) PRODOP -> PRODOP . * PAROP
    -               reduce using rule 70 (ADDOP -> ADDOP + PRODOP .)
    +               reduce using rule 70 (ADDOP -> ADDOP + PRODOP .)
    COMPSIMB        reduce using rule 70 (ADDOP -> ADDOP + PRODOP .)
    ANDSIMB         reduce using rule 70 (ADDOP -> ADDOP + PRODOP .)
    ORSIMB          reduce using rule 70 (ADDOP -> ADDOP + PRODOP .)
    ;               reduce using rule 70 (ADDOP -> ADDOP + PRODOP .)
    )               reduce using rule 70 (ADDOP -> ADDOP + PRODOP .)
    ,               reduce using rule 70 (ADDOP -> ADDOP + PRODOP .)
    /               shift and go to state 90
    *               shift and go to state 91


state 114

    (72) PRODOP -> PRODOP / PAROP .
    /               reduce using rule 72 (PRODOP -> PRODOP / PAROP .)
    *               reduce using rule 72 (PRODOP -> PRODOP / PAROP .)
    -               reduce using rule 72 (PRODOP -> PRODOP / PAROP .)
    +               reduce using rule 72 (PRODOP -> PRODOP / PAROP .)
    COMPSIMB        reduce using rule 72 (PRODOP -> PRODOP / PAROP .)
    ANDSIMB         reduce using rule 72 (PRODOP -> PRODOP / PAROP .)
    ORSIMB          reduce using rule 72 (PRODOP -> PRODOP / PAROP .)
    ;               reduce using rule 72 (PRODOP -> PRODOP / PAROP .)
    )               reduce using rule 72 (PRODOP -> PRODOP / PAROP .)
    ,               reduce using rule 72 (PRODOP -> PRODOP / PAROP .)


state 115

    (73) PRODOP -> PRODOP * PAROP .
    /               reduce using rule 73 (PRODOP -> PRODOP * PAROP .)
    *               reduce using rule 73 (PRODOP -> PRODOP * PAROP .)
    -               reduce using rule 73 (PRODOP -> PRODOP * PAROP .)
    +               reduce using rule 73 (PRODOP -> PRODOP * PAROP .)
    COMPSIMB        reduce using rule 73 (PRODOP -> PRODOP * PAROP .)
    ANDSIMB         reduce using rule 73 (PRODOP -> PRODOP * PAROP .)
    ORSIMB          reduce using rule 73 (PRODOP -> PRODOP * PAROP .)
    ;               reduce using rule 73 (PRODOP -> PRODOP * PAROP .)
    )               reduce using rule 73 (PRODOP -> PRODOP * PAROP .)
    ,               reduce using rule 73 (PRODOP -> PRODOP * PAROP .)


state 116

    (18) RARGS -> , TYPE REF . ARG RARGS
    (21) ARG -> . ID
    ID              shift and go to state 34

    ARG                            shift and go to state 130

state 117

    (7) FUNCTION -> TYPE ID emptyF1 ( ARGS ) { LINES } emptyF2 .
    TYPE            reduce using rule 7 (FUNCTION -> TYPE ID emptyF1 ( ARGS ) { LINES } emptyF2 .)
    VOIDTYPE        reduce using rule 7 (FUNCTION -> TYPE ID emptyF1 ( ARGS ) { LINES } emptyF2 .)


state 118

    (6) FUNCTION -> VOIDTYPE ID emptyF1 ( ARGS ) { LINES } emptyF2 .
    TYPE            reduce using rule 6 (FUNCTION -> VOIDTYPE ID emptyF1 ( ARGS ) { LINES } emptyF2 .)
    VOIDTYPE        reduce using rule 6 (FUNCTION -> VOIDTYPE ID emptyF1 ( ARGS ) { LINES } emptyF2 .)


state 119

    (50) IDPRIMA -> empty ELEM . REST
    (51) REST -> .
    (52) REST -> . , empty2 ELEM REST
    ;               reduce using rule 51 (REST -> .)
    ,               shift and go to state 132

    REST                           shift and go to state 131

state 120

    (53) ELEM -> ID . = INSTR
    (54) ELEM -> ID . ARRAY
    (55) ARRAY -> .
    (56) ARRAY -> . [ NUMBER ] ARRAY
    =               shift and go to state 133
    ,               reduce using rule 55 (ARRAY -> .)
    ;               reduce using rule 55 (ARRAY -> .)
    [               shift and go to state 135

    ARRAY                          shift and go to state 134

state 121

    (24) LINE -> WHILE ( OROP ) . { LINES }
    {               shift and go to state 136


state 122

    (25) LINE -> IF ( OROP ) . { LINES } ELSERULE
    {               shift and go to state 137


state 123

    (26) LINE -> PRINT ( STRING PRINTIDS . ) ;
    )               shift and go to state 138


state 124

    (35) PRINTIDS -> , . INSTR PRINTIDS
    (38) INSTR -> . FCALL
    (39) INSTR -> . OROP
    (40) INSTR -> . ASIG
    (41) FCALL -> . ID ( FARGS )
    (60) OROP -> . ANDOP
    (61) OROP -> . OROP ORSIMB ANDOP
    (59) ASIG -> . ID = INSTR
    (62) ANDOP -> . NOTOP
    (63) ANDOP -> . ANDOP ANDSIMB NOTOP
    (64) NOTOP -> . COMPOP
    (65) NOTOP -> . ! NOTOP
    (66) COMPOP -> . ADDOP
    (67) COMPOP -> . COMPOP COMPSIMB ADDOP
    (68) ADDOP -> . PRODOP
    (69) ADDOP -> . ADDOP - PRODOP
    (70) ADDOP -> . ADDOP + PRODOP
    (71) PRODOP -> . PAROP
    (72) PRODOP -> . PRODOP / PAROP
    (73) PRODOP -> . PRODOP * PAROP
    (74) PAROP -> . VAL
    (75) PAROP -> . ( OROP )
    (76) VAL -> . REFERENCE
    (77) VAL -> . ID
    (78) VAL -> . CHAR
    (79) VAL -> . NUMBERF
    (80) VAL -> . NUMBER
    (81) REFERENCE -> . & ID
    ID              shift and go to state 52
    !               shift and go to state 56
    (               shift and go to state 39
    CHAR            shift and go to state 62
    NUMBERF         shift and go to state 63
    NUMBER          shift and go to state 64
    &               shift and go to state 65

    INSTR                          shift and go to state 139
    FCALL                          shift and go to state 50
    OROP                           shift and go to state 43
    ASIG                           shift and go to state 51
    ANDOP                          shift and go to state 53
    NOTOP                          shift and go to state 54
    COMPOP                         shift and go to state 55
    ADDOP                          shift and go to state 57
    PRODOP                         shift and go to state 58
    PAROP                          shift and go to state 59
    VAL                            shift and go to state 60
    REFERENCE                      shift and go to state 61

state 125

    (27) LINE -> SCANF ( STRING SCANIDS . ) ;
    )               shift and go to state 140


state 126

    (33) SCANIDS -> , . REFERENCE SCANIDS
    (81) REFERENCE -> . & ID
    &               shift and go to state 65

    REFERENCE                      shift and go to state 141

state 127

    (41) FCALL -> ID ( FARGS ) .
    ;               reduce using rule 41 (FCALL -> ID ( FARGS ) .)
    ,               reduce using rule 41 (FCALL -> ID ( FARGS ) .)
    )               reduce using rule 41 (FCALL -> ID ( FARGS ) .)


state 128

    (43) FARGS -> FARG RFARGS .
    )               reduce using rule 43 (FARGS -> FARG RFARGS .)


state 129

    (45) RFARGS -> , . FARG RFARGS
    (46) FARG -> . VAL
    (76) VAL -> . REFERENCE
    (77) VAL -> . ID
    (78) VAL -> . CHAR
    (79) VAL -> . NUMBERF
    (80) VAL -> . NUMBER
    (81) REFERENCE -> . & ID
    ID              shift and go to state 73
    CHAR            shift and go to state 62
    NUMBERF         shift and go to state 63
    NUMBER          shift and go to state 64
    &               shift and go to state 65

    FARG                           shift and go to state 142
    VAL                            shift and go to state 108
    REFERENCE                      shift and go to state 61

state 130

    (18) RARGS -> , TYPE REF ARG . RARGS
    (17) RARGS -> .
    (18) RARGS -> . , TYPE REF ARG RARGS
    )               reduce using rule 17 (RARGS -> .)
    ,               shift and go to state 67

    RARGS                          shift and go to state 143

state 131

    (50) IDPRIMA -> empty ELEM REST .
    ;               reduce using rule 50 (IDPRIMA -> empty ELEM REST .)


state 132

    (52) REST -> , . empty2 ELEM REST
    (58) empty2 -> .
    ID              reduce using rule 58 (empty2 -> .)

    empty2                         shift and go to state 144

state 133

    (53) ELEM -> ID = . INSTR
    (38) INSTR -> . FCALL
    (39) INSTR -> . OROP
    (40) INSTR -> . ASIG
    (41) FCALL -> . ID ( FARGS )
    (60) OROP -> . ANDOP
    (61) OROP -> . OROP ORSIMB ANDOP
    (59) ASIG -> . ID = INSTR
    (62) ANDOP -> . NOTOP
    (63) ANDOP -> . ANDOP ANDSIMB NOTOP
    (64) NOTOP -> . COMPOP
    (65) NOTOP -> . ! NOTOP
    (66) COMPOP -> . ADDOP
    (67) COMPOP -> . COMPOP COMPSIMB ADDOP
    (68) ADDOP -> . PRODOP
    (69) ADDOP -> . ADDOP - PRODOP
    (70) ADDOP -> . ADDOP + PRODOP
    (71) PRODOP -> . PAROP
    (72) PRODOP -> . PRODOP / PAROP
    (73) PRODOP -> . PRODOP * PAROP
    (74) PAROP -> . VAL
    (75) PAROP -> . ( OROP )
    (76) VAL -> . REFERENCE
    (77) VAL -> . ID
    (78) VAL -> . CHAR
    (79) VAL -> . NUMBERF
    (80) VAL -> . NUMBER
    (81) REFERENCE -> . & ID
    ID              shift and go to state 52
    !               shift and go to state 56
    (               shift and go to state 39
    CHAR            shift and go to state 62
    NUMBERF         shift and go to state 63
    NUMBER          shift and go to state 64
    &               shift and go to state 65

    INSTR                          shift and go to state 145
    FCALL                          shift and go to state 50
    OROP                           shift and go to state 43
    ASIG                           shift and go to state 51
    ANDOP                          shift and go to state 53
    NOTOP                          shift and go to state 54
    COMPOP                         shift and go to state 55
    ADDOP                          shift and go to state 57
    PRODOP                         shift and go to state 58
    PAROP                          shift and go to state 59
    VAL                            shift and go to state 60
    REFERENCE                      shift and go to state 61

state 134

    (54) ELEM -> ID ARRAY .
    ,               reduce using rule 54 (ELEM -> ID ARRAY .)
    ;               reduce using rule 54 (ELEM -> ID ARRAY .)


state 135

    (56) ARRAY -> [ . NUMBER ] ARRAY
    NUMBER          shift and go to state 146


state 136

    (24) LINE -> WHILE ( OROP ) { . LINES }
    (22) LINES -> .
    (23) LINES -> . LINES LINE
    }               reduce using rule 22 (LINES -> .)
    WHILE           reduce using rule 22 (LINES -> .)
    IF              reduce using rule 22 (LINES -> .)
    PRINT           reduce using rule 22 (LINES -> .)
    SCANF           reduce using rule 22 (LINES -> .)
    RETURN          reduce using rule 22 (LINES -> .)
    TYPE            reduce using rule 22 (LINES -> .)
    ID              reduce using rule 22 (LINES -> .)
    !               reduce using rule 22 (LINES -> .)
    (               reduce using rule 22 (LINES -> .)
    CHAR            reduce using rule 22 (LINES -> .)
    NUMBERF         reduce using rule 22 (LINES -> .)
    NUMBER          reduce using rule 22 (LINES -> .)
    &               reduce using rule 22 (LINES -> .)

    LINES                          shift and go to state 147

state 137

    (25) LINE -> IF ( OROP ) { . LINES } ELSERULE
    (22) LINES -> .
    (23) LINES -> . LINES LINE
    }               reduce using rule 22 (LINES -> .)
    WHILE           reduce using rule 22 (LINES -> .)
    IF              reduce using rule 22 (LINES -> .)
    PRINT           reduce using rule 22 (LINES -> .)
    SCANF           reduce using rule 22 (LINES -> .)
    RETURN          reduce using rule 22 (LINES -> .)
    TYPE            reduce using rule 22 (LINES -> .)
    ID              reduce using rule 22 (LINES -> .)
    !               reduce using rule 22 (LINES -> .)
    (               reduce using rule 22 (LINES -> .)
    CHAR            reduce using rule 22 (LINES -> .)
    NUMBERF         reduce using rule 22 (LINES -> .)
    NUMBER          reduce using rule 22 (LINES -> .)
    &               reduce using rule 22 (LINES -> .)

    LINES                          shift and go to state 148

state 138

    (26) LINE -> PRINT ( STRING PRINTIDS ) . ;
    ;               shift and go to state 149


state 139

    (35) PRINTIDS -> , INSTR . PRINTIDS
    (34) PRINTIDS -> .
    (35) PRINTIDS -> . , INSTR PRINTIDS
    )               reduce using rule 34 (PRINTIDS -> .)
    ,               shift and go to state 124

    PRINTIDS                       shift and go to state 150

state 140

    (27) LINE -> SCANF ( STRING SCANIDS ) . ;
    ;               shift and go to state 151


state 141

    (33) SCANIDS -> , REFERENCE . SCANIDS
    (32) SCANIDS -> .
    (33) SCANIDS -> . , REFERENCE SCANIDS
    )               reduce using rule 32 (SCANIDS -> .)
    ,               shift and go to state 126

    SCANIDS                        shift and go to state 152

state 142

    (45) RFARGS -> , FARG . RFARGS
    (44) RFARGS -> .
    (45) RFARGS -> . , FARG RFARGS
    )               reduce using rule 44 (RFARGS -> .)
    ,               shift and go to state 129

    RFARGS                         shift and go to state 153

state 143

    (18) RARGS -> , TYPE REF ARG RARGS .
    )               reduce using rule 18 (RARGS -> , TYPE REF ARG RARGS .)


state 144

    (52) REST -> , empty2 . ELEM REST
    (53) ELEM -> . ID = INSTR
    (54) ELEM -> . ID ARRAY
    ID              shift and go to state 120

    ELEM                           shift and go to state 154

state 145

    (53) ELEM -> ID = INSTR .
    ,               reduce using rule 53 (ELEM -> ID = INSTR .)
    ;               reduce using rule 53 (ELEM -> ID = INSTR .)


state 146

    (56) ARRAY -> [ NUMBER . ] ARRAY
    ]               shift and go to state 155


state 147

    (24) LINE -> WHILE ( OROP ) { LINES . }
    (23) LINES -> LINES . LINE
    (24) LINE -> . WHILE ( OROP ) { LINES }
    (25) LINE -> . IF ( OROP ) { LINES } ELSERULE
    (26) LINE -> . PRINT ( STRING PRINTIDS ) ;
    (27) LINE -> . SCANF ( STRING SCANIDS ) ;
    (28) LINE -> . RETURN ;
    (29) LINE -> . RETURN INSTR ;
    (30) LINE -> . DECLAR ;
    (31) LINE -> . INSTR ;
    (47) DECLAR -> . TYPE POINTERS IDPRIMA
    (38) INSTR -> . FCALL
    (39) INSTR -> . OROP
    (40) INSTR -> . ASIG
    (41) FCALL -> . ID ( FARGS )
    (60) OROP -> . ANDOP
    (61) OROP -> . OROP ORSIMB ANDOP
    (59) ASIG -> . ID = INSTR
    (62) ANDOP -> . NOTOP
    (63) ANDOP -> . ANDOP ANDSIMB NOTOP
    (64) NOTOP -> . COMPOP
    (65) NOTOP -> . ! NOTOP
    (66) COMPOP -> . ADDOP
    (67) COMPOP -> . COMPOP COMPSIMB ADDOP
    (68) ADDOP -> . PRODOP
    (69) ADDOP -> . ADDOP - PRODOP
    (70) ADDOP -> . ADDOP + PRODOP
    (71) PRODOP -> . PAROP
    (72) PRODOP -> . PRODOP / PAROP
    (73) PRODOP -> . PRODOP * PAROP
    (74) PAROP -> . VAL
    (75) PAROP -> . ( OROP )
    (76) VAL -> . REFERENCE
    (77) VAL -> . ID
    (78) VAL -> . CHAR
    (79) VAL -> . NUMBERF
    (80) VAL -> . NUMBER
    (81) REFERENCE -> . & ID
    }               shift and go to state 156
    WHILE           shift and go to state 42
    IF              shift and go to state 44
    PRINT           shift and go to state 45
    SCANF           shift and go to state 46
    RETURN          shift and go to state 47
    TYPE            shift and go to state 38
    ID              shift and go to state 52
    !               shift and go to state 56
    (               shift and go to state 39
    CHAR            shift and go to state 62
    NUMBERF         shift and go to state 63
    NUMBER          shift and go to state 64
    &               shift and go to state 65

    OROP                           shift and go to state 43
    LINE                           shift and go to state 41
    INSTR                          shift and go to state 48
    DECLAR                         shift and go to state 49
    FCALL                          shift and go to state 50
    ASIG                           shift and go to state 51
    ANDOP                          shift and go to state 53
    NOTOP                          shift and go to state 54
    COMPOP                         shift and go to state 55
    ADDOP                          shift and go to state 57
    PRODOP                         shift and go to state 58
    PAROP                          shift and go to state 59
    VAL                            shift and go to state 60
    REFERENCE                      shift and go to state 61

state 148

    (25) LINE -> IF ( OROP ) { LINES . } ELSERULE
    (23) LINES -> LINES . LINE
    (24) LINE -> . WHILE ( OROP ) { LINES }
    (25) LINE -> . IF ( OROP ) { LINES } ELSERULE
    (26) LINE -> . PRINT ( STRING PRINTIDS ) ;
    (27) LINE -> . SCANF ( STRING SCANIDS ) ;
    (28) LINE -> . RETURN ;
    (29) LINE -> . RETURN INSTR ;
    (30) LINE -> . DECLAR ;
    (31) LINE -> . INSTR ;
    (47) DECLAR -> . TYPE POINTERS IDPRIMA
    (38) INSTR -> . FCALL
    (39) INSTR -> . OROP
    (40) INSTR -> . ASIG
    (41) FCALL -> . ID ( FARGS )
    (60) OROP -> . ANDOP
    (61) OROP -> . OROP ORSIMB ANDOP
    (59) ASIG -> . ID = INSTR
    (62) ANDOP -> . NOTOP
    (63) ANDOP -> . ANDOP ANDSIMB NOTOP
    (64) NOTOP -> . COMPOP
    (65) NOTOP -> . ! NOTOP
    (66) COMPOP -> . ADDOP
    (67) COMPOP -> . COMPOP COMPSIMB ADDOP
    (68) ADDOP -> . PRODOP
    (69) ADDOP -> . ADDOP - PRODOP
    (70) ADDOP -> . ADDOP + PRODOP
    (71) PRODOP -> . PAROP
    (72) PRODOP -> . PRODOP / PAROP
    (73) PRODOP -> . PRODOP * PAROP
    (74) PAROP -> . VAL
    (75) PAROP -> . ( OROP )
    (76) VAL -> . REFERENCE
    (77) VAL -> . ID
    (78) VAL -> . CHAR
    (79) VAL -> . NUMBERF
    (80) VAL -> . NUMBER
    (81) REFERENCE -> . & ID
    }               shift and go to state 157
    WHILE           shift and go to state 42
    IF              shift and go to state 44
    PRINT           shift and go to state 45
    SCANF           shift and go to state 46
    RETURN          shift and go to state 47
    TYPE            shift and go to state 38
    ID              shift and go to state 52
    !               shift and go to state 56
    (               shift and go to state 39
    CHAR            shift and go to state 62
    NUMBERF         shift and go to state 63
    NUMBER          shift and go to state 64
    &               shift and go to state 65

    OROP                           shift and go to state 43
    LINE                           shift and go to state 41
    INSTR                          shift and go to state 48
    DECLAR                         shift and go to state 49
    FCALL                          shift and go to state 50
    ASIG                           shift and go to state 51
    ANDOP                          shift and go to state 53
    NOTOP                          shift and go to state 54
    COMPOP                         shift and go to state 55
    ADDOP                          shift and go to state 57
    PRODOP                         shift and go to state 58
    PAROP                          shift and go to state 59
    VAL                            shift and go to state 60
    REFERENCE                      shift and go to state 61

state 149

    (26) LINE -> PRINT ( STRING PRINTIDS ) ; .
    }               reduce using rule 26 (LINE -> PRINT ( STRING PRINTIDS ) ; .)
    WHILE           reduce using rule 26 (LINE -> PRINT ( STRING PRINTIDS ) ; .)
    IF              reduce using rule 26 (LINE -> PRINT ( STRING PRINTIDS ) ; .)
    PRINT           reduce using rule 26 (LINE -> PRINT ( STRING PRINTIDS ) ; .)
    SCANF           reduce using rule 26 (LINE -> PRINT ( STRING PRINTIDS ) ; .)
    RETURN          reduce using rule 26 (LINE -> PRINT ( STRING PRINTIDS ) ; .)
    TYPE            reduce using rule 26 (LINE -> PRINT ( STRING PRINTIDS ) ; .)
    ID              reduce using rule 26 (LINE -> PRINT ( STRING PRINTIDS ) ; .)
    !               reduce using rule 26 (LINE -> PRINT ( STRING PRINTIDS ) ; .)
    (               reduce using rule 26 (LINE -> PRINT ( STRING PRINTIDS ) ; .)
    CHAR            reduce using rule 26 (LINE -> PRINT ( STRING PRINTIDS ) ; .)
    NUMBERF         reduce using rule 26 (LINE -> PRINT ( STRING PRINTIDS ) ; .)
    NUMBER          reduce using rule 26 (LINE -> PRINT ( STRING PRINTIDS ) ; .)
    &               reduce using rule 26 (LINE -> PRINT ( STRING PRINTIDS ) ; .)


state 150

    (35) PRINTIDS -> , INSTR PRINTIDS .
    )               reduce using rule 35 (PRINTIDS -> , INSTR PRINTIDS .)


state 151

    (27) LINE -> SCANF ( STRING SCANIDS ) ; .
    }               reduce using rule 27 (LINE -> SCANF ( STRING SCANIDS ) ; .)
    WHILE           reduce using rule 27 (LINE -> SCANF ( STRING SCANIDS ) ; .)
    IF              reduce using rule 27 (LINE -> SCANF ( STRING SCANIDS ) ; .)
    PRINT           reduce using rule 27 (LINE -> SCANF ( STRING SCANIDS ) ; .)
    SCANF           reduce using rule 27 (LINE -> SCANF ( STRING SCANIDS ) ; .)
    RETURN          reduce using rule 27 (LINE -> SCANF ( STRING SCANIDS ) ; .)
    TYPE            reduce using rule 27 (LINE -> SCANF ( STRING SCANIDS ) ; .)
    ID              reduce using rule 27 (LINE -> SCANF ( STRING SCANIDS ) ; .)
    !               reduce using rule 27 (LINE -> SCANF ( STRING SCANIDS ) ; .)
    (               reduce using rule 27 (LINE -> SCANF ( STRING SCANIDS ) ; .)
    CHAR            reduce using rule 27 (LINE -> SCANF ( STRING SCANIDS ) ; .)
    NUMBERF         reduce using rule 27 (LINE -> SCANF ( STRING SCANIDS ) ; .)
    NUMBER          reduce using rule 27 (LINE -> SCANF ( STRING SCANIDS ) ; .)
    &               reduce using rule 27 (LINE -> SCANF ( STRING SCANIDS ) ; .)


state 152

    (33) SCANIDS -> , REFERENCE SCANIDS .
    )               reduce using rule 33 (SCANIDS -> , REFERENCE SCANIDS .)


state 153

    (45) RFARGS -> , FARG RFARGS .
    )               reduce using rule 45 (RFARGS -> , FARG RFARGS .)


state 154

    (52) REST -> , empty2 ELEM . REST
    (51) REST -> .
    (52) REST -> . , empty2 ELEM REST
    ;               reduce using rule 51 (REST -> .)
    ,               shift and go to state 132

    REST                           shift and go to state 158

state 155

    (56) ARRAY -> [ NUMBER ] . ARRAY
    (55) ARRAY -> .
    (56) ARRAY -> . [ NUMBER ] ARRAY
    ,               reduce using rule 55 (ARRAY -> .)
    ;               reduce using rule 55 (ARRAY -> .)
    [               shift and go to state 135

    ARRAY                          shift and go to state 159

state 156

    (24) LINE -> WHILE ( OROP ) { LINES } .
    }               reduce using rule 24 (LINE -> WHILE ( OROP ) { LINES } .)
    WHILE           reduce using rule 24 (LINE -> WHILE ( OROP ) { LINES } .)
    IF              reduce using rule 24 (LINE -> WHILE ( OROP ) { LINES } .)
    PRINT           reduce using rule 24 (LINE -> WHILE ( OROP ) { LINES } .)
    SCANF           reduce using rule 24 (LINE -> WHILE ( OROP ) { LINES } .)
    RETURN          reduce using rule 24 (LINE -> WHILE ( OROP ) { LINES } .)
    TYPE            reduce using rule 24 (LINE -> WHILE ( OROP ) { LINES } .)
    ID              reduce using rule 24 (LINE -> WHILE ( OROP ) { LINES } .)
    !               reduce using rule 24 (LINE -> WHILE ( OROP ) { LINES } .)
    (               reduce using rule 24 (LINE -> WHILE ( OROP ) { LINES } .)
    CHAR            reduce using rule 24 (LINE -> WHILE ( OROP ) { LINES } .)
    NUMBERF         reduce using rule 24 (LINE -> WHILE ( OROP ) { LINES } .)
    NUMBER          reduce using rule 24 (LINE -> WHILE ( OROP ) { LINES } .)
    &               reduce using rule 24 (LINE -> WHILE ( OROP ) { LINES } .)


state 157

    (25) LINE -> IF ( OROP ) { LINES } . ELSERULE
    (36) ELSERULE -> .
    (37) ELSERULE -> . ELSE { LINES }
    }               reduce using rule 36 (ELSERULE -> .)
    WHILE           reduce using rule 36 (ELSERULE -> .)
    IF              reduce using rule 36 (ELSERULE -> .)
    PRINT           reduce using rule 36 (ELSERULE -> .)
    SCANF           reduce using rule 36 (ELSERULE -> .)
    RETURN          reduce using rule 36 (ELSERULE -> .)
    TYPE            reduce using rule 36 (ELSERULE -> .)
    ID              reduce using rule 36 (ELSERULE -> .)
    !               reduce using rule 36 (ELSERULE -> .)
    (               reduce using rule 36 (ELSERULE -> .)
    CHAR            reduce using rule 36 (ELSERULE -> .)
    NUMBERF         reduce using rule 36 (ELSERULE -> .)
    NUMBER          reduce using rule 36 (ELSERULE -> .)
    &               reduce using rule 36 (ELSERULE -> .)
    ELSE            shift and go to state 161

    ELSERULE                       shift and go to state 160

state 158

    (52) REST -> , empty2 ELEM REST .
    ;               reduce using rule 52 (REST -> , empty2 ELEM REST .)


state 159

    (56) ARRAY -> [ NUMBER ] ARRAY .
    ,               reduce using rule 56 (ARRAY -> [ NUMBER ] ARRAY .)
    ;               reduce using rule 56 (ARRAY -> [ NUMBER ] ARRAY .)


state 160

    (25) LINE -> IF ( OROP ) { LINES } ELSERULE .
    }               reduce using rule 25 (LINE -> IF ( OROP ) { LINES } ELSERULE .)
    WHILE           reduce using rule 25 (LINE -> IF ( OROP ) { LINES } ELSERULE .)
    IF              reduce using rule 25 (LINE -> IF ( OROP ) { LINES } ELSERULE .)
    PRINT           reduce using rule 25 (LINE -> IF ( OROP ) { LINES } ELSERULE .)
    SCANF           reduce using rule 25 (LINE -> IF ( OROP ) { LINES } ELSERULE .)
    RETURN          reduce using rule 25 (LINE -> IF ( OROP ) { LINES } ELSERULE .)
    TYPE            reduce using rule 25 (LINE -> IF ( OROP ) { LINES } ELSERULE .)
    ID              reduce using rule 25 (LINE -> IF ( OROP ) { LINES } ELSERULE .)
    !               reduce using rule 25 (LINE -> IF ( OROP ) { LINES } ELSERULE .)
    (               reduce using rule 25 (LINE -> IF ( OROP ) { LINES } ELSERULE .)
    CHAR            reduce using rule 25 (LINE -> IF ( OROP ) { LINES } ELSERULE .)
    NUMBERF         reduce using rule 25 (LINE -> IF ( OROP ) { LINES } ELSERULE .)
    NUMBER          reduce using rule 25 (LINE -> IF ( OROP ) { LINES } ELSERULE .)
    &               reduce using rule 25 (LINE -> IF ( OROP ) { LINES } ELSERULE .)


state 161

    (37) ELSERULE -> ELSE . { LINES }
    {               shift and go to state 162


state 162

    (37) ELSERULE -> ELSE { . LINES }
    (22) LINES -> .
    (23) LINES -> . LINES LINE
    }               reduce using rule 22 (LINES -> .)
    WHILE           reduce using rule 22 (LINES -> .)
    IF              reduce using rule 22 (LINES -> .)
    PRINT           reduce using rule 22 (LINES -> .)
    SCANF           reduce using rule 22 (LINES -> .)
    RETURN          reduce using rule 22 (LINES -> .)
    TYPE            reduce using rule 22 (LINES -> .)
    ID              reduce using rule 22 (LINES -> .)
    !               reduce using rule 22 (LINES -> .)
    (               reduce using rule 22 (LINES -> .)
    CHAR            reduce using rule 22 (LINES -> .)
    NUMBERF         reduce using rule 22 (LINES -> .)
    NUMBER          reduce using rule 22 (LINES -> .)
    &               reduce using rule 22 (LINES -> .)

    LINES                          shift and go to state 163

state 163

    (37) ELSERULE -> ELSE { LINES . }
    (23) LINES -> LINES . LINE
    (24) LINE -> . WHILE ( OROP ) { LINES }
    (25) LINE -> . IF ( OROP ) { LINES } ELSERULE
    (26) LINE -> . PRINT ( STRING PRINTIDS ) ;
    (27) LINE -> . SCANF ( STRING SCANIDS ) ;
    (28) LINE -> . RETURN ;
    (29) LINE -> . RETURN INSTR ;
    (30) LINE -> . DECLAR ;
    (31) LINE -> . INSTR ;
    (47) DECLAR -> . TYPE POINTERS IDPRIMA
    (38) INSTR -> . FCALL
    (39) INSTR -> . OROP
    (40) INSTR -> . ASIG
    (41) FCALL -> . ID ( FARGS )
    (60) OROP -> . ANDOP
    (61) OROP -> . OROP ORSIMB ANDOP
    (59) ASIG -> . ID = INSTR
    (62) ANDOP -> . NOTOP
    (63) ANDOP -> . ANDOP ANDSIMB NOTOP
    (64) NOTOP -> . COMPOP
    (65) NOTOP -> . ! NOTOP
    (66) COMPOP -> . ADDOP
    (67) COMPOP -> . COMPOP COMPSIMB ADDOP
    (68) ADDOP -> . PRODOP
    (69) ADDOP -> . ADDOP - PRODOP
    (70) ADDOP -> . ADDOP + PRODOP
    (71) PRODOP -> . PAROP
    (72) PRODOP -> . PRODOP / PAROP
    (73) PRODOP -> . PRODOP * PAROP
    (74) PAROP -> . VAL
    (75) PAROP -> . ( OROP )
    (76) VAL -> . REFERENCE
    (77) VAL -> . ID
    (78) VAL -> . CHAR
    (79) VAL -> . NUMBERF
    (80) VAL -> . NUMBER
    (81) REFERENCE -> . & ID
    }               shift and go to state 164
    WHILE           shift and go to state 42
    IF              shift and go to state 44
    PRINT           shift and go to state 45
    SCANF           shift and go to state 46
    RETURN          shift and go to state 47
    TYPE            shift and go to state 38
    ID              shift and go to state 52
    !               shift and go to state 56
    (               shift and go to state 39
    CHAR            shift and go to state 62
    NUMBERF         shift and go to state 63
    NUMBER          shift and go to state 64
    &               shift and go to state 65

    LINE                           shift and go to state 41
    OROP                           shift and go to state 43
    INSTR                          shift and go to state 48
    DECLAR                         shift and go to state 49
    FCALL                          shift and go to state 50
    ASIG                           shift and go to state 51
    ANDOP                          shift and go to state 53
    NOTOP                          shift and go to state 54
    COMPOP                         shift and go to state 55
    ADDOP                          shift and go to state 57
    PRODOP                         shift and go to state 58
    PAROP                          shift and go to state 59
    VAL                            shift and go to state 60
    REFERENCE                      shift and go to state 61

state 164

    (37) ELSERULE -> ELSE { LINES } .
    }               reduce using rule 37 (ELSERULE -> ELSE { LINES } .)
    WHILE           reduce using rule 37 (ELSERULE -> ELSE { LINES } .)
    IF              reduce using rule 37 (ELSERULE -> ELSE { LINES } .)
    PRINT           reduce using rule 37 (ELSERULE -> ELSE { LINES } .)
    SCANF           reduce using rule 37 (ELSERULE -> ELSE { LINES } .)
    RETURN          reduce using rule 37 (ELSERULE -> ELSE { LINES } .)
    TYPE            reduce using rule 37 (ELSERULE -> ELSE { LINES } .)
    ID              reduce using rule 37 (ELSERULE -> ELSE { LINES } .)
    !               reduce using rule 37 (ELSERULE -> ELSE { LINES } .)
    (               reduce using rule 37 (ELSERULE -> ELSE { LINES } .)
    CHAR            reduce using rule 37 (ELSERULE -> ELSE { LINES } .)
    NUMBERF         reduce using rule 37 (ELSERULE -> ELSE { LINES } .)
    NUMBER          reduce using rule 37 (ELSERULE -> ELSE { LINES } .)
    &               reduce using rule 37 (ELSERULE -> ELSE { LINES } .)

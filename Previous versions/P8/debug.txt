Grammar:

Rule 0     S' -> S
Rule 1     S -> S2 TYPE emptymain MAIN ( ) { LINES }
Rule 2     emptymain -> <empty>
Rule 3     S2 -> <empty>
Rule 4     S2 -> S2 GLOBALASIG
Rule 5     S2 -> S2 GLOBALDECLAR
Rule 6     S2 -> S2 FUNCTION
Rule 7     FUNCTION -> VOIDTYPE ID emptyF1 ( ARGS ) { LINES } emptyF2
Rule 8     FUNCTION -> TYPE ID emptyF1 ( ARGS ) { LINES } emptyF2
Rule 9     emptyF1 -> <empty>
Rule 10    emptyF2 -> <empty>
Rule 11    GLOBALDECLAR -> TYPE ELEM emptyglobal emptyaux RESTGLOBAL ;
Rule 12    RESTGLOBAL -> <empty>
Rule 13    RESTGLOBAL -> , emptyglobal2 ELEM RESTGLOBAL
Rule 14    emptyglobal -> <empty>
Rule 15    emptyglobal2 -> <empty>
Rule 16    emptyaux -> <empty>
Rule 17    GLOBALASIG -> ID = INSTR ;
Rule 18    ARGS -> <empty>
Rule 19    ARGS -> TYPE ARG RARGS
Rule 20    RARGS -> <empty>
Rule 21    RARGS -> , TYPE ARG RARGS
Rule 22    ARG -> ID
Rule 23    LINES -> <empty>
Rule 24    LINES -> LINES LINE ;
Rule 25    LINE -> IF ( OROP ) emptyif { LINES } ELSERULE
Rule 26    LINE -> PRINT ( STRING PRINTIDS )
Rule 27    LINE -> SCANF ( STRING SCANIDS )
Rule 28    LINE -> DECLAR
Rule 29    LINE -> INSTR
Rule 30    SCANIDS -> <empty>
Rule 31    SCANIDS -> , REFERENCE SCANIDS
Rule 32    PRINTIDS -> <empty>
Rule 33    PRINTIDS -> , INSTR PRINTIDS
Rule 34    emptyif -> <empty>
Rule 35    ELSERULE -> <empty>
Rule 36    ELSERULE -> ELSE emptyelse { LINES }
Rule 37    emptyelse -> <empty>
Rule 38    INSTR -> FCALL
Rule 39    INSTR -> OROP
Rule 40    INSTR -> ASIG
Rule 41    FCALL -> ID ( FARGS )
Rule 42    FARGS -> <empty>
Rule 43    FARGS -> FARG RFARGS
Rule 44    RFARGS -> <empty>
Rule 45    RFARGS -> , FARG RFARGS
Rule 46    FARG -> * POINTERS ID
Rule 47    FARG -> VAL
Rule 48    DECLAR -> TYPE POINTERS IDPRIMA
Rule 49    POINTERS -> <empty>
Rule 50    POINTERS -> * POINTERS
Rule 51    IDPRIMA -> empty ELEM REST
Rule 52    REST -> <empty>
Rule 53    REST -> , empty2 ELEM REST
Rule 54    ELEM -> ID = INSTR
Rule 55    ELEM -> ID ARRAY
Rule 56    ARRAY -> <empty>
Rule 57    ARRAY -> [ NUMBER ] ARRAY
Rule 58    empty -> <empty>
Rule 59    empty2 -> <empty>
Rule 60    ASIG -> ID = INSTR
Rule 61    OROP -> ANDOP
Rule 62    OROP -> OROP ORSIMB ANDOP
Rule 63    ANDOP -> NOTOP
Rule 64    ANDOP -> ANDOP ANDSIMB NOTOP
Rule 65    NOTOP -> COMPOP
Rule 66    NOTOP -> ! NOTOP
Rule 67    COMPOP -> ADDOP
Rule 68    COMPOP -> COMPOP COMPSIMB ADDOP
Rule 69    ADDOP -> PRODOP
Rule 70    ADDOP -> ADDOP - PRODOP
Rule 71    ADDOP -> ADDOP + PRODOP
Rule 72    PRODOP -> PAROP
Rule 73    PRODOP -> PRODOP / PAROP
Rule 74    PRODOP -> PRODOP * PAROP
Rule 75    PAROP -> VAL
Rule 76    PAROP -> ( OROP )
Rule 77    VAL -> REFERENCE
Rule 78    VAL -> ID
Rule 79    VAL -> CHAR
Rule 80    VAL -> NUMBERF
Rule 81    VAL -> NUMBER
Rule 82    REFERENCE -> & ID

Terminals, with rules where they appear:

!                    : 66
&                    : 82
(                    : 1 7 8 25 26 27 41 76
)                    : 1 7 8 25 26 27 41 76
*                    : 46 50 74
+                    : 71
,                    : 13 21 31 33 45 53
-                    : 70
/                    : 73
;                    : 11 17 24
=                    : 17 54 60
ANDSIMB              : 64
CHAR                 : 79
COMPSIMB             : 68
ELSE                 : 36
ID                   : 7 8 17 22 41 46 54 55 60 78 82
IF                   : 25
MAIN                 : 1
NUMBER               : 57 81
NUMBERF              : 80
ORSIMB               : 62
PRINT                : 26
SCANF                : 27
STRING               : 26 27
TYPE                 : 1 8 11 19 21 48
VOIDTYPE             : 7
[                    : 57
]                    : 57
error                : 
{                    : 1 7 8 25 36
}                    : 1 7 8 25 36

Nonterminals, with rules where they appear:

ADDOP                : 67 68 70 71
ANDOP                : 61 62 64
ARG                  : 19 21
ARGS                 : 7 8
ARRAY                : 55 57
ASIG                 : 40
COMPOP               : 65 68
DECLAR               : 28
ELEM                 : 11 13 51 53
ELSERULE             : 25
FARG                 : 43 45
FARGS                : 41
FCALL                : 38
FUNCTION             : 6
GLOBALASIG           : 4
GLOBALDECLAR         : 5
IDPRIMA              : 48
INSTR                : 17 29 33 54 60
LINE                 : 24
LINES                : 1 7 8 24 25 36
NOTOP                : 63 64 66
OROP                 : 25 39 62 76
PAROP                : 72 73 74
POINTERS             : 46 48 50
PRINTIDS             : 26 33
PRODOP               : 69 70 71 73 74
RARGS                : 19 21
REFERENCE            : 31 77
REST                 : 51 53
RESTGLOBAL           : 11 13
RFARGS               : 43 45
S                    : 0
S2                   : 1 4 5 6
SCANIDS              : 27 31
VAL                  : 47 75
empty                : 51
empty2               : 53
emptyF1              : 7 8
emptyF2              : 7 8
emptyaux             : 11
emptyelse            : 36
emptyglobal          : 11
emptyglobal2         : 13
emptyif              : 25
emptymain            : 1


state 0

    (0) S' -> . S
    (1) S -> . S2 TYPE emptymain MAIN ( ) { LINES }
    (3) S2 -> .
    (4) S2 -> . S2 GLOBALASIG
    (5) S2 -> . S2 GLOBALDECLAR
    (6) S2 -> . S2 FUNCTION
    TYPE            reduce using rule 3 (S2 -> .)
    ID              reduce using rule 3 (S2 -> .)
    VOIDTYPE        reduce using rule 3 (S2 -> .)

    S                              shift and go to state 1
    S2                             shift and go to state 2

state 1

    (0) S' -> S .


state 2

    (1) S -> S2 . TYPE emptymain MAIN ( ) { LINES }
    (4) S2 -> S2 . GLOBALASIG
    (5) S2 -> S2 . GLOBALDECLAR
    (6) S2 -> S2 . FUNCTION
    (17) GLOBALASIG -> . ID = INSTR ;
    (11) GLOBALDECLAR -> . TYPE ELEM emptyglobal emptyaux RESTGLOBAL ;
    (7) FUNCTION -> . VOIDTYPE ID emptyF1 ( ARGS ) { LINES } emptyF2
    (8) FUNCTION -> . TYPE ID emptyF1 ( ARGS ) { LINES } emptyF2
    TYPE            shift and go to state 3
    ID              shift and go to state 7
    VOIDTYPE        shift and go to state 8

    GLOBALASIG                     shift and go to state 4
    GLOBALDECLAR                   shift and go to state 5
    FUNCTION                       shift and go to state 6

state 3

    (1) S -> S2 TYPE . emptymain MAIN ( ) { LINES }
    (11) GLOBALDECLAR -> TYPE . ELEM emptyglobal emptyaux RESTGLOBAL ;
    (8) FUNCTION -> TYPE . ID emptyF1 ( ARGS ) { LINES } emptyF2
    (2) emptymain -> .
    (54) ELEM -> . ID = INSTR
    (55) ELEM -> . ID ARRAY
    ID              shift and go to state 11
    MAIN            reduce using rule 2 (emptymain -> .)

    emptymain                      shift and go to state 9
    ELEM                           shift and go to state 10

state 4

    (4) S2 -> S2 GLOBALASIG .
    TYPE            reduce using rule 4 (S2 -> S2 GLOBALASIG .)
    ID              reduce using rule 4 (S2 -> S2 GLOBALASIG .)
    VOIDTYPE        reduce using rule 4 (S2 -> S2 GLOBALASIG .)


state 5

    (5) S2 -> S2 GLOBALDECLAR .
    TYPE            reduce using rule 5 (S2 -> S2 GLOBALDECLAR .)
    ID              reduce using rule 5 (S2 -> S2 GLOBALDECLAR .)
    VOIDTYPE        reduce using rule 5 (S2 -> S2 GLOBALDECLAR .)


state 6

    (6) S2 -> S2 FUNCTION .
    TYPE            reduce using rule 6 (S2 -> S2 FUNCTION .)
    ID              reduce using rule 6 (S2 -> S2 FUNCTION .)
    VOIDTYPE        reduce using rule 6 (S2 -> S2 FUNCTION .)


state 7

    (17) GLOBALASIG -> ID . = INSTR ;
    =               shift and go to state 12


state 8

    (7) FUNCTION -> VOIDTYPE . ID emptyF1 ( ARGS ) { LINES } emptyF2
    ID              shift and go to state 13


state 9

    (1) S -> S2 TYPE emptymain . MAIN ( ) { LINES }
    MAIN            shift and go to state 14


state 10

    (11) GLOBALDECLAR -> TYPE ELEM . emptyglobal emptyaux RESTGLOBAL ;
    (14) emptyglobal -> .
    ,               reduce using rule 14 (emptyglobal -> .)
    ;               reduce using rule 14 (emptyglobal -> .)

    emptyglobal                    shift and go to state 15

state 11

    (8) FUNCTION -> TYPE ID . emptyF1 ( ARGS ) { LINES } emptyF2
    (54) ELEM -> ID . = INSTR
    (55) ELEM -> ID . ARRAY
    (9) emptyF1 -> .
    (56) ARRAY -> .
    (57) ARRAY -> . [ NUMBER ] ARRAY
    =               shift and go to state 17
    (               reduce using rule 9 (emptyF1 -> .)
    ,               reduce using rule 56 (ARRAY -> .)
    ;               reduce using rule 56 (ARRAY -> .)
    [               shift and go to state 19

    emptyF1                        shift and go to state 16
    ARRAY                          shift and go to state 18

state 12

    (17) GLOBALASIG -> ID = . INSTR ;
    (38) INSTR -> . FCALL
    (39) INSTR -> . OROP
    (40) INSTR -> . ASIG
    (41) FCALL -> . ID ( FARGS )
    (61) OROP -> . ANDOP
    (62) OROP -> . OROP ORSIMB ANDOP
    (60) ASIG -> . ID = INSTR
    (63) ANDOP -> . NOTOP
    (64) ANDOP -> . ANDOP ANDSIMB NOTOP
    (65) NOTOP -> . COMPOP
    (66) NOTOP -> . ! NOTOP
    (67) COMPOP -> . ADDOP
    (68) COMPOP -> . COMPOP COMPSIMB ADDOP
    (69) ADDOP -> . PRODOP
    (70) ADDOP -> . ADDOP - PRODOP
    (71) ADDOP -> . ADDOP + PRODOP
    (72) PRODOP -> . PAROP
    (73) PRODOP -> . PRODOP / PAROP
    (74) PRODOP -> . PRODOP * PAROP
    (75) PAROP -> . VAL
    (76) PAROP -> . ( OROP )
    (77) VAL -> . REFERENCE
    (78) VAL -> . ID
    (79) VAL -> . CHAR
    (80) VAL -> . NUMBERF
    (81) VAL -> . NUMBER
    (82) REFERENCE -> . & ID
    ID              shift and go to state 20
    !               shift and go to state 29
    (               shift and go to state 25
    CHAR            shift and go to state 35
    NUMBERF         shift and go to state 36
    NUMBER          shift and go to state 37
    &               shift and go to state 38

    INSTR                          shift and go to state 21
    FCALL                          shift and go to state 22
    OROP                           shift and go to state 23
    ASIG                           shift and go to state 24
    ANDOP                          shift and go to state 26
    NOTOP                          shift and go to state 27
    COMPOP                         shift and go to state 28
    ADDOP                          shift and go to state 30
    PRODOP                         shift and go to state 31
    PAROP                          shift and go to state 32
    VAL                            shift and go to state 33
    REFERENCE                      shift and go to state 34

state 13

    (7) FUNCTION -> VOIDTYPE ID . emptyF1 ( ARGS ) { LINES } emptyF2
    (9) emptyF1 -> .
    (               reduce using rule 9 (emptyF1 -> .)

    emptyF1                        shift and go to state 39

state 14

    (1) S -> S2 TYPE emptymain MAIN . ( ) { LINES }
    (               shift and go to state 40


state 15

    (11) GLOBALDECLAR -> TYPE ELEM emptyglobal . emptyaux RESTGLOBAL ;
    (16) emptyaux -> .
    ,               reduce using rule 16 (emptyaux -> .)
    ;               reduce using rule 16 (emptyaux -> .)

    emptyaux                       shift and go to state 41

state 16

    (8) FUNCTION -> TYPE ID emptyF1 . ( ARGS ) { LINES } emptyF2
    (               shift and go to state 42


state 17

    (54) ELEM -> ID = . INSTR
    (38) INSTR -> . FCALL
    (39) INSTR -> . OROP
    (40) INSTR -> . ASIG
    (41) FCALL -> . ID ( FARGS )
    (61) OROP -> . ANDOP
    (62) OROP -> . OROP ORSIMB ANDOP
    (60) ASIG -> . ID = INSTR
    (63) ANDOP -> . NOTOP
    (64) ANDOP -> . ANDOP ANDSIMB NOTOP
    (65) NOTOP -> . COMPOP
    (66) NOTOP -> . ! NOTOP
    (67) COMPOP -> . ADDOP
    (68) COMPOP -> . COMPOP COMPSIMB ADDOP
    (69) ADDOP -> . PRODOP
    (70) ADDOP -> . ADDOP - PRODOP
    (71) ADDOP -> . ADDOP + PRODOP
    (72) PRODOP -> . PAROP
    (73) PRODOP -> . PRODOP / PAROP
    (74) PRODOP -> . PRODOP * PAROP
    (75) PAROP -> . VAL
    (76) PAROP -> . ( OROP )
    (77) VAL -> . REFERENCE
    (78) VAL -> . ID
    (79) VAL -> . CHAR
    (80) VAL -> . NUMBERF
    (81) VAL -> . NUMBER
    (82) REFERENCE -> . & ID
    ID              shift and go to state 20
    !               shift and go to state 29
    (               shift and go to state 25
    CHAR            shift and go to state 35
    NUMBERF         shift and go to state 36
    NUMBER          shift and go to state 37
    &               shift and go to state 38

    INSTR                          shift and go to state 43
    FCALL                          shift and go to state 22
    OROP                           shift and go to state 23
    ASIG                           shift and go to state 24
    ANDOP                          shift and go to state 26
    NOTOP                          shift and go to state 27
    COMPOP                         shift and go to state 28
    ADDOP                          shift and go to state 30
    PRODOP                         shift and go to state 31
    PAROP                          shift and go to state 32
    VAL                            shift and go to state 33
    REFERENCE                      shift and go to state 34

state 18

    (55) ELEM -> ID ARRAY .
    ,               reduce using rule 55 (ELEM -> ID ARRAY .)
    ;               reduce using rule 55 (ELEM -> ID ARRAY .)


state 19

    (57) ARRAY -> [ . NUMBER ] ARRAY
    NUMBER          shift and go to state 44


state 20

    (41) FCALL -> ID . ( FARGS )
    (60) ASIG -> ID . = INSTR
    (78) VAL -> ID .
    (               shift and go to state 45
    =               shift and go to state 46
    /               reduce using rule 78 (VAL -> ID .)
    *               reduce using rule 78 (VAL -> ID .)
    -               reduce using rule 78 (VAL -> ID .)
    +               reduce using rule 78 (VAL -> ID .)
    COMPSIMB        reduce using rule 78 (VAL -> ID .)
    ANDSIMB         reduce using rule 78 (VAL -> ID .)
    ORSIMB          reduce using rule 78 (VAL -> ID .)
    ;               reduce using rule 78 (VAL -> ID .)
    ,               reduce using rule 78 (VAL -> ID .)
    )               reduce using rule 78 (VAL -> ID .)


state 21

    (17) GLOBALASIG -> ID = INSTR . ;
    ;               shift and go to state 47


state 22

    (38) INSTR -> FCALL .
    ;               reduce using rule 38 (INSTR -> FCALL .)
    ,               reduce using rule 38 (INSTR -> FCALL .)
    )               reduce using rule 38 (INSTR -> FCALL .)


state 23

    (39) INSTR -> OROP .
    (62) OROP -> OROP . ORSIMB ANDOP
    ;               reduce using rule 39 (INSTR -> OROP .)
    ,               reduce using rule 39 (INSTR -> OROP .)
    )               reduce using rule 39 (INSTR -> OROP .)
    ORSIMB          shift and go to state 48


state 24

    (40) INSTR -> ASIG .
    ;               reduce using rule 40 (INSTR -> ASIG .)
    ,               reduce using rule 40 (INSTR -> ASIG .)
    )               reduce using rule 40 (INSTR -> ASIG .)


state 25

    (76) PAROP -> ( . OROP )
    (61) OROP -> . ANDOP
    (62) OROP -> . OROP ORSIMB ANDOP
    (63) ANDOP -> . NOTOP
    (64) ANDOP -> . ANDOP ANDSIMB NOTOP
    (65) NOTOP -> . COMPOP
    (66) NOTOP -> . ! NOTOP
    (67) COMPOP -> . ADDOP
    (68) COMPOP -> . COMPOP COMPSIMB ADDOP
    (69) ADDOP -> . PRODOP
    (70) ADDOP -> . ADDOP - PRODOP
    (71) ADDOP -> . ADDOP + PRODOP
    (72) PRODOP -> . PAROP
    (73) PRODOP -> . PRODOP / PAROP
    (74) PRODOP -> . PRODOP * PAROP
    (75) PAROP -> . VAL
    (76) PAROP -> . ( OROP )
    (77) VAL -> . REFERENCE
    (78) VAL -> . ID
    (79) VAL -> . CHAR
    (80) VAL -> . NUMBERF
    (81) VAL -> . NUMBER
    (82) REFERENCE -> . & ID
    !               shift and go to state 29
    (               shift and go to state 25
    ID              shift and go to state 50
    CHAR            shift and go to state 35
    NUMBERF         shift and go to state 36
    NUMBER          shift and go to state 37
    &               shift and go to state 38

    OROP                           shift and go to state 49
    ANDOP                          shift and go to state 26
    NOTOP                          shift and go to state 27
    COMPOP                         shift and go to state 28
    ADDOP                          shift and go to state 30
    PRODOP                         shift and go to state 31
    PAROP                          shift and go to state 32
    VAL                            shift and go to state 33
    REFERENCE                      shift and go to state 34

state 26

    (61) OROP -> ANDOP .
    (64) ANDOP -> ANDOP . ANDSIMB NOTOP
    ORSIMB          reduce using rule 61 (OROP -> ANDOP .)
    ;               reduce using rule 61 (OROP -> ANDOP .)
    ,               reduce using rule 61 (OROP -> ANDOP .)
    )               reduce using rule 61 (OROP -> ANDOP .)
    ANDSIMB         shift and go to state 51


state 27

    (63) ANDOP -> NOTOP .
    ANDSIMB         reduce using rule 63 (ANDOP -> NOTOP .)
    ORSIMB          reduce using rule 63 (ANDOP -> NOTOP .)
    ;               reduce using rule 63 (ANDOP -> NOTOP .)
    ,               reduce using rule 63 (ANDOP -> NOTOP .)
    )               reduce using rule 63 (ANDOP -> NOTOP .)


state 28

    (65) NOTOP -> COMPOP .
    (68) COMPOP -> COMPOP . COMPSIMB ADDOP
    ANDSIMB         reduce using rule 65 (NOTOP -> COMPOP .)
    ORSIMB          reduce using rule 65 (NOTOP -> COMPOP .)
    ;               reduce using rule 65 (NOTOP -> COMPOP .)
    ,               reduce using rule 65 (NOTOP -> COMPOP .)
    )               reduce using rule 65 (NOTOP -> COMPOP .)
    COMPSIMB        shift and go to state 52


state 29

    (66) NOTOP -> ! . NOTOP
    (65) NOTOP -> . COMPOP
    (66) NOTOP -> . ! NOTOP
    (67) COMPOP -> . ADDOP
    (68) COMPOP -> . COMPOP COMPSIMB ADDOP
    (69) ADDOP -> . PRODOP
    (70) ADDOP -> . ADDOP - PRODOP
    (71) ADDOP -> . ADDOP + PRODOP
    (72) PRODOP -> . PAROP
    (73) PRODOP -> . PRODOP / PAROP
    (74) PRODOP -> . PRODOP * PAROP
    (75) PAROP -> . VAL
    (76) PAROP -> . ( OROP )
    (77) VAL -> . REFERENCE
    (78) VAL -> . ID
    (79) VAL -> . CHAR
    (80) VAL -> . NUMBERF
    (81) VAL -> . NUMBER
    (82) REFERENCE -> . & ID
    !               shift and go to state 29
    (               shift and go to state 25
    ID              shift and go to state 50
    CHAR            shift and go to state 35
    NUMBERF         shift and go to state 36
    NUMBER          shift and go to state 37
    &               shift and go to state 38

    NOTOP                          shift and go to state 53
    COMPOP                         shift and go to state 28
    ADDOP                          shift and go to state 30
    PRODOP                         shift and go to state 31
    PAROP                          shift and go to state 32
    VAL                            shift and go to state 33
    REFERENCE                      shift and go to state 34

state 30

    (67) COMPOP -> ADDOP .
    (70) ADDOP -> ADDOP . - PRODOP
    (71) ADDOP -> ADDOP . + PRODOP
    COMPSIMB        reduce using rule 67 (COMPOP -> ADDOP .)
    ANDSIMB         reduce using rule 67 (COMPOP -> ADDOP .)
    ORSIMB          reduce using rule 67 (COMPOP -> ADDOP .)
    ;               reduce using rule 67 (COMPOP -> ADDOP .)
    ,               reduce using rule 67 (COMPOP -> ADDOP .)
    )               reduce using rule 67 (COMPOP -> ADDOP .)
    -               shift and go to state 54
    +               shift and go to state 55


state 31

    (69) ADDOP -> PRODOP .
    (73) PRODOP -> PRODOP . / PAROP
    (74) PRODOP -> PRODOP . * PAROP
    -               reduce using rule 69 (ADDOP -> PRODOP .)
    +               reduce using rule 69 (ADDOP -> PRODOP .)
    COMPSIMB        reduce using rule 69 (ADDOP -> PRODOP .)
    ANDSIMB         reduce using rule 69 (ADDOP -> PRODOP .)
    ORSIMB          reduce using rule 69 (ADDOP -> PRODOP .)
    ;               reduce using rule 69 (ADDOP -> PRODOP .)
    ,               reduce using rule 69 (ADDOP -> PRODOP .)
    )               reduce using rule 69 (ADDOP -> PRODOP .)
    /               shift and go to state 56
    *               shift and go to state 57


state 32

    (72) PRODOP -> PAROP .
    /               reduce using rule 72 (PRODOP -> PAROP .)
    *               reduce using rule 72 (PRODOP -> PAROP .)
    -               reduce using rule 72 (PRODOP -> PAROP .)
    +               reduce using rule 72 (PRODOP -> PAROP .)
    COMPSIMB        reduce using rule 72 (PRODOP -> PAROP .)
    ANDSIMB         reduce using rule 72 (PRODOP -> PAROP .)
    ORSIMB          reduce using rule 72 (PRODOP -> PAROP .)
    ;               reduce using rule 72 (PRODOP -> PAROP .)
    ,               reduce using rule 72 (PRODOP -> PAROP .)
    )               reduce using rule 72 (PRODOP -> PAROP .)


state 33

    (75) PAROP -> VAL .
    /               reduce using rule 75 (PAROP -> VAL .)
    *               reduce using rule 75 (PAROP -> VAL .)
    -               reduce using rule 75 (PAROP -> VAL .)
    +               reduce using rule 75 (PAROP -> VAL .)
    COMPSIMB        reduce using rule 75 (PAROP -> VAL .)
    ANDSIMB         reduce using rule 75 (PAROP -> VAL .)
    ORSIMB          reduce using rule 75 (PAROP -> VAL .)
    ;               reduce using rule 75 (PAROP -> VAL .)
    ,               reduce using rule 75 (PAROP -> VAL .)
    )               reduce using rule 75 (PAROP -> VAL .)


state 34

    (77) VAL -> REFERENCE .
    /               reduce using rule 77 (VAL -> REFERENCE .)
    *               reduce using rule 77 (VAL -> REFERENCE .)
    -               reduce using rule 77 (VAL -> REFERENCE .)
    +               reduce using rule 77 (VAL -> REFERENCE .)
    COMPSIMB        reduce using rule 77 (VAL -> REFERENCE .)
    ANDSIMB         reduce using rule 77 (VAL -> REFERENCE .)
    ORSIMB          reduce using rule 77 (VAL -> REFERENCE .)
    ;               reduce using rule 77 (VAL -> REFERENCE .)
    ,               reduce using rule 77 (VAL -> REFERENCE .)
    )               reduce using rule 77 (VAL -> REFERENCE .)


state 35

    (79) VAL -> CHAR .
    /               reduce using rule 79 (VAL -> CHAR .)
    *               reduce using rule 79 (VAL -> CHAR .)
    -               reduce using rule 79 (VAL -> CHAR .)
    +               reduce using rule 79 (VAL -> CHAR .)
    COMPSIMB        reduce using rule 79 (VAL -> CHAR .)
    ANDSIMB         reduce using rule 79 (VAL -> CHAR .)
    ORSIMB          reduce using rule 79 (VAL -> CHAR .)
    ;               reduce using rule 79 (VAL -> CHAR .)
    ,               reduce using rule 79 (VAL -> CHAR .)
    )               reduce using rule 79 (VAL -> CHAR .)


state 36

    (80) VAL -> NUMBERF .
    /               reduce using rule 80 (VAL -> NUMBERF .)
    *               reduce using rule 80 (VAL -> NUMBERF .)
    -               reduce using rule 80 (VAL -> NUMBERF .)
    +               reduce using rule 80 (VAL -> NUMBERF .)
    COMPSIMB        reduce using rule 80 (VAL -> NUMBERF .)
    ANDSIMB         reduce using rule 80 (VAL -> NUMBERF .)
    ORSIMB          reduce using rule 80 (VAL -> NUMBERF .)
    ;               reduce using rule 80 (VAL -> NUMBERF .)
    ,               reduce using rule 80 (VAL -> NUMBERF .)
    )               reduce using rule 80 (VAL -> NUMBERF .)


state 37

    (81) VAL -> NUMBER .
    /               reduce using rule 81 (VAL -> NUMBER .)
    *               reduce using rule 81 (VAL -> NUMBER .)
    -               reduce using rule 81 (VAL -> NUMBER .)
    +               reduce using rule 81 (VAL -> NUMBER .)
    COMPSIMB        reduce using rule 81 (VAL -> NUMBER .)
    ANDSIMB         reduce using rule 81 (VAL -> NUMBER .)
    ORSIMB          reduce using rule 81 (VAL -> NUMBER .)
    ;               reduce using rule 81 (VAL -> NUMBER .)
    ,               reduce using rule 81 (VAL -> NUMBER .)
    )               reduce using rule 81 (VAL -> NUMBER .)


state 38

    (82) REFERENCE -> & . ID
    ID              shift and go to state 58


state 39

    (7) FUNCTION -> VOIDTYPE ID emptyF1 . ( ARGS ) { LINES } emptyF2
    (               shift and go to state 59


state 40

    (1) S -> S2 TYPE emptymain MAIN ( . ) { LINES }
    )               shift and go to state 60


state 41

    (11) GLOBALDECLAR -> TYPE ELEM emptyglobal emptyaux . RESTGLOBAL ;
    (12) RESTGLOBAL -> .
    (13) RESTGLOBAL -> . , emptyglobal2 ELEM RESTGLOBAL
    ;               reduce using rule 12 (RESTGLOBAL -> .)
    ,               shift and go to state 62

    RESTGLOBAL                     shift and go to state 61

state 42

    (8) FUNCTION -> TYPE ID emptyF1 ( . ARGS ) { LINES } emptyF2
    (18) ARGS -> .
    (19) ARGS -> . TYPE ARG RARGS
    )               reduce using rule 18 (ARGS -> .)
    TYPE            shift and go to state 63

    ARGS                           shift and go to state 64

state 43

    (54) ELEM -> ID = INSTR .
    ,               reduce using rule 54 (ELEM -> ID = INSTR .)
    ;               reduce using rule 54 (ELEM -> ID = INSTR .)


state 44

    (57) ARRAY -> [ NUMBER . ] ARRAY
    ]               shift and go to state 65


state 45

    (41) FCALL -> ID ( . FARGS )
    (42) FARGS -> .
    (43) FARGS -> . FARG RFARGS
    (46) FARG -> . * POINTERS ID
    (47) FARG -> . VAL
    (77) VAL -> . REFERENCE
    (78) VAL -> . ID
    (79) VAL -> . CHAR
    (80) VAL -> . NUMBERF
    (81) VAL -> . NUMBER
    (82) REFERENCE -> . & ID
    )               reduce using rule 42 (FARGS -> .)
    *               shift and go to state 68
    ID              shift and go to state 50
    CHAR            shift and go to state 35
    NUMBERF         shift and go to state 36
    NUMBER          shift and go to state 37
    &               shift and go to state 38

    FARGS                          shift and go to state 66
    FARG                           shift and go to state 67
    VAL                            shift and go to state 69
    REFERENCE                      shift and go to state 34

state 46

    (60) ASIG -> ID = . INSTR
    (38) INSTR -> . FCALL
    (39) INSTR -> . OROP
    (40) INSTR -> . ASIG
    (41) FCALL -> . ID ( FARGS )
    (61) OROP -> . ANDOP
    (62) OROP -> . OROP ORSIMB ANDOP
    (60) ASIG -> . ID = INSTR
    (63) ANDOP -> . NOTOP
    (64) ANDOP -> . ANDOP ANDSIMB NOTOP
    (65) NOTOP -> . COMPOP
    (66) NOTOP -> . ! NOTOP
    (67) COMPOP -> . ADDOP
    (68) COMPOP -> . COMPOP COMPSIMB ADDOP
    (69) ADDOP -> . PRODOP
    (70) ADDOP -> . ADDOP - PRODOP
    (71) ADDOP -> . ADDOP + PRODOP
    (72) PRODOP -> . PAROP
    (73) PRODOP -> . PRODOP / PAROP
    (74) PRODOP -> . PRODOP * PAROP
    (75) PAROP -> . VAL
    (76) PAROP -> . ( OROP )
    (77) VAL -> . REFERENCE
    (78) VAL -> . ID
    (79) VAL -> . CHAR
    (80) VAL -> . NUMBERF
    (81) VAL -> . NUMBER
    (82) REFERENCE -> . & ID
    ID              shift and go to state 20
    !               shift and go to state 29
    (               shift and go to state 25
    CHAR            shift and go to state 35
    NUMBERF         shift and go to state 36
    NUMBER          shift and go to state 37
    &               shift and go to state 38

    INSTR                          shift and go to state 70
    FCALL                          shift and go to state 22
    OROP                           shift and go to state 23
    ASIG                           shift and go to state 24
    ANDOP                          shift and go to state 26
    NOTOP                          shift and go to state 27
    COMPOP                         shift and go to state 28
    ADDOP                          shift and go to state 30
    PRODOP                         shift and go to state 31
    PAROP                          shift and go to state 32
    VAL                            shift and go to state 33
    REFERENCE                      shift and go to state 34

state 47

    (17) GLOBALASIG -> ID = INSTR ; .
    TYPE            reduce using rule 17 (GLOBALASIG -> ID = INSTR ; .)
    ID              reduce using rule 17 (GLOBALASIG -> ID = INSTR ; .)
    VOIDTYPE        reduce using rule 17 (GLOBALASIG -> ID = INSTR ; .)


state 48

    (62) OROP -> OROP ORSIMB . ANDOP
    (63) ANDOP -> . NOTOP
    (64) ANDOP -> . ANDOP ANDSIMB NOTOP
    (65) NOTOP -> . COMPOP
    (66) NOTOP -> . ! NOTOP
    (67) COMPOP -> . ADDOP
    (68) COMPOP -> . COMPOP COMPSIMB ADDOP
    (69) ADDOP -> . PRODOP
    (70) ADDOP -> . ADDOP - PRODOP
    (71) ADDOP -> . ADDOP + PRODOP
    (72) PRODOP -> . PAROP
    (73) PRODOP -> . PRODOP / PAROP
    (74) PRODOP -> . PRODOP * PAROP
    (75) PAROP -> . VAL
    (76) PAROP -> . ( OROP )
    (77) VAL -> . REFERENCE
    (78) VAL -> . ID
    (79) VAL -> . CHAR
    (80) VAL -> . NUMBERF
    (81) VAL -> . NUMBER
    (82) REFERENCE -> . & ID
    !               shift and go to state 29
    (               shift and go to state 25
    ID              shift and go to state 50
    CHAR            shift and go to state 35
    NUMBERF         shift and go to state 36
    NUMBER          shift and go to state 37
    &               shift and go to state 38

    ANDOP                          shift and go to state 71
    NOTOP                          shift and go to state 27
    COMPOP                         shift and go to state 28
    ADDOP                          shift and go to state 30
    PRODOP                         shift and go to state 31
    PAROP                          shift and go to state 32
    VAL                            shift and go to state 33
    REFERENCE                      shift and go to state 34

state 49

    (76) PAROP -> ( OROP . )
    (62) OROP -> OROP . ORSIMB ANDOP
    )               shift and go to state 72
    ORSIMB          shift and go to state 48


state 50

    (78) VAL -> ID .
    /               reduce using rule 78 (VAL -> ID .)
    *               reduce using rule 78 (VAL -> ID .)
    -               reduce using rule 78 (VAL -> ID .)
    +               reduce using rule 78 (VAL -> ID .)
    COMPSIMB        reduce using rule 78 (VAL -> ID .)
    ANDSIMB         reduce using rule 78 (VAL -> ID .)
    )               reduce using rule 78 (VAL -> ID .)
    ORSIMB          reduce using rule 78 (VAL -> ID .)
    ;               reduce using rule 78 (VAL -> ID .)
    ,               reduce using rule 78 (VAL -> ID .)


state 51

    (64) ANDOP -> ANDOP ANDSIMB . NOTOP
    (65) NOTOP -> . COMPOP
    (66) NOTOP -> . ! NOTOP
    (67) COMPOP -> . ADDOP
    (68) COMPOP -> . COMPOP COMPSIMB ADDOP
    (69) ADDOP -> . PRODOP
    (70) ADDOP -> . ADDOP - PRODOP
    (71) ADDOP -> . ADDOP + PRODOP
    (72) PRODOP -> . PAROP
    (73) PRODOP -> . PRODOP / PAROP
    (74) PRODOP -> . PRODOP * PAROP
    (75) PAROP -> . VAL
    (76) PAROP -> . ( OROP )
    (77) VAL -> . REFERENCE
    (78) VAL -> . ID
    (79) VAL -> . CHAR
    (80) VAL -> . NUMBERF
    (81) VAL -> . NUMBER
    (82) REFERENCE -> . & ID
    !               shift and go to state 29
    (               shift and go to state 25
    ID              shift and go to state 50
    CHAR            shift and go to state 35
    NUMBERF         shift and go to state 36
    NUMBER          shift and go to state 37
    &               shift and go to state 38

    NOTOP                          shift and go to state 73
    COMPOP                         shift and go to state 28
    ADDOP                          shift and go to state 30
    PRODOP                         shift and go to state 31
    PAROP                          shift and go to state 32
    VAL                            shift and go to state 33
    REFERENCE                      shift and go to state 34

state 52

    (68) COMPOP -> COMPOP COMPSIMB . ADDOP
    (69) ADDOP -> . PRODOP
    (70) ADDOP -> . ADDOP - PRODOP
    (71) ADDOP -> . ADDOP + PRODOP
    (72) PRODOP -> . PAROP
    (73) PRODOP -> . PRODOP / PAROP
    (74) PRODOP -> . PRODOP * PAROP
    (75) PAROP -> . VAL
    (76) PAROP -> . ( OROP )
    (77) VAL -> . REFERENCE
    (78) VAL -> . ID
    (79) VAL -> . CHAR
    (80) VAL -> . NUMBERF
    (81) VAL -> . NUMBER
    (82) REFERENCE -> . & ID
    (               shift and go to state 25
    ID              shift and go to state 50
    CHAR            shift and go to state 35
    NUMBERF         shift and go to state 36
    NUMBER          shift and go to state 37
    &               shift and go to state 38

    ADDOP                          shift and go to state 74
    PRODOP                         shift and go to state 31
    PAROP                          shift and go to state 32
    VAL                            shift and go to state 33
    REFERENCE                      shift and go to state 34

state 53

    (66) NOTOP -> ! NOTOP .
    ANDSIMB         reduce using rule 66 (NOTOP -> ! NOTOP .)
    ORSIMB          reduce using rule 66 (NOTOP -> ! NOTOP .)
    ;               reduce using rule 66 (NOTOP -> ! NOTOP .)
    ,               reduce using rule 66 (NOTOP -> ! NOTOP .)
    )               reduce using rule 66 (NOTOP -> ! NOTOP .)


state 54

    (70) ADDOP -> ADDOP - . PRODOP
    (72) PRODOP -> . PAROP
    (73) PRODOP -> . PRODOP / PAROP
    (74) PRODOP -> . PRODOP * PAROP
    (75) PAROP -> . VAL
    (76) PAROP -> . ( OROP )
    (77) VAL -> . REFERENCE
    (78) VAL -> . ID
    (79) VAL -> . CHAR
    (80) VAL -> . NUMBERF
    (81) VAL -> . NUMBER
    (82) REFERENCE -> . & ID
    (               shift and go to state 25
    ID              shift and go to state 50
    CHAR            shift and go to state 35
    NUMBERF         shift and go to state 36
    NUMBER          shift and go to state 37
    &               shift and go to state 38

    PRODOP                         shift and go to state 75
    PAROP                          shift and go to state 32
    VAL                            shift and go to state 33
    REFERENCE                      shift and go to state 34

state 55

    (71) ADDOP -> ADDOP + . PRODOP
    (72) PRODOP -> . PAROP
    (73) PRODOP -> . PRODOP / PAROP
    (74) PRODOP -> . PRODOP * PAROP
    (75) PAROP -> . VAL
    (76) PAROP -> . ( OROP )
    (77) VAL -> . REFERENCE
    (78) VAL -> . ID
    (79) VAL -> . CHAR
    (80) VAL -> . NUMBERF
    (81) VAL -> . NUMBER
    (82) REFERENCE -> . & ID
    (               shift and go to state 25
    ID              shift and go to state 50
    CHAR            shift and go to state 35
    NUMBERF         shift and go to state 36
    NUMBER          shift and go to state 37
    &               shift and go to state 38

    PRODOP                         shift and go to state 76
    PAROP                          shift and go to state 32
    VAL                            shift and go to state 33
    REFERENCE                      shift and go to state 34

state 56

    (73) PRODOP -> PRODOP / . PAROP
    (75) PAROP -> . VAL
    (76) PAROP -> . ( OROP )
    (77) VAL -> . REFERENCE
    (78) VAL -> . ID
    (79) VAL -> . CHAR
    (80) VAL -> . NUMBERF
    (81) VAL -> . NUMBER
    (82) REFERENCE -> . & ID
    (               shift and go to state 25
    ID              shift and go to state 50
    CHAR            shift and go to state 35
    NUMBERF         shift and go to state 36
    NUMBER          shift and go to state 37
    &               shift and go to state 38

    PAROP                          shift and go to state 77
    VAL                            shift and go to state 33
    REFERENCE                      shift and go to state 34

state 57

    (74) PRODOP -> PRODOP * . PAROP
    (75) PAROP -> . VAL
    (76) PAROP -> . ( OROP )
    (77) VAL -> . REFERENCE
    (78) VAL -> . ID
    (79) VAL -> . CHAR
    (80) VAL -> . NUMBERF
    (81) VAL -> . NUMBER
    (82) REFERENCE -> . & ID
    (               shift and go to state 25
    ID              shift and go to state 50
    CHAR            shift and go to state 35
    NUMBERF         shift and go to state 36
    NUMBER          shift and go to state 37
    &               shift and go to state 38

    PAROP                          shift and go to state 78
    VAL                            shift and go to state 33
    REFERENCE                      shift and go to state 34

state 58

    (82) REFERENCE -> & ID .
    /               reduce using rule 82 (REFERENCE -> & ID .)
    *               reduce using rule 82 (REFERENCE -> & ID .)
    -               reduce using rule 82 (REFERENCE -> & ID .)
    +               reduce using rule 82 (REFERENCE -> & ID .)
    COMPSIMB        reduce using rule 82 (REFERENCE -> & ID .)
    ANDSIMB         reduce using rule 82 (REFERENCE -> & ID .)
    ORSIMB          reduce using rule 82 (REFERENCE -> & ID .)
    ;               reduce using rule 82 (REFERENCE -> & ID .)
    ,               reduce using rule 82 (REFERENCE -> & ID .)
    )               reduce using rule 82 (REFERENCE -> & ID .)


state 59

    (7) FUNCTION -> VOIDTYPE ID emptyF1 ( . ARGS ) { LINES } emptyF2
    (18) ARGS -> .
    (19) ARGS -> . TYPE ARG RARGS
    )               reduce using rule 18 (ARGS -> .)
    TYPE            shift and go to state 63

    ARGS                           shift and go to state 79

state 60

    (1) S -> S2 TYPE emptymain MAIN ( ) . { LINES }
    {               shift and go to state 80


state 61

    (11) GLOBALDECLAR -> TYPE ELEM emptyglobal emptyaux RESTGLOBAL . ;
    ;               shift and go to state 81


state 62

    (13) RESTGLOBAL -> , . emptyglobal2 ELEM RESTGLOBAL
    (15) emptyglobal2 -> .
    ID              reduce using rule 15 (emptyglobal2 -> .)

    emptyglobal2                   shift and go to state 82

state 63

    (19) ARGS -> TYPE . ARG RARGS
    (22) ARG -> . ID
    ID              shift and go to state 84

    ARG                            shift and go to state 83

state 64

    (8) FUNCTION -> TYPE ID emptyF1 ( ARGS . ) { LINES } emptyF2
    )               shift and go to state 85


state 65

    (57) ARRAY -> [ NUMBER ] . ARRAY
    (56) ARRAY -> .
    (57) ARRAY -> . [ NUMBER ] ARRAY
    ,               reduce using rule 56 (ARRAY -> .)
    ;               reduce using rule 56 (ARRAY -> .)
    [               shift and go to state 19

    ARRAY                          shift and go to state 86

state 66

    (41) FCALL -> ID ( FARGS . )
    )               shift and go to state 87


state 67

    (43) FARGS -> FARG . RFARGS
    (44) RFARGS -> .
    (45) RFARGS -> . , FARG RFARGS
    )               reduce using rule 44 (RFARGS -> .)
    ,               shift and go to state 89

    RFARGS                         shift and go to state 88

state 68

    (46) FARG -> * . POINTERS ID
    (49) POINTERS -> .
    (50) POINTERS -> . * POINTERS
    ID              reduce using rule 49 (POINTERS -> .)
    *               shift and go to state 90

    POINTERS                       shift and go to state 91

state 69

    (47) FARG -> VAL .
    ,               reduce using rule 47 (FARG -> VAL .)
    )               reduce using rule 47 (FARG -> VAL .)


state 70

    (60) ASIG -> ID = INSTR .
    ;               reduce using rule 60 (ASIG -> ID = INSTR .)
    ,               reduce using rule 60 (ASIG -> ID = INSTR .)
    )               reduce using rule 60 (ASIG -> ID = INSTR .)


state 71

    (62) OROP -> OROP ORSIMB ANDOP .
    (64) ANDOP -> ANDOP . ANDSIMB NOTOP
    ORSIMB          reduce using rule 62 (OROP -> OROP ORSIMB ANDOP .)
    ;               reduce using rule 62 (OROP -> OROP ORSIMB ANDOP .)
    ,               reduce using rule 62 (OROP -> OROP ORSIMB ANDOP .)
    )               reduce using rule 62 (OROP -> OROP ORSIMB ANDOP .)
    ANDSIMB         shift and go to state 51


state 72

    (76) PAROP -> ( OROP ) .
    /               reduce using rule 76 (PAROP -> ( OROP ) .)
    *               reduce using rule 76 (PAROP -> ( OROP ) .)
    -               reduce using rule 76 (PAROP -> ( OROP ) .)
    +               reduce using rule 76 (PAROP -> ( OROP ) .)
    COMPSIMB        reduce using rule 76 (PAROP -> ( OROP ) .)
    ANDSIMB         reduce using rule 76 (PAROP -> ( OROP ) .)
    ORSIMB          reduce using rule 76 (PAROP -> ( OROP ) .)
    ;               reduce using rule 76 (PAROP -> ( OROP ) .)
    ,               reduce using rule 76 (PAROP -> ( OROP ) .)
    )               reduce using rule 76 (PAROP -> ( OROP ) .)


state 73

    (64) ANDOP -> ANDOP ANDSIMB NOTOP .
    ANDSIMB         reduce using rule 64 (ANDOP -> ANDOP ANDSIMB NOTOP .)
    ORSIMB          reduce using rule 64 (ANDOP -> ANDOP ANDSIMB NOTOP .)
    ;               reduce using rule 64 (ANDOP -> ANDOP ANDSIMB NOTOP .)
    ,               reduce using rule 64 (ANDOP -> ANDOP ANDSIMB NOTOP .)
    )               reduce using rule 64 (ANDOP -> ANDOP ANDSIMB NOTOP .)


state 74

    (68) COMPOP -> COMPOP COMPSIMB ADDOP .
    (70) ADDOP -> ADDOP . - PRODOP
    (71) ADDOP -> ADDOP . + PRODOP
    COMPSIMB        reduce using rule 68 (COMPOP -> COMPOP COMPSIMB ADDOP .)
    ANDSIMB         reduce using rule 68 (COMPOP -> COMPOP COMPSIMB ADDOP .)
    ORSIMB          reduce using rule 68 (COMPOP -> COMPOP COMPSIMB ADDOP .)
    ;               reduce using rule 68 (COMPOP -> COMPOP COMPSIMB ADDOP .)
    ,               reduce using rule 68 (COMPOP -> COMPOP COMPSIMB ADDOP .)
    )               reduce using rule 68 (COMPOP -> COMPOP COMPSIMB ADDOP .)
    -               shift and go to state 54
    +               shift and go to state 55


state 75

    (70) ADDOP -> ADDOP - PRODOP .
    (73) PRODOP -> PRODOP . / PAROP
    (74) PRODOP -> PRODOP . * PAROP
    -               reduce using rule 70 (ADDOP -> ADDOP - PRODOP .)
    +               reduce using rule 70 (ADDOP -> ADDOP - PRODOP .)
    COMPSIMB        reduce using rule 70 (ADDOP -> ADDOP - PRODOP .)
    ANDSIMB         reduce using rule 70 (ADDOP -> ADDOP - PRODOP .)
    ORSIMB          reduce using rule 70 (ADDOP -> ADDOP - PRODOP .)
    ;               reduce using rule 70 (ADDOP -> ADDOP - PRODOP .)
    ,               reduce using rule 70 (ADDOP -> ADDOP - PRODOP .)
    )               reduce using rule 70 (ADDOP -> ADDOP - PRODOP .)
    /               shift and go to state 56
    *               shift and go to state 57


state 76

    (71) ADDOP -> ADDOP + PRODOP .
    (73) PRODOP -> PRODOP . / PAROP
    (74) PRODOP -> PRODOP . * PAROP
    -               reduce using rule 71 (ADDOP -> ADDOP + PRODOP .)
    +               reduce using rule 71 (ADDOP -> ADDOP + PRODOP .)
    COMPSIMB        reduce using rule 71 (ADDOP -> ADDOP + PRODOP .)
    ANDSIMB         reduce using rule 71 (ADDOP -> ADDOP + PRODOP .)
    ORSIMB          reduce using rule 71 (ADDOP -> ADDOP + PRODOP .)
    ;               reduce using rule 71 (ADDOP -> ADDOP + PRODOP .)
    ,               reduce using rule 71 (ADDOP -> ADDOP + PRODOP .)
    )               reduce using rule 71 (ADDOP -> ADDOP + PRODOP .)
    /               shift and go to state 56
    *               shift and go to state 57


state 77

    (73) PRODOP -> PRODOP / PAROP .
    /               reduce using rule 73 (PRODOP -> PRODOP / PAROP .)
    *               reduce using rule 73 (PRODOP -> PRODOP / PAROP .)
    -               reduce using rule 73 (PRODOP -> PRODOP / PAROP .)
    +               reduce using rule 73 (PRODOP -> PRODOP / PAROP .)
    COMPSIMB        reduce using rule 73 (PRODOP -> PRODOP / PAROP .)
    ANDSIMB         reduce using rule 73 (PRODOP -> PRODOP / PAROP .)
    ORSIMB          reduce using rule 73 (PRODOP -> PRODOP / PAROP .)
    ;               reduce using rule 73 (PRODOP -> PRODOP / PAROP .)
    ,               reduce using rule 73 (PRODOP -> PRODOP / PAROP .)
    )               reduce using rule 73 (PRODOP -> PRODOP / PAROP .)


state 78

    (74) PRODOP -> PRODOP * PAROP .
    /               reduce using rule 74 (PRODOP -> PRODOP * PAROP .)
    *               reduce using rule 74 (PRODOP -> PRODOP * PAROP .)
    -               reduce using rule 74 (PRODOP -> PRODOP * PAROP .)
    +               reduce using rule 74 (PRODOP -> PRODOP * PAROP .)
    COMPSIMB        reduce using rule 74 (PRODOP -> PRODOP * PAROP .)
    ANDSIMB         reduce using rule 74 (PRODOP -> PRODOP * PAROP .)
    ORSIMB          reduce using rule 74 (PRODOP -> PRODOP * PAROP .)
    ;               reduce using rule 74 (PRODOP -> PRODOP * PAROP .)
    ,               reduce using rule 74 (PRODOP -> PRODOP * PAROP .)
    )               reduce using rule 74 (PRODOP -> PRODOP * PAROP .)


state 79

    (7) FUNCTION -> VOIDTYPE ID emptyF1 ( ARGS . ) { LINES } emptyF2
    )               shift and go to state 92


state 80

    (1) S -> S2 TYPE emptymain MAIN ( ) { . LINES }
    (23) LINES -> .
    (24) LINES -> . LINES LINE ;
    }               reduce using rule 23 (LINES -> .)
    IF              reduce using rule 23 (LINES -> .)
    PRINT           reduce using rule 23 (LINES -> .)
    SCANF           reduce using rule 23 (LINES -> .)
    TYPE            reduce using rule 23 (LINES -> .)
    ID              reduce using rule 23 (LINES -> .)
    !               reduce using rule 23 (LINES -> .)
    (               reduce using rule 23 (LINES -> .)
    CHAR            reduce using rule 23 (LINES -> .)
    NUMBERF         reduce using rule 23 (LINES -> .)
    NUMBER          reduce using rule 23 (LINES -> .)
    &               reduce using rule 23 (LINES -> .)

    LINES                          shift and go to state 93

state 81

    (11) GLOBALDECLAR -> TYPE ELEM emptyglobal emptyaux RESTGLOBAL ; .
    TYPE            reduce using rule 11 (GLOBALDECLAR -> TYPE ELEM emptyglobal emptyaux RESTGLOBAL ; .)
    ID              reduce using rule 11 (GLOBALDECLAR -> TYPE ELEM emptyglobal emptyaux RESTGLOBAL ; .)
    VOIDTYPE        reduce using rule 11 (GLOBALDECLAR -> TYPE ELEM emptyglobal emptyaux RESTGLOBAL ; .)


state 82

    (13) RESTGLOBAL -> , emptyglobal2 . ELEM RESTGLOBAL
    (54) ELEM -> . ID = INSTR
    (55) ELEM -> . ID ARRAY
    ID              shift and go to state 95

    ELEM                           shift and go to state 94

state 83

    (19) ARGS -> TYPE ARG . RARGS
    (20) RARGS -> .
    (21) RARGS -> . , TYPE ARG RARGS
    )               reduce using rule 20 (RARGS -> .)
    ,               shift and go to state 97

    RARGS                          shift and go to state 96

state 84

    (22) ARG -> ID .
    ,               reduce using rule 22 (ARG -> ID .)
    )               reduce using rule 22 (ARG -> ID .)


state 85

    (8) FUNCTION -> TYPE ID emptyF1 ( ARGS ) . { LINES } emptyF2
    {               shift and go to state 98


state 86

    (57) ARRAY -> [ NUMBER ] ARRAY .
    ,               reduce using rule 57 (ARRAY -> [ NUMBER ] ARRAY .)
    ;               reduce using rule 57 (ARRAY -> [ NUMBER ] ARRAY .)


state 87

    (41) FCALL -> ID ( FARGS ) .
    ;               reduce using rule 41 (FCALL -> ID ( FARGS ) .)
    ,               reduce using rule 41 (FCALL -> ID ( FARGS ) .)
    )               reduce using rule 41 (FCALL -> ID ( FARGS ) .)


state 88

    (43) FARGS -> FARG RFARGS .
    )               reduce using rule 43 (FARGS -> FARG RFARGS .)


state 89

    (45) RFARGS -> , . FARG RFARGS
    (46) FARG -> . * POINTERS ID
    (47) FARG -> . VAL
    (77) VAL -> . REFERENCE
    (78) VAL -> . ID
    (79) VAL -> . CHAR
    (80) VAL -> . NUMBERF
    (81) VAL -> . NUMBER
    (82) REFERENCE -> . & ID
    *               shift and go to state 68
    ID              shift and go to state 50
    CHAR            shift and go to state 35
    NUMBERF         shift and go to state 36
    NUMBER          shift and go to state 37
    &               shift and go to state 38

    FARG                           shift and go to state 99
    VAL                            shift and go to state 69
    REFERENCE                      shift and go to state 34

state 90

    (50) POINTERS -> * . POINTERS
    (49) POINTERS -> .
    (50) POINTERS -> . * POINTERS
    ID              reduce using rule 49 (POINTERS -> .)
    *               shift and go to state 90

    POINTERS                       shift and go to state 100

state 91

    (46) FARG -> * POINTERS . ID
    ID              shift and go to state 101


state 92

    (7) FUNCTION -> VOIDTYPE ID emptyF1 ( ARGS ) . { LINES } emptyF2
    {               shift and go to state 102


state 93

    (1) S -> S2 TYPE emptymain MAIN ( ) { LINES . }
    (24) LINES -> LINES . LINE ;
    (25) LINE -> . IF ( OROP ) emptyif { LINES } ELSERULE
    (26) LINE -> . PRINT ( STRING PRINTIDS )
    (27) LINE -> . SCANF ( STRING SCANIDS )
    (28) LINE -> . DECLAR
    (29) LINE -> . INSTR
    (48) DECLAR -> . TYPE POINTERS IDPRIMA
    (38) INSTR -> . FCALL
    (39) INSTR -> . OROP
    (40) INSTR -> . ASIG
    (41) FCALL -> . ID ( FARGS )
    (61) OROP -> . ANDOP
    (62) OROP -> . OROP ORSIMB ANDOP
    (60) ASIG -> . ID = INSTR
    (63) ANDOP -> . NOTOP
    (64) ANDOP -> . ANDOP ANDSIMB NOTOP
    (65) NOTOP -> . COMPOP
    (66) NOTOP -> . ! NOTOP
    (67) COMPOP -> . ADDOP
    (68) COMPOP -> . COMPOP COMPSIMB ADDOP
    (69) ADDOP -> . PRODOP
    (70) ADDOP -> . ADDOP - PRODOP
    (71) ADDOP -> . ADDOP + PRODOP
    (72) PRODOP -> . PAROP
    (73) PRODOP -> . PRODOP / PAROP
    (74) PRODOP -> . PRODOP * PAROP
    (75) PAROP -> . VAL
    (76) PAROP -> . ( OROP )
    (77) VAL -> . REFERENCE
    (78) VAL -> . ID
    (79) VAL -> . CHAR
    (80) VAL -> . NUMBERF
    (81) VAL -> . NUMBER
    (82) REFERENCE -> . & ID
    }               shift and go to state 104
    IF              shift and go to state 106
    PRINT           shift and go to state 107
    SCANF           shift and go to state 108
    TYPE            shift and go to state 103
    ID              shift and go to state 20
    !               shift and go to state 29
    (               shift and go to state 25
    CHAR            shift and go to state 35
    NUMBERF         shift and go to state 36
    NUMBER          shift and go to state 37
    &               shift and go to state 38

    LINE                           shift and go to state 105
    OROP                           shift and go to state 23
    DECLAR                         shift and go to state 109
    INSTR                          shift and go to state 110
    FCALL                          shift and go to state 22
    ASIG                           shift and go to state 24
    ANDOP                          shift and go to state 26
    NOTOP                          shift and go to state 27
    COMPOP                         shift and go to state 28
    ADDOP                          shift and go to state 30
    PRODOP                         shift and go to state 31
    PAROP                          shift and go to state 32
    VAL                            shift and go to state 33
    REFERENCE                      shift and go to state 34

state 94

    (13) RESTGLOBAL -> , emptyglobal2 ELEM . RESTGLOBAL
    (12) RESTGLOBAL -> .
    (13) RESTGLOBAL -> . , emptyglobal2 ELEM RESTGLOBAL
    ;               reduce using rule 12 (RESTGLOBAL -> .)
    ,               shift and go to state 62

    RESTGLOBAL                     shift and go to state 111

state 95

    (54) ELEM -> ID . = INSTR
    (55) ELEM -> ID . ARRAY
    (56) ARRAY -> .
    (57) ARRAY -> . [ NUMBER ] ARRAY
    =               shift and go to state 17
    ,               reduce using rule 56 (ARRAY -> .)
    ;               reduce using rule 56 (ARRAY -> .)
    [               shift and go to state 19

    ARRAY                          shift and go to state 18

state 96

    (19) ARGS -> TYPE ARG RARGS .
    )               reduce using rule 19 (ARGS -> TYPE ARG RARGS .)


state 97

    (21) RARGS -> , . TYPE ARG RARGS
    TYPE            shift and go to state 112


state 98

    (8) FUNCTION -> TYPE ID emptyF1 ( ARGS ) { . LINES } emptyF2
    (23) LINES -> .
    (24) LINES -> . LINES LINE ;
    }               reduce using rule 23 (LINES -> .)
    IF              reduce using rule 23 (LINES -> .)
    PRINT           reduce using rule 23 (LINES -> .)
    SCANF           reduce using rule 23 (LINES -> .)
    TYPE            reduce using rule 23 (LINES -> .)
    ID              reduce using rule 23 (LINES -> .)
    !               reduce using rule 23 (LINES -> .)
    (               reduce using rule 23 (LINES -> .)
    CHAR            reduce using rule 23 (LINES -> .)
    NUMBERF         reduce using rule 23 (LINES -> .)
    NUMBER          reduce using rule 23 (LINES -> .)
    &               reduce using rule 23 (LINES -> .)

    LINES                          shift and go to state 113

state 99

    (45) RFARGS -> , FARG . RFARGS
    (44) RFARGS -> .
    (45) RFARGS -> . , FARG RFARGS
    )               reduce using rule 44 (RFARGS -> .)
    ,               shift and go to state 89

    RFARGS                         shift and go to state 114

state 100

    (50) POINTERS -> * POINTERS .
    ID              reduce using rule 50 (POINTERS -> * POINTERS .)


state 101

    (46) FARG -> * POINTERS ID .
    ,               reduce using rule 46 (FARG -> * POINTERS ID .)
    )               reduce using rule 46 (FARG -> * POINTERS ID .)


state 102

    (7) FUNCTION -> VOIDTYPE ID emptyF1 ( ARGS ) { . LINES } emptyF2
    (23) LINES -> .
    (24) LINES -> . LINES LINE ;
    }               reduce using rule 23 (LINES -> .)
    IF              reduce using rule 23 (LINES -> .)
    PRINT           reduce using rule 23 (LINES -> .)
    SCANF           reduce using rule 23 (LINES -> .)
    TYPE            reduce using rule 23 (LINES -> .)
    ID              reduce using rule 23 (LINES -> .)
    !               reduce using rule 23 (LINES -> .)
    (               reduce using rule 23 (LINES -> .)
    CHAR            reduce using rule 23 (LINES -> .)
    NUMBERF         reduce using rule 23 (LINES -> .)
    NUMBER          reduce using rule 23 (LINES -> .)
    &               reduce using rule 23 (LINES -> .)

    LINES                          shift and go to state 115

state 103

    (48) DECLAR -> TYPE . POINTERS IDPRIMA
    (49) POINTERS -> .
    (50) POINTERS -> . * POINTERS
    ID              reduce using rule 49 (POINTERS -> .)
    *               shift and go to state 90

    POINTERS                       shift and go to state 116

state 104

    (1) S -> S2 TYPE emptymain MAIN ( ) { LINES } .
    $end            reduce using rule 1 (S -> S2 TYPE emptymain MAIN ( ) { LINES } .)


state 105

    (24) LINES -> LINES LINE . ;
    ;               shift and go to state 117


state 106

    (25) LINE -> IF . ( OROP ) emptyif { LINES } ELSERULE
    (               shift and go to state 118


state 107

    (26) LINE -> PRINT . ( STRING PRINTIDS )
    (               shift and go to state 119


state 108

    (27) LINE -> SCANF . ( STRING SCANIDS )
    (               shift and go to state 120


state 109

    (28) LINE -> DECLAR .
    ;               reduce using rule 28 (LINE -> DECLAR .)


state 110

    (29) LINE -> INSTR .
    ;               reduce using rule 29 (LINE -> INSTR .)


state 111

    (13) RESTGLOBAL -> , emptyglobal2 ELEM RESTGLOBAL .
    ;               reduce using rule 13 (RESTGLOBAL -> , emptyglobal2 ELEM RESTGLOBAL .)


state 112

    (21) RARGS -> , TYPE . ARG RARGS
    (22) ARG -> . ID
    ID              shift and go to state 84

    ARG                            shift and go to state 121

state 113

    (8) FUNCTION -> TYPE ID emptyF1 ( ARGS ) { LINES . } emptyF2
    (24) LINES -> LINES . LINE ;
    (25) LINE -> . IF ( OROP ) emptyif { LINES } ELSERULE
    (26) LINE -> . PRINT ( STRING PRINTIDS )
    (27) LINE -> . SCANF ( STRING SCANIDS )
    (28) LINE -> . DECLAR
    (29) LINE -> . INSTR
    (48) DECLAR -> . TYPE POINTERS IDPRIMA
    (38) INSTR -> . FCALL
    (39) INSTR -> . OROP
    (40) INSTR -> . ASIG
    (41) FCALL -> . ID ( FARGS )
    (61) OROP -> . ANDOP
    (62) OROP -> . OROP ORSIMB ANDOP
    (60) ASIG -> . ID = INSTR
    (63) ANDOP -> . NOTOP
    (64) ANDOP -> . ANDOP ANDSIMB NOTOP
    (65) NOTOP -> . COMPOP
    (66) NOTOP -> . ! NOTOP
    (67) COMPOP -> . ADDOP
    (68) COMPOP -> . COMPOP COMPSIMB ADDOP
    (69) ADDOP -> . PRODOP
    (70) ADDOP -> . ADDOP - PRODOP
    (71) ADDOP -> . ADDOP + PRODOP
    (72) PRODOP -> . PAROP
    (73) PRODOP -> . PRODOP / PAROP
    (74) PRODOP -> . PRODOP * PAROP
    (75) PAROP -> . VAL
    (76) PAROP -> . ( OROP )
    (77) VAL -> . REFERENCE
    (78) VAL -> . ID
    (79) VAL -> . CHAR
    (80) VAL -> . NUMBERF
    (81) VAL -> . NUMBER
    (82) REFERENCE -> . & ID
    }               shift and go to state 122
    IF              shift and go to state 106
    PRINT           shift and go to state 107
    SCANF           shift and go to state 108
    TYPE            shift and go to state 103
    ID              shift and go to state 20
    !               shift and go to state 29
    (               shift and go to state 25
    CHAR            shift and go to state 35
    NUMBERF         shift and go to state 36
    NUMBER          shift and go to state 37
    &               shift and go to state 38

    LINE                           shift and go to state 105
    OROP                           shift and go to state 23
    DECLAR                         shift and go to state 109
    INSTR                          shift and go to state 110
    FCALL                          shift and go to state 22
    ASIG                           shift and go to state 24
    ANDOP                          shift and go to state 26
    NOTOP                          shift and go to state 27
    COMPOP                         shift and go to state 28
    ADDOP                          shift and go to state 30
    PRODOP                         shift and go to state 31
    PAROP                          shift and go to state 32
    VAL                            shift and go to state 33
    REFERENCE                      shift and go to state 34

state 114

    (45) RFARGS -> , FARG RFARGS .
    )               reduce using rule 45 (RFARGS -> , FARG RFARGS .)


state 115

    (7) FUNCTION -> VOIDTYPE ID emptyF1 ( ARGS ) { LINES . } emptyF2
    (24) LINES -> LINES . LINE ;
    (25) LINE -> . IF ( OROP ) emptyif { LINES } ELSERULE
    (26) LINE -> . PRINT ( STRING PRINTIDS )
    (27) LINE -> . SCANF ( STRING SCANIDS )
    (28) LINE -> . DECLAR
    (29) LINE -> . INSTR
    (48) DECLAR -> . TYPE POINTERS IDPRIMA
    (38) INSTR -> . FCALL
    (39) INSTR -> . OROP
    (40) INSTR -> . ASIG
    (41) FCALL -> . ID ( FARGS )
    (61) OROP -> . ANDOP
    (62) OROP -> . OROP ORSIMB ANDOP
    (60) ASIG -> . ID = INSTR
    (63) ANDOP -> . NOTOP
    (64) ANDOP -> . ANDOP ANDSIMB NOTOP
    (65) NOTOP -> . COMPOP
    (66) NOTOP -> . ! NOTOP
    (67) COMPOP -> . ADDOP
    (68) COMPOP -> . COMPOP COMPSIMB ADDOP
    (69) ADDOP -> . PRODOP
    (70) ADDOP -> . ADDOP - PRODOP
    (71) ADDOP -> . ADDOP + PRODOP
    (72) PRODOP -> . PAROP
    (73) PRODOP -> . PRODOP / PAROP
    (74) PRODOP -> . PRODOP * PAROP
    (75) PAROP -> . VAL
    (76) PAROP -> . ( OROP )
    (77) VAL -> . REFERENCE
    (78) VAL -> . ID
    (79) VAL -> . CHAR
    (80) VAL -> . NUMBERF
    (81) VAL -> . NUMBER
    (82) REFERENCE -> . & ID
    }               shift and go to state 123
    IF              shift and go to state 106
    PRINT           shift and go to state 107
    SCANF           shift and go to state 108
    TYPE            shift and go to state 103
    ID              shift and go to state 20
    !               shift and go to state 29
    (               shift and go to state 25
    CHAR            shift and go to state 35
    NUMBERF         shift and go to state 36
    NUMBER          shift and go to state 37
    &               shift and go to state 38

    LINE                           shift and go to state 105
    OROP                           shift and go to state 23
    DECLAR                         shift and go to state 109
    INSTR                          shift and go to state 110
    FCALL                          shift and go to state 22
    ASIG                           shift and go to state 24
    ANDOP                          shift and go to state 26
    NOTOP                          shift and go to state 27
    COMPOP                         shift and go to state 28
    ADDOP                          shift and go to state 30
    PRODOP                         shift and go to state 31
    PAROP                          shift and go to state 32
    VAL                            shift and go to state 33
    REFERENCE                      shift and go to state 34

state 116

    (48) DECLAR -> TYPE POINTERS . IDPRIMA
    (51) IDPRIMA -> . empty ELEM REST
    (58) empty -> .
    ID              reduce using rule 58 (empty -> .)

    IDPRIMA                        shift and go to state 124
    empty                          shift and go to state 125

state 117

    (24) LINES -> LINES LINE ; .
    }               reduce using rule 24 (LINES -> LINES LINE ; .)
    IF              reduce using rule 24 (LINES -> LINES LINE ; .)
    PRINT           reduce using rule 24 (LINES -> LINES LINE ; .)
    SCANF           reduce using rule 24 (LINES -> LINES LINE ; .)
    TYPE            reduce using rule 24 (LINES -> LINES LINE ; .)
    ID              reduce using rule 24 (LINES -> LINES LINE ; .)
    !               reduce using rule 24 (LINES -> LINES LINE ; .)
    (               reduce using rule 24 (LINES -> LINES LINE ; .)
    CHAR            reduce using rule 24 (LINES -> LINES LINE ; .)
    NUMBERF         reduce using rule 24 (LINES -> LINES LINE ; .)
    NUMBER          reduce using rule 24 (LINES -> LINES LINE ; .)
    &               reduce using rule 24 (LINES -> LINES LINE ; .)


state 118

    (25) LINE -> IF ( . OROP ) emptyif { LINES } ELSERULE
    (61) OROP -> . ANDOP
    (62) OROP -> . OROP ORSIMB ANDOP
    (63) ANDOP -> . NOTOP
    (64) ANDOP -> . ANDOP ANDSIMB NOTOP
    (65) NOTOP -> . COMPOP
    (66) NOTOP -> . ! NOTOP
    (67) COMPOP -> . ADDOP
    (68) COMPOP -> . COMPOP COMPSIMB ADDOP
    (69) ADDOP -> . PRODOP
    (70) ADDOP -> . ADDOP - PRODOP
    (71) ADDOP -> . ADDOP + PRODOP
    (72) PRODOP -> . PAROP
    (73) PRODOP -> . PRODOP / PAROP
    (74) PRODOP -> . PRODOP * PAROP
    (75) PAROP -> . VAL
    (76) PAROP -> . ( OROP )
    (77) VAL -> . REFERENCE
    (78) VAL -> . ID
    (79) VAL -> . CHAR
    (80) VAL -> . NUMBERF
    (81) VAL -> . NUMBER
    (82) REFERENCE -> . & ID
    !               shift and go to state 29
    (               shift and go to state 25
    ID              shift and go to state 50
    CHAR            shift and go to state 35
    NUMBERF         shift and go to state 36
    NUMBER          shift and go to state 37
    &               shift and go to state 38

    OROP                           shift and go to state 126
    ANDOP                          shift and go to state 26
    NOTOP                          shift and go to state 27
    COMPOP                         shift and go to state 28
    ADDOP                          shift and go to state 30
    PRODOP                         shift and go to state 31
    PAROP                          shift and go to state 32
    VAL                            shift and go to state 33
    REFERENCE                      shift and go to state 34

state 119

    (26) LINE -> PRINT ( . STRING PRINTIDS )
    STRING          shift and go to state 127


state 120

    (27) LINE -> SCANF ( . STRING SCANIDS )
    STRING          shift and go to state 128


state 121

    (21) RARGS -> , TYPE ARG . RARGS
    (20) RARGS -> .
    (21) RARGS -> . , TYPE ARG RARGS
    )               reduce using rule 20 (RARGS -> .)
    ,               shift and go to state 97

    RARGS                          shift and go to state 129

state 122

    (8) FUNCTION -> TYPE ID emptyF1 ( ARGS ) { LINES } . emptyF2
    (10) emptyF2 -> .
    TYPE            reduce using rule 10 (emptyF2 -> .)
    ID              reduce using rule 10 (emptyF2 -> .)
    VOIDTYPE        reduce using rule 10 (emptyF2 -> .)

    emptyF2                        shift and go to state 130

state 123

    (7) FUNCTION -> VOIDTYPE ID emptyF1 ( ARGS ) { LINES } . emptyF2
    (10) emptyF2 -> .
    TYPE            reduce using rule 10 (emptyF2 -> .)
    ID              reduce using rule 10 (emptyF2 -> .)
    VOIDTYPE        reduce using rule 10 (emptyF2 -> .)

    emptyF2                        shift and go to state 131

state 124

    (48) DECLAR -> TYPE POINTERS IDPRIMA .
    ;               reduce using rule 48 (DECLAR -> TYPE POINTERS IDPRIMA .)


state 125

    (51) IDPRIMA -> empty . ELEM REST
    (54) ELEM -> . ID = INSTR
    (55) ELEM -> . ID ARRAY
    ID              shift and go to state 95

    ELEM                           shift and go to state 132

state 126

    (25) LINE -> IF ( OROP . ) emptyif { LINES } ELSERULE
    (62) OROP -> OROP . ORSIMB ANDOP
    )               shift and go to state 133
    ORSIMB          shift and go to state 48


state 127

    (26) LINE -> PRINT ( STRING . PRINTIDS )
    (32) PRINTIDS -> .
    (33) PRINTIDS -> . , INSTR PRINTIDS
    )               reduce using rule 32 (PRINTIDS -> .)
    ,               shift and go to state 135

    PRINTIDS                       shift and go to state 134

state 128

    (27) LINE -> SCANF ( STRING . SCANIDS )
    (30) SCANIDS -> .
    (31) SCANIDS -> . , REFERENCE SCANIDS
    )               reduce using rule 30 (SCANIDS -> .)
    ,               shift and go to state 137

    SCANIDS                        shift and go to state 136

state 129

    (21) RARGS -> , TYPE ARG RARGS .
    )               reduce using rule 21 (RARGS -> , TYPE ARG RARGS .)


state 130

    (8) FUNCTION -> TYPE ID emptyF1 ( ARGS ) { LINES } emptyF2 .
    TYPE            reduce using rule 8 (FUNCTION -> TYPE ID emptyF1 ( ARGS ) { LINES } emptyF2 .)
    ID              reduce using rule 8 (FUNCTION -> TYPE ID emptyF1 ( ARGS ) { LINES } emptyF2 .)
    VOIDTYPE        reduce using rule 8 (FUNCTION -> TYPE ID emptyF1 ( ARGS ) { LINES } emptyF2 .)


state 131

    (7) FUNCTION -> VOIDTYPE ID emptyF1 ( ARGS ) { LINES } emptyF2 .
    TYPE            reduce using rule 7 (FUNCTION -> VOIDTYPE ID emptyF1 ( ARGS ) { LINES } emptyF2 .)
    ID              reduce using rule 7 (FUNCTION -> VOIDTYPE ID emptyF1 ( ARGS ) { LINES } emptyF2 .)
    VOIDTYPE        reduce using rule 7 (FUNCTION -> VOIDTYPE ID emptyF1 ( ARGS ) { LINES } emptyF2 .)


state 132

    (51) IDPRIMA -> empty ELEM . REST
    (52) REST -> .
    (53) REST -> . , empty2 ELEM REST
    ;               reduce using rule 52 (REST -> .)
    ,               shift and go to state 139

    REST                           shift and go to state 138

state 133

    (25) LINE -> IF ( OROP ) . emptyif { LINES } ELSERULE
    (34) emptyif -> .
    {               reduce using rule 34 (emptyif -> .)

    emptyif                        shift and go to state 140

state 134

    (26) LINE -> PRINT ( STRING PRINTIDS . )
    )               shift and go to state 141


state 135

    (33) PRINTIDS -> , . INSTR PRINTIDS
    (38) INSTR -> . FCALL
    (39) INSTR -> . OROP
    (40) INSTR -> . ASIG
    (41) FCALL -> . ID ( FARGS )
    (61) OROP -> . ANDOP
    (62) OROP -> . OROP ORSIMB ANDOP
    (60) ASIG -> . ID = INSTR
    (63) ANDOP -> . NOTOP
    (64) ANDOP -> . ANDOP ANDSIMB NOTOP
    (65) NOTOP -> . COMPOP
    (66) NOTOP -> . ! NOTOP
    (67) COMPOP -> . ADDOP
    (68) COMPOP -> . COMPOP COMPSIMB ADDOP
    (69) ADDOP -> . PRODOP
    (70) ADDOP -> . ADDOP - PRODOP
    (71) ADDOP -> . ADDOP + PRODOP
    (72) PRODOP -> . PAROP
    (73) PRODOP -> . PRODOP / PAROP
    (74) PRODOP -> . PRODOP * PAROP
    (75) PAROP -> . VAL
    (76) PAROP -> . ( OROP )
    (77) VAL -> . REFERENCE
    (78) VAL -> . ID
    (79) VAL -> . CHAR
    (80) VAL -> . NUMBERF
    (81) VAL -> . NUMBER
    (82) REFERENCE -> . & ID
    ID              shift and go to state 20
    !               shift and go to state 29
    (               shift and go to state 25
    CHAR            shift and go to state 35
    NUMBERF         shift and go to state 36
    NUMBER          shift and go to state 37
    &               shift and go to state 38

    INSTR                          shift and go to state 142
    FCALL                          shift and go to state 22
    OROP                           shift and go to state 23
    ASIG                           shift and go to state 24
    ANDOP                          shift and go to state 26
    NOTOP                          shift and go to state 27
    COMPOP                         shift and go to state 28
    ADDOP                          shift and go to state 30
    PRODOP                         shift and go to state 31
    PAROP                          shift and go to state 32
    VAL                            shift and go to state 33
    REFERENCE                      shift and go to state 34

state 136

    (27) LINE -> SCANF ( STRING SCANIDS . )
    )               shift and go to state 143


state 137

    (31) SCANIDS -> , . REFERENCE SCANIDS
    (82) REFERENCE -> . & ID
    &               shift and go to state 38

    REFERENCE                      shift and go to state 144

state 138

    (51) IDPRIMA -> empty ELEM REST .
    ;               reduce using rule 51 (IDPRIMA -> empty ELEM REST .)


state 139

    (53) REST -> , . empty2 ELEM REST
    (59) empty2 -> .
    ID              reduce using rule 59 (empty2 -> .)

    empty2                         shift and go to state 145

state 140

    (25) LINE -> IF ( OROP ) emptyif . { LINES } ELSERULE
    {               shift and go to state 146


state 141

    (26) LINE -> PRINT ( STRING PRINTIDS ) .
    ;               reduce using rule 26 (LINE -> PRINT ( STRING PRINTIDS ) .)


state 142

    (33) PRINTIDS -> , INSTR . PRINTIDS
    (32) PRINTIDS -> .
    (33) PRINTIDS -> . , INSTR PRINTIDS
    )               reduce using rule 32 (PRINTIDS -> .)
    ,               shift and go to state 135

    PRINTIDS                       shift and go to state 147

state 143

    (27) LINE -> SCANF ( STRING SCANIDS ) .
    ;               reduce using rule 27 (LINE -> SCANF ( STRING SCANIDS ) .)


state 144

    (31) SCANIDS -> , REFERENCE . SCANIDS
    (30) SCANIDS -> .
    (31) SCANIDS -> . , REFERENCE SCANIDS
    )               reduce using rule 30 (SCANIDS -> .)
    ,               shift and go to state 137

    SCANIDS                        shift and go to state 148

state 145

    (53) REST -> , empty2 . ELEM REST
    (54) ELEM -> . ID = INSTR
    (55) ELEM -> . ID ARRAY
    ID              shift and go to state 95

    ELEM                           shift and go to state 149

state 146

    (25) LINE -> IF ( OROP ) emptyif { . LINES } ELSERULE
    (23) LINES -> .
    (24) LINES -> . LINES LINE ;
    }               reduce using rule 23 (LINES -> .)
    IF              reduce using rule 23 (LINES -> .)
    PRINT           reduce using rule 23 (LINES -> .)
    SCANF           reduce using rule 23 (LINES -> .)
    TYPE            reduce using rule 23 (LINES -> .)
    ID              reduce using rule 23 (LINES -> .)
    !               reduce using rule 23 (LINES -> .)
    (               reduce using rule 23 (LINES -> .)
    CHAR            reduce using rule 23 (LINES -> .)
    NUMBERF         reduce using rule 23 (LINES -> .)
    NUMBER          reduce using rule 23 (LINES -> .)
    &               reduce using rule 23 (LINES -> .)

    LINES                          shift and go to state 150

state 147

    (33) PRINTIDS -> , INSTR PRINTIDS .
    )               reduce using rule 33 (PRINTIDS -> , INSTR PRINTIDS .)


state 148

    (31) SCANIDS -> , REFERENCE SCANIDS .
    )               reduce using rule 31 (SCANIDS -> , REFERENCE SCANIDS .)


state 149

    (53) REST -> , empty2 ELEM . REST
    (52) REST -> .
    (53) REST -> . , empty2 ELEM REST
    ;               reduce using rule 52 (REST -> .)
    ,               shift and go to state 139

    REST                           shift and go to state 151

state 150

    (25) LINE -> IF ( OROP ) emptyif { LINES . } ELSERULE
    (24) LINES -> LINES . LINE ;
    (25) LINE -> . IF ( OROP ) emptyif { LINES } ELSERULE
    (26) LINE -> . PRINT ( STRING PRINTIDS )
    (27) LINE -> . SCANF ( STRING SCANIDS )
    (28) LINE -> . DECLAR
    (29) LINE -> . INSTR
    (48) DECLAR -> . TYPE POINTERS IDPRIMA
    (38) INSTR -> . FCALL
    (39) INSTR -> . OROP
    (40) INSTR -> . ASIG
    (41) FCALL -> . ID ( FARGS )
    (61) OROP -> . ANDOP
    (62) OROP -> . OROP ORSIMB ANDOP
    (60) ASIG -> . ID = INSTR
    (63) ANDOP -> . NOTOP
    (64) ANDOP -> . ANDOP ANDSIMB NOTOP
    (65) NOTOP -> . COMPOP
    (66) NOTOP -> . ! NOTOP
    (67) COMPOP -> . ADDOP
    (68) COMPOP -> . COMPOP COMPSIMB ADDOP
    (69) ADDOP -> . PRODOP
    (70) ADDOP -> . ADDOP - PRODOP
    (71) ADDOP -> . ADDOP + PRODOP
    (72) PRODOP -> . PAROP
    (73) PRODOP -> . PRODOP / PAROP
    (74) PRODOP -> . PRODOP * PAROP
    (75) PAROP -> . VAL
    (76) PAROP -> . ( OROP )
    (77) VAL -> . REFERENCE
    (78) VAL -> . ID
    (79) VAL -> . CHAR
    (80) VAL -> . NUMBERF
    (81) VAL -> . NUMBER
    (82) REFERENCE -> . & ID
    }               shift and go to state 152
    IF              shift and go to state 106
    PRINT           shift and go to state 107
    SCANF           shift and go to state 108
    TYPE            shift and go to state 103
    ID              shift and go to state 20
    !               shift and go to state 29
    (               shift and go to state 25
    CHAR            shift and go to state 35
    NUMBERF         shift and go to state 36
    NUMBER          shift and go to state 37
    &               shift and go to state 38

    OROP                           shift and go to state 23
    LINE                           shift and go to state 105
    DECLAR                         shift and go to state 109
    INSTR                          shift and go to state 110
    FCALL                          shift and go to state 22
    ASIG                           shift and go to state 24
    ANDOP                          shift and go to state 26
    NOTOP                          shift and go to state 27
    COMPOP                         shift and go to state 28
    ADDOP                          shift and go to state 30
    PRODOP                         shift and go to state 31
    PAROP                          shift and go to state 32
    VAL                            shift and go to state 33
    REFERENCE                      shift and go to state 34

state 151

    (53) REST -> , empty2 ELEM REST .
    ;               reduce using rule 53 (REST -> , empty2 ELEM REST .)


state 152

    (25) LINE -> IF ( OROP ) emptyif { LINES } . ELSERULE
    (35) ELSERULE -> .
    (36) ELSERULE -> . ELSE emptyelse { LINES }
    ;               reduce using rule 35 (ELSERULE -> .)
    ELSE            shift and go to state 154

    ELSERULE                       shift and go to state 153

state 153

    (25) LINE -> IF ( OROP ) emptyif { LINES } ELSERULE .
    ;               reduce using rule 25 (LINE -> IF ( OROP ) emptyif { LINES } ELSERULE .)


state 154

    (36) ELSERULE -> ELSE . emptyelse { LINES }
    (37) emptyelse -> .
    {               reduce using rule 37 (emptyelse -> .)

    emptyelse                      shift and go to state 155

state 155

    (36) ELSERULE -> ELSE emptyelse . { LINES }
    {               shift and go to state 156


state 156

    (36) ELSERULE -> ELSE emptyelse { . LINES }
    (23) LINES -> .
    (24) LINES -> . LINES LINE ;
    }               reduce using rule 23 (LINES -> .)
    IF              reduce using rule 23 (LINES -> .)
    PRINT           reduce using rule 23 (LINES -> .)
    SCANF           reduce using rule 23 (LINES -> .)
    TYPE            reduce using rule 23 (LINES -> .)
    ID              reduce using rule 23 (LINES -> .)
    !               reduce using rule 23 (LINES -> .)
    (               reduce using rule 23 (LINES -> .)
    CHAR            reduce using rule 23 (LINES -> .)
    NUMBERF         reduce using rule 23 (LINES -> .)
    NUMBER          reduce using rule 23 (LINES -> .)
    &               reduce using rule 23 (LINES -> .)

    LINES                          shift and go to state 157

state 157

    (36) ELSERULE -> ELSE emptyelse { LINES . }
    (24) LINES -> LINES . LINE ;
    (25) LINE -> . IF ( OROP ) emptyif { LINES } ELSERULE
    (26) LINE -> . PRINT ( STRING PRINTIDS )
    (27) LINE -> . SCANF ( STRING SCANIDS )
    (28) LINE -> . DECLAR
    (29) LINE -> . INSTR
    (48) DECLAR -> . TYPE POINTERS IDPRIMA
    (38) INSTR -> . FCALL
    (39) INSTR -> . OROP
    (40) INSTR -> . ASIG
    (41) FCALL -> . ID ( FARGS )
    (61) OROP -> . ANDOP
    (62) OROP -> . OROP ORSIMB ANDOP
    (60) ASIG -> . ID = INSTR
    (63) ANDOP -> . NOTOP
    (64) ANDOP -> . ANDOP ANDSIMB NOTOP
    (65) NOTOP -> . COMPOP
    (66) NOTOP -> . ! NOTOP
    (67) COMPOP -> . ADDOP
    (68) COMPOP -> . COMPOP COMPSIMB ADDOP
    (69) ADDOP -> . PRODOP
    (70) ADDOP -> . ADDOP - PRODOP
    (71) ADDOP -> . ADDOP + PRODOP
    (72) PRODOP -> . PAROP
    (73) PRODOP -> . PRODOP / PAROP
    (74) PRODOP -> . PRODOP * PAROP
    (75) PAROP -> . VAL
    (76) PAROP -> . ( OROP )
    (77) VAL -> . REFERENCE
    (78) VAL -> . ID
    (79) VAL -> . CHAR
    (80) VAL -> . NUMBERF
    (81) VAL -> . NUMBER
    (82) REFERENCE -> . & ID
    }               shift and go to state 158
    IF              shift and go to state 106
    PRINT           shift and go to state 107
    SCANF           shift and go to state 108
    TYPE            shift and go to state 103
    ID              shift and go to state 20
    !               shift and go to state 29
    (               shift and go to state 25
    CHAR            shift and go to state 35
    NUMBERF         shift and go to state 36
    NUMBER          shift and go to state 37
    &               shift and go to state 38

    LINE                           shift and go to state 105
    OROP                           shift and go to state 23
    DECLAR                         shift and go to state 109
    INSTR                          shift and go to state 110
    FCALL                          shift and go to state 22
    ASIG                           shift and go to state 24
    ANDOP                          shift and go to state 26
    NOTOP                          shift and go to state 27
    COMPOP                         shift and go to state 28
    ADDOP                          shift and go to state 30
    PRODOP                         shift and go to state 31
    PAROP                          shift and go to state 32
    VAL                            shift and go to state 33
    REFERENCE                      shift and go to state 34

state 158

    (36) ELSERULE -> ELSE emptyelse { LINES } .
    ;               reduce using rule 36 (ELSERULE -> ELSE emptyelse { LINES } .)
